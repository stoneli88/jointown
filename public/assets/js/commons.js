!function(e) {
    function t(n) {
        if (r[n]) return r[n].exports;
        var i = r[n] = {
            exports: {},
            id: n,
            loaded: !1
        };
        return e[n].call(i.exports, i, i.exports, t), i.loaded = !0, i.exports;
    }
    var n = window.webpackJsonp;
    window.webpackJsonp = function(o, a) {
        for (var s, u, l = 0, c = []; l < o.length; l++) u = o[l], i[u] && c.push.apply(c, i[u]), 
        i[u] = 0;
        for (s in a) e[s] = a[s];
        for (n && n(o, a); c.length; ) c.shift().call(null, t);
        if (a[0]) return r[0] = 0, t(0);
    };
    var r = {}, i = {
        0: 0
    };
    t.e = function(e, n) {
        if (0 === i[e]) return n.call(null, t);
        if (void 0 !== i[e]) i[e].push(n); else {
            i[e] = [ n ];
            var r = document.getElementsByTagName("head")[0], o = document.createElement("script");
            o.type = "text/javascript", o.charset = "utf-8", o.async = !0, o.src = t.p + window.webpackManifest[e], 
            r.appendChild(o);
        }
    }, t.m = e, t.c = r, t.p = "./public";
}([ , function(e, exports, t) {
    var n, r, i;
    !function(o, a) {
        r = [ t(3) ], n = o, i = "function" == typeof n ? n.apply(exports, r) : n, !(void 0 !== i && (e.exports = i));
    }(function() {
        return function(e, t, n) {
            function r() {}
            function i(e, t) {
                if (t) return "'" + e.split("'").join("\\'").split('\\"').join('\\\\\\"').replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\t/g, "\\t") + "'";
                var n = e.charAt(0), r = e.substring(1);
                return "=" === n ? "+(" + r + ")+" : ":" === n ? "+$kendoHtmlEncode(" + r + ")+" : ";" + e + ";$kendoOutput+=";
            }
            function o(e, t, n) {
                return e += "", t = t || 2, n = t - e.length, n ? W[t].substring(0, n) + e : e;
            }
            function a(e) {
                var t = e.css(ye.support.transitions.css + "box-shadow") || e.css("box-shadow"), n = t ? t.match(Ne) || [ 0, 0, 0, 0, 0 ] : [ 0, 0, 0, 0, 0 ], r = Se.max(+n[3], +(n[4] || 0));
                return {
                    left: -n[1] + r,
                    right: +n[1] + r,
                    bottom: +n[2] + r
                };
            }
            function s(t, n) {
                var r, i, o, s, u, l, c, d, f = ke.browser, p = "rtl" == t.css("direction");
                return t.parent().hasClass("k-animation-container") ? (c = t.parent(".k-animation-container"), 
                d = c[0].style, c.is(":hidden") && c.show(), r = Ee.test(d.width) || Ee.test(d.height), 
                r || c.css({
                    width: t.outerWidth(),
                    height: t.outerHeight(),
                    boxSizing: "content-box",
                    mozBoxSizing: "content-box",
                    webkitBoxSizing: "content-box"
                })) : (i = a(t), o = t[0].style.width, s = t[0].style.height, u = Ee.test(o), l = Ee.test(s), 
                f.opera && (i.left = i.right = i.bottom = 5), r = u || l, !u && (!n || n && o) && (o = t.outerWidth()), 
                !l && (!n || n && s) && (s = t.outerHeight()), t.wrap(e("<div/>").addClass("k-animation-container").css({
                    width: o,
                    height: s,
                    marginLeft: i.left * (p ? 1 : -1),
                    paddingLeft: i.left,
                    paddingRight: i.right,
                    paddingBottom: i.bottom
                })), r && t.css({
                    width: "100%",
                    height: "100%",
                    boxSizing: "border-box",
                    mozBoxSizing: "border-box",
                    webkitBoxSizing: "border-box"
                })), f.msie && Se.floor(f.version) <= 7 && (t.css({
                    zoom: 1
                }), t.children(".k-menu").width(t.width())), t.parent();
            }
            function u(e) {
                var t = 1, n = arguments.length;
                for (t = 1; n > t; t++) l(e, arguments[t]);
                return e;
            }
            function l(e, t) {
                var n, r, i, o, a, s = ye.data.ObservableArray, u = ye.data.LazyObservableArray, c = ye.data.DataSource, d = ye.data.HierarchicalDataSource;
                for (n in t) r = t[n], i = typeof r, o = i === Le && null !== r ? r.constructor : null, 
                o && o !== Array && o !== s && o !== u && o !== c && o !== d ? r instanceof Date ? e[n] = new Date(r.getTime()) : O(r.clone) ? e[n] = r.clone() : (a = e[n], 
                e[n] = typeof a === Le ? a || {} : {}, l(e[n], r)) : i !== ze && (e[n] = r);
                return e;
            }
            function c(e, t, r) {
                for (var i in t) if (t.hasOwnProperty(i) && t[i].test(e)) return i;
                return r !== n ? r : e;
            }
            function d(e) {
                return e.replace(/([a-z][A-Z])/g, function(e) {
                    return e.charAt(0) + "-" + e.charAt(1).toLowerCase();
                });
            }
            function f(e) {
                return e.replace(/\-(\w)/g, function(e, t) {
                    return t.toUpperCase();
                });
            }
            function p(t, n) {
                var r, i = {};
                return document.defaultView && document.defaultView.getComputedStyle ? (r = document.defaultView.getComputedStyle(t, ""), 
                n && e.each(n, function(e, t) {
                    i[t] = r.getPropertyValue(t);
                })) : (r = t.currentStyle, n && e.each(n, function(e, t) {
                    i[t] = r[f(t)];
                })), ye.size(i) || (i = r), i;
            }
            function h(e) {
                if (e && e.className && "string" == typeof e.className && e.className.indexOf("k-auto-scrollable") > -1) return !0;
                var t = p(e, [ "overflow" ]).overflow;
                return "auto" == t || "scroll" == t;
            }
            function m(t, r) {
                var i, o = ke.browser.webkit, a = ke.browser.mozilla, s = t instanceof e ? t[0] : t;
                if (t) return i = ke.isRtl(t), r === n ? i && o ? s.scrollWidth - s.clientWidth - s.scrollLeft : Math.abs(s.scrollLeft) : (s.scrollLeft = i && o ? s.scrollWidth - s.clientWidth - r : i && a ? -r : r, 
                n);
            }
            function g(e) {
                var t, n = 0;
                for (t in e) e.hasOwnProperty(t) && "toJSON" != t && n++;
                return n;
            }
            function y(e, n, r) {
                n || (n = "offset");
                var i = e[n]();
                return ke.browser.msie && (ke.pointers || ke.msPointers) && !r && (i.top -= t.pageYOffset - document.documentElement.scrollTop, 
                i.left -= t.pageXOffset - document.documentElement.scrollLeft), i;
            }
            function v(e) {
                var t = {};
                return be("string" == typeof e ? e.split(" ") : e, function(e) {
                    t[e] = this;
                }), t;
            }
            function b(e) {
                return new ye.effects.Element(e);
            }
            function x(e, t, n, r) {
                return typeof e === He && (O(t) && (r = t, t = 400, n = !1), O(n) && (r = n, n = !1), 
                typeof t === je && (n = t, t = 400), e = {
                    effects: e,
                    duration: t,
                    reverse: n,
                    complete: r
                }), ve({
                    effects: {},
                    duration: 400,
                    reverse: !1,
                    init: Te,
                    teardown: Te,
                    hide: !1
                }, e, {
                    completeCallback: e.complete,
                    complete: Te
                });
            }
            function w(t, n, r, i, o) {
                for (var a, s = 0, u = t.length; u > s; s++) a = e(t[s]), a.queue(function() {
                    B.promise(a, x(n, r, i, o));
                });
                return t;
            }
            function T(e, t, n, r) {
                return t && (t = t.split(" "), be(t, function(t, n) {
                    e.toggleClass(n, r);
                })), e;
            }
            function S(e) {
                return ("" + e).replace(U, "&amp;").replace(X, "&lt;").replace(Y, "&gt;").replace(J, "&quot;").replace(V, "&#39;");
            }
            function C(e, t) {
                var r;
                return 0 === t.indexOf("data") && (t = t.substring(4), t = t.charAt(0).toLowerCase() + t.substring(1)), 
                t = t.replace(ie, "-$1"), r = e.getAttribute("data-" + ye.ns + t), null === r ? r = n : "null" === r ? r = null : "true" === r ? r = !0 : "false" === r ? r = !1 : De.test(r) ? r = parseFloat(r) : ne.test(r) && !re.test(r) && (r = Function("return (" + r + ")")()), 
                r;
            }
            function k(t, r) {
                var i, o, a = {};
                for (i in r) o = C(t, i), o !== n && (te.test(i) && (o = ye.template(e("#" + o).html())), 
                a[i] = o);
                return a;
            }
            function E(t, n) {
                return e.contains(t, n) ? -1 : 1;
            }
            function M() {
                var t = e(this);
                return e.inArray(t.attr("data-" + ye.ns + "role"), [ "slider", "rangeslider" ]) > -1 || t.is(":visible");
            }
            function N(e, t) {
                var n = e.nodeName.toLowerCase();
                return (/input|select|textarea|button|object/.test(n) ? !e.disabled : "a" === n ? e.href || t : t) && D(e);
            }
            function D(t) {
                return e.expr.filters.visible(t) && !e(t).parents().addBack().filter(function() {
                    return "hidden" === e.css(this, "visibility");
                }).length;
            }
            function A(e, t) {
                return new A.fn.init(e, t);
            }
            var H, O, L, _, j, z, F, P, R, $, q, W, I, B, U, X, J, V, Y, G, Q, K, Z, ee, te, ne, re, ie, oe, ae, se, ue, le, ce, de, fe, pe, he, me, ge, ye = t.kendo = t.kendo || {
                cultures: {}
            }, ve = e.extend, be = e.each, xe = e.isArray, we = e.proxy, Te = e.noop, Se = Math, Ce = t.JSON || {}, ke = {}, Ee = /%/, Me = /\{(\d+)(:[^\}]+)?\}/g, Ne = /(\d+(?:\.?)\d*)px\s*(\d+(?:\.?)\d*)px\s*(\d+(?:\.?)\d*)px\s*(\d+)?/i, De = /^(\+|-?)\d+(\.?)\d*$/, Ae = "function", He = "string", Oe = "number", Le = "object", _e = "null", je = "boolean", ze = "undefined", Fe = {}, Pe = {}, Re = [].slice;
            ye.version = "2016.2.714".replace(/^\s+|\s+$/g, ""), r.extend = function(e) {
                var t, n, r = function() {}, i = this, o = e && e.init ? e.init : function() {
                    i.apply(this, arguments);
                };
                r.prototype = i.prototype, n = o.fn = o.prototype = new r();
                for (t in e) n[t] = null != e[t] && e[t].constructor === Object ? ve(!0, {}, r.prototype[t], e[t]) : e[t];
                return n.constructor = o, o.extend = i.extend, o;
            }, r.prototype._initOptions = function(e) {
                this.options = u({}, this.options, e);
            }, O = ye.isFunction = function(e) {
                return "function" == typeof e;
            }, L = function() {
                this._defaultPrevented = !0;
            }, _ = function() {
                return this._defaultPrevented === !0;
            }, j = r.extend({
                init: function() {
                    this._events = {};
                },
                bind: function(e, t, r) {
                    var i, o, a, s, u, l = this, c = typeof e === He ? [ e ] : e, d = typeof t === Ae;
                    if (t === n) {
                        for (i in e) l.bind(i, e[i]);
                        return l;
                    }
                    for (i = 0, o = c.length; o > i; i++) e = c[i], s = d ? t : t[e], s && (r && (a = s, 
                    s = function() {
                        l.unbind(e, s), a.apply(l, arguments);
                    }, s.original = a), u = l._events[e] = l._events[e] || [], u.push(s));
                    return l;
                },
                one: function(e, t) {
                    return this.bind(e, t, !0);
                },
                first: function(e, t) {
                    var n, r, i, o, a = this, s = typeof e === He ? [ e ] : e, u = typeof t === Ae;
                    for (n = 0, r = s.length; r > n; n++) e = s[n], i = u ? t : t[e], i && (o = a._events[e] = a._events[e] || [], 
                    o.unshift(i));
                    return a;
                },
                trigger: function(e, t) {
                    var n, r, i = this, o = i._events[e];
                    if (o) {
                        for (t = t || {}, t.sender = i, t._defaultPrevented = !1, t.preventDefault = L, 
                        t.isDefaultPrevented = _, o = o.slice(), n = 0, r = o.length; r > n; n++) o[n].call(i, t);
                        return t._defaultPrevented === !0;
                    }
                    return !1;
                },
                unbind: function(e, t) {
                    var r, i = this, o = i._events[e];
                    if (e === n) i._events = {}; else if (o) if (t) for (r = o.length - 1; r >= 0; r--) (o[r] === t || o[r].original === t) && o.splice(r, 1); else i._events[e] = [];
                    return i;
                }
            }), z = /^\w+/, F = /\$\{([^}]*)\}/g, P = /\\\}/g, R = /__CURLY__/g, $ = /\\#/g, 
            q = /__SHARP__/g, W = [ "", "0", "00", "000", "0000" ], H = {
                paramName: "data",
                useWithBlock: !0,
                render: function(e, t) {
                    var n, r, i = "";
                    for (n = 0, r = t.length; r > n; n++) i += e(t[n]);
                    return i;
                },
                compile: function(e, t) {
                    var n, r, o, a = ve({}, this, t), s = a.paramName, u = s.match(z)[0], l = a.useWithBlock, c = "var $kendoOutput, $kendoHtmlEncode = kendo.htmlEncode;";
                    if (O(e)) return e;
                    for (c += l ? "with(" + s + "){" : "", c += "$kendoOutput=", r = e.replace(P, "__CURLY__").replace(F, "#=$kendoHtmlEncode($1)#").replace(R, "}").replace($, "__SHARP__").split("#"), 
                    o = 0; r.length > o; o++) c += i(r[o], o % 2 === 0);
                    c += l ? ";}" : ";", c += "return $kendoOutput;", c = c.replace(q, "#");
                    try {
                        return n = Function(u, c), n._slotCount = Math.floor(r.length / 2), n;
                    } catch (d) {
                        throw Error(ye.format("Invalid template:'{0}' Generated code:'{1}'", e, c));
                    }
                }
            }, function() {
                function e(e) {
                    return a.lastIndex = 0, a.test(e) ? '"' + e.replace(a, function(e) {
                        var t = s[e];
                        return typeof t === He ? t : "\\u" + ("0000" + e.charCodeAt(0).toString(16)).slice(-4);
                    }) + '"' : '"' + e + '"';
                }
                function t(o, a) {
                    var s, l, c, d, f, p, h = n, m = a[o];
                    if (m && typeof m === Le && typeof m.toJSON === Ae && (m = m.toJSON(o)), typeof i === Ae && (m = i.call(a, o, m)), 
                    p = typeof m, p === He) return e(m);
                    if (p === Oe) return isFinite(m) ? m + "" : _e;
                    if (p === je || p === _e) return m + "";
                    if (p === Le) {
                        if (!m) return _e;
                        if (n += r, f = [], "[object Array]" === u.apply(m)) {
                            for (d = m.length, s = 0; d > s; s++) f[s] = t(s, m) || _e;
                            return c = 0 === f.length ? "[]" : n ? "[\n" + n + f.join(",\n" + n) + "\n" + h + "]" : "[" + f.join(",") + "]", 
                            n = h, c;
                        }
                        if (i && typeof i === Le) for (d = i.length, s = 0; d > s; s++) typeof i[s] === He && (l = i[s], 
                        c = t(l, m), c && f.push(e(l) + (n ? ": " : ":") + c)); else for (l in m) Object.hasOwnProperty.call(m, l) && (c = t(l, m), 
                        c && f.push(e(l) + (n ? ": " : ":") + c));
                        return c = 0 === f.length ? "{}" : n ? "{\n" + n + f.join(",\n" + n) + "\n" + h + "}" : "{" + f.join(",") + "}", 
                        n = h, c;
                    }
                }
                var n, r, i, a = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, s = {
                    "\b": "\\b",
                    "\t": "\\t",
                    "\n": "\\n",
                    "\f": "\\f",
                    "\r": "\\r",
                    '"': '\\"',
                    "\\": "\\\\"
                }, u = {}.toString;
                typeof Date.prototype.toJSON !== Ae && (Date.prototype.toJSON = function() {
                    var e = this;
                    return isFinite(e.valueOf()) ? o(e.getUTCFullYear(), 4) + "-" + o(e.getUTCMonth() + 1) + "-" + o(e.getUTCDate()) + "T" + o(e.getUTCHours()) + ":" + o(e.getUTCMinutes()) + ":" + o(e.getUTCSeconds()) + "Z" : null;
                }, String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function() {
                    return this.valueOf();
                }), typeof Ce.stringify !== Ae && (Ce.stringify = function(e, o, a) {
                    var s;
                    if (n = "", r = "", typeof a === Oe) for (s = 0; a > s; s += 1) r += " "; else typeof a === He && (r = a);
                    if (i = o, o && typeof o !== Ae && (typeof o !== Le || typeof o.length !== Oe)) throw Error("JSON.stringify");
                    return t("", {
                        "": e
                    });
                });
            }(), function() {
                function e(e) {
                    if (e) {
                        if (e.numberFormat) return e;
                        if (typeof e === He) {
                            var t = ye.cultures;
                            return t[e] || t[e.split("-")[0]] || null;
                        }
                        return null;
                    }
                    return null;
                }
                function t(t) {
                    return t && (t = e(t)), t || ye.cultures.current;
                }
                function r(e, r, i) {
                    i = t(i);
                    var a = i.calendars.standard, s = a.days, u = a.months;
                    return r = a.patterns[r] || r, r.replace(l, function(t) {
                        var r, i, l;
                        return "d" === t ? i = e.getDate() : "dd" === t ? i = o(e.getDate()) : "ddd" === t ? i = s.namesAbbr[e.getDay()] : "dddd" === t ? i = s.names[e.getDay()] : "M" === t ? i = e.getMonth() + 1 : "MM" === t ? i = o(e.getMonth() + 1) : "MMM" === t ? i = u.namesAbbr[e.getMonth()] : "MMMM" === t ? i = u.names[e.getMonth()] : "yy" === t ? i = o(e.getFullYear() % 100) : "yyyy" === t ? i = o(e.getFullYear(), 4) : "h" === t ? i = e.getHours() % 12 || 12 : "hh" === t ? i = o(e.getHours() % 12 || 12) : "H" === t ? i = e.getHours() : "HH" === t ? i = o(e.getHours()) : "m" === t ? i = e.getMinutes() : "mm" === t ? i = o(e.getMinutes()) : "s" === t ? i = e.getSeconds() : "ss" === t ? i = o(e.getSeconds()) : "f" === t ? i = Se.floor(e.getMilliseconds() / 100) : "ff" === t ? (i = e.getMilliseconds(), 
                        i > 99 && (i = Se.floor(i / 10)), i = o(i)) : "fff" === t ? i = o(e.getMilliseconds(), 3) : "tt" === t ? i = e.getHours() < 12 ? a.AM[0] : a.PM[0] : "zzz" === t ? (r = e.getTimezoneOffset(), 
                        l = 0 > r, i = ("" + Se.abs(r / 60)).split(".")[0], r = Se.abs(r) - 60 * i, i = (l ? "+" : "-") + o(i), 
                        i += ":" + o(r)) : ("zz" === t || "z" === t) && (i = e.getTimezoneOffset() / 60, 
                        l = 0 > i, i = ("" + Se.abs(i)).split(".")[0], i = (l ? "+" : "-") + ("zz" === t ? o(i) : i)), 
                        i !== n ? i : t.slice(1, t.length - 1);
                    });
                }
                function i(e, r, i) {
                    i = t(i);
                    var o, u, l, b, x, w, T, S, C, k, E, M, N, D, A, H, O, L, _, j, z, F, P, R = i.numberFormat, $ = R[h], q = R.decimals, W = R.pattern[0], I = [], B = 0 > e, U = p, X = p, J = -1;
                    if (e === n) return p;
                    if (!isFinite(e)) return e;
                    if (!r) return i.name.length ? e.toLocaleString() : "" + e;
                    if (x = c.exec(r)) {
                        if (r = x[1].toLowerCase(), u = "c" === r, l = "p" === r, (u || l) && (R = u ? R.currency : R.percent, 
                        $ = R[h], q = R.decimals, o = R.symbol, W = R.pattern[B ? 0 : 1]), b = x[2], b && (q = +b), 
                        "e" === r) return b ? e.toExponential(q) : e.toExponential();
                        if (l && (e *= 100), e = s(e, q), B = 0 > e, e = e.split(h), w = e[0], T = e[1], 
                        B && (w = w.substring(1)), X = a(w, 0, w.length, R), T && (X += $ + T), "n" === r && !B) return X;
                        for (e = p, k = 0, E = W.length; E > k; k++) M = W.charAt(k), e += "n" === M ? X : "$" === M || "%" === M ? o : M;
                        return e;
                    }
                    if (B && (e = -e), (r.indexOf("'") > -1 || r.indexOf('"') > -1 || r.indexOf("\\") > -1) && (r = r.replace(d, function(e) {
                        var t = e.charAt(0).replace("\\", ""), n = e.slice(1).replace(t, "");
                        return I.push(n), v;
                    })), r = r.split(";"), B && r[1]) r = r[1], D = !0; else if (0 === e) {
                        if (r = r[2] || r[0], -1 == r.indexOf(g) && -1 == r.indexOf(y)) return r;
                    } else r = r[0];
                    if (j = r.indexOf("%"), z = r.indexOf("$"), l = -1 != j, u = -1 != z, l && (e *= 100), 
                    u && "\\" === r[z - 1] && (r = r.split("\\").join(""), u = !1), (u || l) && (R = u ? R.currency : R.percent, 
                    $ = R[h], q = R.decimals, o = R.symbol), N = r.indexOf(m) > -1, N && (r = r.replace(f, p)), 
                    A = r.indexOf(h), E = r.length, -1 != A ? (T = ("" + e).split("e"), T = T[1] ? s(e, Math.abs(T[1])) : T[0], 
                    T = T.split(h)[1] || p, O = r.lastIndexOf(y) - A, H = r.lastIndexOf(g) - A, L = O > -1, 
                    _ = H > -1, k = T.length, L || _ || (r = r.substring(0, A) + r.substring(A + 1), 
                    E = r.length, A = -1, k = 0), L && O > H ? k = O : H > O && (_ && k > H ? k = H : L && O > k && (k = O)), 
                    k > -1 && (e = s(e, k))) : e = s(e), H = r.indexOf(g), F = O = r.indexOf(y), J = -1 == H && -1 != O ? O : -1 != H && -1 == O ? H : H > O ? O : H, 
                    H = r.lastIndexOf(g), O = r.lastIndexOf(y), P = -1 == H && -1 != O ? O : -1 != H && -1 == O ? H : H > O ? H : O, 
                    J == E && (P = J), -1 != J) {
                        for (X = ("" + e).split(h), w = X[0], T = X[1] || p, S = w.length, C = T.length, 
                        B && -1 * e >= 0 && (B = !1), e = r.substring(0, J), B && !D && (e += "-"), k = J; E > k; k++) {
                            if (M = r.charAt(k), -1 == A) {
                                if (S > P - k) {
                                    e += w;
                                    break;
                                }
                            } else if (-1 != O && k > O && (U = p), S >= A - k && A - k > -1 && (e += w, k = A), 
                            A === k) {
                                e += (T ? $ : p) + T, k += P - A + 1;
                                continue;
                            }
                            M === y ? (e += M, U = M) : M === g && (e += U);
                        }
                        if (N && (e = a(e, J + (B ? 1 : 0), Math.max(P, S + J), R)), P >= J && (e += r.substring(P + 1)), 
                        u || l) {
                            for (X = p, k = 0, E = e.length; E > k; k++) M = e.charAt(k), X += "$" === M || "%" === M ? o : M;
                            e = X;
                        }
                        if (E = I.length) for (k = 0; E > k; k++) e = e.replace(v, I[k]);
                    }
                    return e;
                }
                var a, s, u, l = /dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|HH|H|hh|h|mm|m|fff|ff|f|tt|ss|s|zzz|zz|z|"[^"]*"|'[^']*'/g, c = /^(n|c|p|e)(\d*)$/i, d = /(\\.)|(['][^']*[']?)|(["][^"]*["]?)/g, f = /\,/g, p = "", h = ".", m = ",", g = "#", y = "0", v = "??", b = "en-US", x = {}.toString;
                ye.cultures["en-US"] = {
                    name: b,
                    numberFormat: {
                        pattern: [ "-n" ],
                        decimals: 2,
                        ",": ",",
                        ".": ".",
                        groupSize: [ 3 ],
                        percent: {
                            pattern: [ "-n %", "n %" ],
                            decimals: 2,
                            ",": ",",
                            ".": ".",
                            groupSize: [ 3 ],
                            symbol: "%"
                        },
                        currency: {
                            name: "US Dollar",
                            abbr: "USD",
                            pattern: [ "($n)", "$n" ],
                            decimals: 2,
                            ",": ",",
                            ".": ".",
                            groupSize: [ 3 ],
                            symbol: "$"
                        }
                    },
                    calendars: {
                        standard: {
                            days: {
                                names: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ],
                                namesAbbr: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ],
                                namesShort: [ "Su", "Mo", "Tu", "We", "Th", "Fr", "Sa" ]
                            },
                            months: {
                                names: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
                                namesAbbr: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ]
                            },
                            AM: [ "AM", "am", "AM" ],
                            PM: [ "PM", "pm", "PM" ],
                            patterns: {
                                d: "M/d/yyyy",
                                D: "dddd, MMMM dd, yyyy",
                                F: "dddd, MMMM dd, yyyy h:mm:ss tt",
                                g: "M/d/yyyy h:mm tt",
                                G: "M/d/yyyy h:mm:ss tt",
                                m: "MMMM dd",
                                M: "MMMM dd",
                                s: "yyyy'-'MM'-'ddTHH':'mm':'ss",
                                t: "h:mm tt",
                                T: "h:mm:ss tt",
                                u: "yyyy'-'MM'-'dd HH':'mm':'ss'Z'",
                                y: "MMMM, yyyy",
                                Y: "MMMM, yyyy"
                            },
                            "/": "/",
                            ":": ":",
                            firstDay: 0,
                            twoDigitYearMax: 2029
                        }
                    }
                }, ye.culture = function(t) {
                    var r, i = ye.cultures;
                    return t === n ? i.current : (r = e(t) || i[b], r.calendar = r.calendars.standard, 
                    i.current = r, n);
                }, ye.findCulture = e, ye.getCulture = t, ye.culture(b), a = function(e, t, r, i) {
                    var o, a, s, u, l, c, d = e.indexOf(i[h]), f = i.groupSize.slice(), p = f.shift();
                    if (r = -1 !== d ? d : r + 1, o = e.substring(t, r), a = o.length, a >= p) {
                        for (s = a, u = []; s > -1; ) if (l = o.substring(s - p, s), l && u.push(l), s -= p, 
                        c = f.shift(), p = c !== n ? c : p, 0 === p) {
                            u.push(o.substring(0, s));
                            break;
                        }
                        o = u.reverse().join(i[m]), e = e.substring(0, t) + o + e.substring(r);
                    }
                    return e;
                }, s = function(e, t) {
                    return t = t || 0, e = ("" + e).split("e"), e = Math.round(+(e[0] + "e" + (e[1] ? +e[1] + t : t))), 
                    e = ("" + e).split("e"), e = +(e[0] + "e" + (e[1] ? +e[1] - t : -t)), e.toFixed(t);
                }, u = function(e, t, o) {
                    if (t) {
                        if ("[object Date]" === x.call(e)) return r(e, t, o);
                        if (typeof e === Oe) return i(e, t, o);
                    }
                    return e !== n ? e : "";
                }, ye.format = function(e) {
                    var t = arguments;
                    return e.replace(Me, function(e, n, r) {
                        var i = t[parseInt(n, 10) + 1];
                        return u(i, r ? r.substring(1) : "");
                    });
                }, ye._extractFormat = function(e) {
                    return "{0:" === e.slice(0, 3) && (e = e.slice(3, e.length - 1)), e;
                }, ye._activeElement = function() {
                    try {
                        return document.activeElement;
                    } catch (e) {
                        return document.documentElement.activeElement;
                    }
                }, ye._round = s, ye.toString = u;
            }(), function() {
                function t(e, t, n) {
                    return !(e >= t && n >= e);
                }
                function r(e) {
                    return e.charAt(0);
                }
                function i(t) {
                    return e.map(t, r);
                }
                function o(e, t) {
                    t || 23 !== e.getHours() || e.setHours(e.getHours() + 2);
                }
                function a(e) {
                    for (var t = 0, n = e.length, r = []; n > t; t++) r[t] = (e[t] + "").toLowerCase();
                    return r;
                }
                function s(e) {
                    var t, n = {};
                    for (t in e) n[t] = a(e[t]);
                    return n;
                }
                function u(e, r, a) {
                    if (!e) return null;
                    var u, l, c, d, f, m, g, y, v, x, w, T, S, C = function(e) {
                        for (var t = 0; r[z] === e; ) t++, z++;
                        return t > 0 && (z -= 1), t;
                    }, k = function(t) {
                        var n = b[t] || RegExp("^\\d{1," + t + "}"), r = e.substr(F, t).match(n);
                        return r ? (r = r[0], F += r.length, parseInt(r, 10)) : null;
                    }, E = function(t, n) {
                        for (var r, i, o, a = 0, s = t.length, u = 0, l = 0; s > a; a++) r = t[a], i = r.length, 
                        o = e.substr(F, i), n && (o = o.toLowerCase()), o == r && i > u && (u = i, l = a);
                        return u ? (F += u, l + 1) : null;
                    }, M = function() {
                        var t = !1;
                        return e.charAt(F) === r[z] && (F++, t = !0), t;
                    }, N = a.calendars.standard, D = null, A = null, H = null, O = null, L = null, _ = null, j = null, z = 0, F = 0, P = !1, R = new Date(), $ = N.twoDigitYearMax || 2029, q = R.getFullYear();
                    for (r || (r = "d"), d = N.patterns[r], d && (r = d), r = r.split(""), c = r.length; c > z; z++) if (u = r[z], 
                    P) "'" === u ? P = !1 : M(); else if ("d" === u) {
                        if (l = C("d"), N._lowerDays || (N._lowerDays = s(N.days)), null !== H && l > 2) continue;
                        if (H = 3 > l ? k(2) : E(N._lowerDays[3 == l ? "namesAbbr" : "names"], !0), null === H || t(H, 1, 31)) return null;
                    } else if ("M" === u) {
                        if (l = C("M"), N._lowerMonths || (N._lowerMonths = s(N.months)), A = 3 > l ? k(2) : E(N._lowerMonths[3 == l ? "namesAbbr" : "names"], !0), 
                        null === A || t(A, 1, 12)) return null;
                        A -= 1;
                    } else if ("y" === u) {
                        if (l = C("y"), D = k(l), null === D) return null;
                        2 == l && ("string" == typeof $ && ($ = q + parseInt($, 10)), D = q - q % 100 + D, 
                        D > $ && (D -= 100));
                    } else if ("h" === u) {
                        if (C("h"), O = k(2), 12 == O && (O = 0), null === O || t(O, 0, 11)) return null;
                    } else if ("H" === u) {
                        if (C("H"), O = k(2), null === O || t(O, 0, 23)) return null;
                    } else if ("m" === u) {
                        if (C("m"), L = k(2), null === L || t(L, 0, 59)) return null;
                    } else if ("s" === u) {
                        if (C("s"), _ = k(2), null === _ || t(_, 0, 59)) return null;
                    } else if ("f" === u) {
                        if (l = C("f"), S = e.substr(F, l).match(b[3]), j = k(l), null !== j && (j = parseFloat("0." + S[0], 10), 
                        j = ye._round(j, 3), j *= 1e3), null === j || t(j, 0, 999)) return null;
                    } else if ("t" === u) {
                        if (l = C("t"), y = N.AM, v = N.PM, 1 === l && (y = i(y), v = i(v)), f = E(v), !f && !E(y)) return null;
                    } else if ("z" === u) {
                        if (m = !0, l = C("z"), "Z" === e.substr(F, 1)) {
                            M();
                            continue;
                        }
                        if (g = e.substr(F, 6).match(l > 2 ? h : p), !g) return null;
                        if (g = g[0].split(":"), x = g[0], w = g[1], !w && x.length > 3 && (F = x.length - 2, 
                        w = x.substring(F), x = x.substring(0, F)), x = parseInt(x, 10), t(x, -12, 13)) return null;
                        if (l > 2 && (w = parseInt(w, 10), isNaN(w) || t(w, 0, 59))) return null;
                    } else if ("'" === u) P = !0, M(); else if (!M()) return null;
                    return T = null !== O || null !== L || _ || null, null === D && null === A && null === H && T ? (D = q, 
                    A = R.getMonth(), H = R.getDate()) : (null === D && (D = q), null === H && (H = 1)), 
                    f && 12 > O && (O += 12), m ? (x && (O += -x), w && (L += -w), e = new Date(Date.UTC(D, A, H, O, L, _, j))) : (e = new Date(D, A, H, O, L, _, j), 
                    o(e, O)), 100 > D && e.setFullYear(D), e.getDate() !== H && m === n ? null : e;
                }
                function l(e) {
                    var t = "-" === e.substr(0, 1) ? -1 : 1;
                    return e = e.substring(1), e = 60 * parseInt(e.substr(0, 2), 10) + parseInt(e.substring(2), 10), 
                    t * e;
                }
                function c(e) {
                    var t, n, r, i = Se.max(y.length, v.length), o = e.calendar.patterns, a = [];
                    for (r = 0; i > r; r++) {
                        for (t = y[r], n = 0; t.length > n; n++) a.push(o[t[n]]);
                        a = a.concat(v[r]);
                    }
                    return a;
                }
                var d = /\u00A0/g, f = /[eE][\-+]?[0-9]+/, p = /[+|\-]\d{1,2}/, h = /[+|\-]\d{1,2}:?\d{2}/, m = /^\/Date\((.*?)\)\/$/, g = /[+-]\d*/, y = [ [], [ "G", "g", "F" ], [ "D", "d", "y", "m", "T", "t" ] ], v = [ [ "yyyy-MM-ddTHH:mm:ss.fffffffzzz", "yyyy-MM-ddTHH:mm:ss.fffffff", "yyyy-MM-ddTHH:mm:ss.fffzzz", "yyyy-MM-ddTHH:mm:ss.fff", "ddd MMM dd yyyy HH:mm:ss", "yyyy-MM-ddTHH:mm:sszzz", "yyyy-MM-ddTHH:mmzzz", "yyyy-MM-ddTHH:mmzz", "yyyy-MM-ddTHH:mm:ss", "yyyy-MM-dd HH:mm:ss", "yyyy/MM/dd HH:mm:ss" ], [ "yyyy-MM-ddTHH:mm", "yyyy-MM-dd HH:mm", "yyyy/MM/dd HH:mm" ], [ "yyyy/MM/dd", "yyyy-MM-dd", "HH:mm:ss", "HH:mm" ] ], b = {
                    2: /^\d{1,2}/,
                    3: /^\d{1,3}/,
                    4: /^\d{4}/
                }, x = {}.toString;
                ye.parseDate = function(e, t, n) {
                    var r, i, o, a;
                    if ("[object Date]" === x.call(e)) return e;
                    if (r = 0, i = null, e && 0 === e.indexOf("/D") && (i = m.exec(e))) return i = i[1], 
                    a = g.exec(i.substring(1)), i = new Date(parseInt(i, 10)), a && (a = l(a[0]), i = ye.timezone.apply(i, 0), 
                    i = ye.timezone.convert(i, 0, -1 * a)), i;
                    for (n = ye.getCulture(n), t || (t = c(n)), t = xe(t) ? t : [ t ], o = t.length; o > r; r++) if (i = u(e, t[r], n)) return i;
                    return i;
                }, ye.parseInt = function(e, t) {
                    var n = ye.parseFloat(e, t);
                    return n && (n = 0 | n), n;
                }, ye.parseFloat = function(e, t, n) {
                    if (!e && 0 !== e) return null;
                    if (typeof e === Oe) return e;
                    e = "" + e, t = ye.getCulture(t);
                    var r, i, o = t.numberFormat, a = o.percent, s = o.currency, u = s.symbol, l = a.symbol, c = e.indexOf("-");
                    return f.test(e) ? (e = parseFloat(e.replace(o["."], ".")), isNaN(e) && (e = null), 
                    e) : c > 0 ? null : (c = c > -1, e.indexOf(u) > -1 || n && n.toLowerCase().indexOf("c") > -1 ? (o = s, 
                    r = o.pattern[0].replace("$", u).split("n"), e.indexOf(r[0]) > -1 && e.indexOf(r[1]) > -1 && (e = e.replace(r[0], "").replace(r[1], ""), 
                    c = !0)) : e.indexOf(l) > -1 && (i = !0, o = a, u = l), e = e.replace("-", "").replace(u, "").replace(d, " ").split(o[","].replace(d, " ")).join("").replace(o["."], "."), 
                    e = parseFloat(e), isNaN(e) ? e = null : c && (e *= -1), e && i && (e /= 100), e);
                };
            }(), function() {
                var r, i, o, a, s, u, l;
                ke._scrollbar = n, ke.scrollbar = function(e) {
                    if (isNaN(ke._scrollbar) || e) {
                        var t, n = document.createElement("div");
                        return n.style.cssText = "overflow:scroll;overflow-x:hidden;zoom:1;clear:both;display:block", 
                        n.innerHTML = "&nbsp;", document.body.appendChild(n), ke._scrollbar = t = n.offsetWidth - n.scrollWidth, 
                        document.body.removeChild(n), t;
                    }
                    return ke._scrollbar;
                }, ke.isRtl = function(t) {
                    return e(t).closest(".k-rtl").length > 0;
                }, r = document.createElement("table");
                try {
                    r.innerHTML = "<tr><td></td></tr>", ke.tbodyInnerHtml = !0;
                } catch (d) {
                    ke.tbodyInnerHtml = !1;
                }
                ke.touch = "ontouchstart" in t, ke.msPointers = t.MSPointerEvent, ke.pointers = t.PointerEvent, 
                i = ke.transitions = !1, o = ke.transforms = !1, a = "HTMLElement" in t ? HTMLElement.prototype : [], 
                ke.hasHW3D = "WebKitCSSMatrix" in t && "m11" in new t.WebKitCSSMatrix() || "MozPerspective" in document.documentElement.style || "msPerspective" in document.documentElement.style, 
                be([ "Moz", "webkit", "O", "ms" ], function() {
                    var e, t = "" + this, a = typeof r.style[t + "Transition"] === He;
                    return a || typeof r.style[t + "Transform"] === He ? (e = t.toLowerCase(), o = {
                        css: "ms" != e ? "-" + e + "-" : "",
                        prefix: t,
                        event: "o" === e || "webkit" === e ? e : ""
                    }, a && (i = o, i.event = i.event ? i.event + "TransitionEnd" : "transitionend"), 
                    !1) : n;
                }), r = null, ke.transforms = o, ke.transitions = i, ke.devicePixelRatio = t.devicePixelRatio === n ? 1 : t.devicePixelRatio;
                try {
                    ke.screenWidth = t.outerWidth || t.screen ? t.screen.availWidth : t.innerWidth, 
                    ke.screenHeight = t.outerHeight || t.screen ? t.screen.availHeight : t.innerHeight;
                } catch (d) {
                    ke.screenWidth = t.screen.availWidth, ke.screenHeight = t.screen.availHeight;
                }
                ke.detectOS = function(e) {
                    var n, r, i = !1, o = [], a = !/mobile safari/i.test(e), s = {
                        wp: /(Windows Phone(?: OS)?)\s(\d+)\.(\d+(\.\d+)?)/,
                        fire: /(Silk)\/(\d+)\.(\d+(\.\d+)?)/,
                        android: /(Android|Android.*(?:Opera|Firefox).*?\/)\s*(\d+)\.(\d+(\.\d+)?)/,
                        iphone: /(iPhone|iPod).*OS\s+(\d+)[\._]([\d\._]+)/,
                        ipad: /(iPad).*OS\s+(\d+)[\._]([\d_]+)/,
                        meego: /(MeeGo).+NokiaBrowser\/(\d+)\.([\d\._]+)/,
                        webos: /(webOS)\/(\d+)\.(\d+(\.\d+)?)/,
                        blackberry: /(BlackBerry|BB10).*?Version\/(\d+)\.(\d+(\.\d+)?)/,
                        playbook: /(PlayBook).*?Tablet\s*OS\s*(\d+)\.(\d+(\.\d+)?)/,
                        windows: /(MSIE)\s+(\d+)\.(\d+(\.\d+)?)/,
                        tizen: /(tizen).*?Version\/(\d+)\.(\d+(\.\d+)?)/i,
                        sailfish: /(sailfish).*rv:(\d+)\.(\d+(\.\d+)?).*firefox/i,
                        ffos: /(Mobile).*rv:(\d+)\.(\d+(\.\d+)?).*Firefox/
                    }, u = {
                        ios: /^i(phone|pad|pod)$/i,
                        android: /^android|fire$/i,
                        blackberry: /^blackberry|playbook/i,
                        windows: /windows/,
                        wp: /wp/,
                        flat: /sailfish|ffos|tizen/i,
                        meego: /meego/
                    }, l = {
                        tablet: /playbook|ipad|fire/i
                    }, d = {
                        omini: /Opera\sMini/i,
                        omobile: /Opera\sMobi/i,
                        firefox: /Firefox|Fennec/i,
                        mobilesafari: /version\/.*safari/i,
                        ie: /MSIE|Windows\sPhone/i,
                        chrome: /chrome|crios/i,
                        webkit: /webkit/i
                    };
                    for (r in s) if (s.hasOwnProperty(r) && (o = e.match(s[r]))) {
                        if ("windows" == r && "plugins" in navigator) return !1;
                        i = {}, i.device = r, i.tablet = c(r, l, !1), i.browser = c(e, d, "default"), i.name = c(r, u), 
                        i[i.name] = !0, i.majorVersion = o[2], i.minorVersion = o[3].replace("_", "."), 
                        n = i.minorVersion.replace(".", "").substr(0, 2), i.flatVersion = i.majorVersion + n + Array(3 - (3 > n.length ? n.length : 2)).join("0"), 
                        i.cordova = typeof t.PhoneGap !== ze || typeof t.cordova !== ze, i.appMode = t.navigator.standalone || /file|local|wmapp/.test(t.location.protocol) || i.cordova, 
                        i.android && (1.5 > ke.devicePixelRatio && 400 > i.flatVersion || a) && (ke.screenWidth > 800 || ke.screenHeight > 800) && (i.tablet = r);
                        break;
                    }
                    return i;
                }, s = ke.mobileOS = ke.detectOS(navigator.userAgent), ke.wpDevicePixelRatio = s.wp ? screen.width / 320 : 0, 
                ke.kineticScrollNeeded = s && (ke.touch || ke.msPointers || ke.pointers), ke.hasNativeScrolling = !1, 
                (s.ios || s.android && s.majorVersion > 2 || s.wp) && (ke.hasNativeScrolling = s), 
                ke.delayedClick = function() {
                    if (ke.touch) {
                        if (s.ios) return !0;
                        if (s.android) return !ke.browser.chrome || !(32 > ke.browser.version) && !(e("meta[name=viewport]").attr("content") || "").match(/user-scalable=no/i);
                    }
                    return !1;
                }, ke.mouseAndTouchPresent = ke.touch && !(ke.mobileOS.ios || ke.mobileOS.android), 
                ke.detectBrowser = function(e) {
                    var t, n = !1, r = [], i = {
                        edge: /(edge)[ \/]([\w.]+)/i,
                        webkit: /(chrome)[ \/]([\w.]+)/i,
                        safari: /(webkit)[ \/]([\w.]+)/i,
                        opera: /(opera)(?:.*version|)[ \/]([\w.]+)/i,
                        msie: /(msie\s|trident.*? rv:)([\w.]+)/i,
                        mozilla: /(mozilla)(?:.*? rv:([\w.]+)|)/i
                    };
                    for (t in i) if (i.hasOwnProperty(t) && (r = e.match(i[t]))) {
                        n = {}, n[t] = !0, n[r[1].toLowerCase().split(" ")[0].split("/")[0]] = !0, n.version = parseInt(document.documentMode || r[2], 10);
                        break;
                    }
                    return n;
                }, ke.browser = ke.detectBrowser(navigator.userAgent), ke.detectClipboardAccess = function() {
                    var e = {
                        copy: !!document.queryCommandSupported && document.queryCommandSupported("copy"),
                        cut: !!document.queryCommandSupported && document.queryCommandSupported("cut"),
                        paste: !!document.queryCommandSupported && document.queryCommandSupported("paste")
                    };
                    return ke.browser.chrome && (e.paste = !1, ke.browser.version >= 43 && (e.copy = !0, 
                    e.cut = !0)), e;
                }, ke.clipboard = ke.detectClipboardAccess(), ke.zoomLevel = function() {
                    var e, n, r;
                    try {
                        return e = ke.browser, n = 0, r = document.documentElement, e.msie && 11 == e.version && r.scrollHeight > r.clientHeight && !ke.touch && (n = ke.scrollbar()), 
                        ke.touch ? r.clientWidth / t.innerWidth : e.msie && e.version >= 10 ? ((top || t).document.documentElement.offsetWidth + n) / (top || t).innerWidth : 1;
                    } catch (i) {
                        return 1;
                    }
                }, ke.cssBorderSpacing = n !== document.documentElement.style.borderSpacing && !(ke.browser.msie && 8 > ke.browser.version), 
                function(t) {
                    var n = "", r = e(document.documentElement), i = parseInt(t.version, 10);
                    t.msie ? n = "ie" : t.mozilla ? n = "ff" : t.safari ? n = "safari" : t.webkit ? n = "webkit" : t.opera ? n = "opera" : t.edge && (n = "edge"), 
                    n && (n = "k-" + n + " k-" + n + i), ke.mobileOS && (n += " k-mobile"), r.addClass(n);
                }(ke.browser), ke.eventCapture = document.documentElement.addEventListener, u = document.createElement("input"), 
                ke.placeholder = "placeholder" in u, ke.propertyChangeEvent = "onpropertychange" in u, 
                ke.input = function() {
                    for (var e, t = [ "number", "date", "time", "month", "week", "datetime", "datetime-local" ], n = t.length, r = "test", i = {}, o = 0; n > o; o++) e = t[o], 
                    u.setAttribute("type", e), u.value = r, i[e.replace("-", "")] = "text" !== u.type && u.value !== r;
                    return i;
                }(), u.style.cssText = "float:left;", ke.cssFloat = !!u.style.cssFloat, u = null, 
                ke.stableSort = function() {
                    var e, t = 513, n = [ {
                        index: 0,
                        field: "b"
                    } ];
                    for (e = 1; t > e; e++) n.push({
                        index: e,
                        field: "a"
                    });
                    return n.sort(function(e, t) {
                        return e.field > t.field ? 1 : t.field > e.field ? -1 : 0;
                    }), 1 === n[0].index;
                }(), ke.matchesSelector = a.webkitMatchesSelector || a.mozMatchesSelector || a.msMatchesSelector || a.oMatchesSelector || a.matchesSelector || a.matches || function(t) {
                    for (var n = document.querySelectorAll ? (this.parentNode || document).querySelectorAll(t) || [] : e(t), r = n.length; r--; ) if (n[r] == this) return !0;
                    return !1;
                }, ke.pushState = t.history && t.history.pushState, l = document.documentMode, ke.hashChange = "onhashchange" in t && !(ke.browser.msie && (!l || 8 >= l)), 
                ke.customElements = "registerElement" in t.document;
            }(), I = {
                left: {
                    reverse: "right"
                },
                right: {
                    reverse: "left"
                },
                down: {
                    reverse: "up"
                },
                up: {
                    reverse: "down"
                },
                top: {
                    reverse: "bottom"
                },
                bottom: {
                    reverse: "top"
                },
                "in": {
                    reverse: "out"
                },
                out: {
                    reverse: "in"
                }
            }, B = {}, e.extend(B, {
                enabled: !0,
                Element: function(t) {
                    this.element = e(t);
                },
                promise: function(e, t) {
                    e.is(":visible") || e.css({
                        display: e.data("olddisplay") || "block"
                    }).css("display"), t.hide && e.data("olddisplay", e.css("display")).hide(), t.init && t.init(), 
                    t.completeCallback && t.completeCallback(e), e.dequeue();
                },
                disable: function() {
                    this.enabled = !1, this.promise = this.promiseShim;
                },
                enable: function() {
                    this.enabled = !0, this.promise = this.animatedPromise;
                }
            }), B.promiseShim = B.promise, "kendoAnimate" in e.fn || ve(e.fn, {
                kendoStop: function(e, t) {
                    return this.stop(e, t);
                },
                kendoAnimate: function(e, t, n, r) {
                    return w(this, e, t, n, r);
                },
                kendoAddClass: function(e, t) {
                    return ye.toggleClass(this, e, t, !0);
                },
                kendoRemoveClass: function(e, t) {
                    return ye.toggleClass(this, e, t, !1);
                },
                kendoToggleClass: function(e, t, n) {
                    return ye.toggleClass(this, e, t, n);
                }
            }), U = /&/g, X = /</g, J = /"/g, V = /'/g, Y = />/g, G = function(e) {
                return e.target;
            }, ke.touch && (G = function(e) {
                var t = "originalEvent" in e ? e.originalEvent.changedTouches : "changedTouches" in e ? e.changedTouches : null;
                return t ? document.elementFromPoint(t[0].clientX, t[0].clientY) : e.target;
            }, be([ "swipe", "swipeLeft", "swipeRight", "swipeUp", "swipeDown", "doubleTap", "tap" ], function(t, n) {
                e.fn[n] = function(e) {
                    return this.bind(n, e);
                };
            })), ke.touch ? ke.mobileOS ? (ke.mousedown = "touchstart", ke.mouseup = "touchend", 
            ke.mousemove = "touchmove", ke.mousecancel = "touchcancel", ke.click = "touchend", 
            ke.resize = "orientationchange") : (ke.mousedown = "mousedown touchstart", ke.mouseup = "mouseup touchend", 
            ke.mousemove = "mousemove touchmove", ke.mousecancel = "mouseleave touchcancel", 
            ke.click = "click", ke.resize = "resize") : ke.pointers ? (ke.mousemove = "pointermove", 
            ke.mousedown = "pointerdown", ke.mouseup = "pointerup", ke.mousecancel = "pointercancel", 
            ke.click = "pointerup", ke.resize = "orientationchange resize") : ke.msPointers ? (ke.mousemove = "MSPointerMove", 
            ke.mousedown = "MSPointerDown", ke.mouseup = "MSPointerUp", ke.mousecancel = "MSPointerCancel", 
            ke.click = "MSPointerUp", ke.resize = "orientationchange resize") : (ke.mousemove = "mousemove", 
            ke.mousedown = "mousedown", ke.mouseup = "mouseup", ke.mousecancel = "mouseleave", 
            ke.click = "click", ke.resize = "resize"), Q = function(e, t) {
                var n, r, i, o, a = t || "d", s = 1;
                for (r = 0, i = e.length; i > r; r++) o = e[r], "" !== o && (n = o.indexOf("["), 
                0 !== n && (-1 == n ? o = "." + o : (s++, o = "." + o.substring(0, n) + " || {})" + o.substring(n))), 
                s++, a += o + (i - 1 > r ? " || {})" : ")"));
                return Array(s).join("(") + a;
            }, K = /^([a-z]+:)?\/\//i, ve(ye, {
                widgets: [],
                _widgetRegisteredCallbacks: [],
                ui: ye.ui || {},
                fx: ye.fx || b,
                effects: ye.effects || B,
                mobile: ye.mobile || {},
                data: ye.data || {},
                dataviz: ye.dataviz || {},
                drawing: ye.drawing || {},
                spreadsheet: {
                    messages: {}
                },
                keys: {
                    INSERT: 45,
                    DELETE: 46,
                    BACKSPACE: 8,
                    TAB: 9,
                    ENTER: 13,
                    ESC: 27,
                    LEFT: 37,
                    UP: 38,
                    RIGHT: 39,
                    DOWN: 40,
                    END: 35,
                    HOME: 36,
                    SPACEBAR: 32,
                    PAGEUP: 33,
                    PAGEDOWN: 34,
                    F2: 113,
                    F10: 121,
                    F12: 123,
                    NUMPAD_PLUS: 107,
                    NUMPAD_MINUS: 109,
                    NUMPAD_DOT: 110
                },
                support: ye.support || ke,
                animate: ye.animate || w,
                ns: "",
                attr: function(e) {
                    return "data-" + ye.ns + e;
                },
                getShadows: a,
                wrap: s,
                deepExtend: u,
                getComputedStyles: p,
                webComponents: ye.webComponents || [],
                isScrollable: h,
                scrollLeft: m,
                size: g,
                toCamelCase: f,
                toHyphens: d,
                getOffset: ye.getOffset || y,
                parseEffects: ye.parseEffects || v,
                toggleClass: ye.toggleClass || T,
                directions: ye.directions || I,
                Observable: j,
                Class: r,
                Template: H,
                template: we(H.compile, H),
                render: we(H.render, H),
                stringify: we(Ce.stringify, Ce),
                eventTarget: G,
                htmlEncode: S,
                isLocalUrl: function(e) {
                    return e && !K.test(e);
                },
                expr: function(e, t, n) {
                    return e = e || "", typeof t == He && (n = t, t = !1), n = n || "d", e && "[" !== e.charAt(0) && (e = "." + e), 
                    t ? (e = e.replace(/"([^.]*)\.([^"]*)"/g, '"$1_$DOT$_$2"'), e = e.replace(/'([^.]*)\.([^']*)'/g, "'$1_$DOT$_$2'"), 
                    e = Q(e.split("."), n), e = e.replace(/_\$DOT\$_/g, ".")) : e = n + e, e;
                },
                getter: function(e, t) {
                    var n = e + t;
                    return Fe[n] = Fe[n] || Function("d", "return " + ye.expr(e, t));
                },
                setter: function(e) {
                    return Pe[e] = Pe[e] || Function("d,value", ye.expr(e) + "=value");
                },
                accessor: function(e) {
                    return {
                        get: ye.getter(e),
                        set: ye.setter(e)
                    };
                },
                guid: function() {
                    var e, t, n = "";
                    for (e = 0; 32 > e; e++) t = 16 * Se.random() | 0, (8 == e || 12 == e || 16 == e || 20 == e) && (n += "-"), 
                    n += (12 == e ? 4 : 16 == e ? 3 & t | 8 : t).toString(16);
                    return n;
                },
                roleSelector: function(e) {
                    return e.replace(/(\S+)/g, "[" + ye.attr("role") + "=$1],").slice(0, -1);
                },
                directiveSelector: function(e) {
                    var t, n = e.split(" ");
                    if (n) for (t = 0; n.length > t; t++) "view" != n[t] && (n[t] = n[t].replace(/(\w*)(view|bar|strip|over)$/, "$1-$2"));
                    return n.join(" ").replace(/(\S+)/g, "kendo-mobile-$1,").slice(0, -1);
                },
                triggeredByInput: function(e) {
                    return /^(label|input|textarea|select)$/i.test(e.target.tagName);
                },
                onWidgetRegistered: function(e) {
                    for (var t = 0, n = ye.widgets.length; n > t; t++) e(ye.widgets[t]);
                    ye._widgetRegisteredCallbacks.push(e);
                },
                logToConsole: function(e, r) {
                    var i = t.console;
                    !ye.suppressLog && n !== i && i.log && i[r || "log"](e);
                }
            }), Z = j.extend({
                init: function(e, t) {
                    var n, r = this;
                    r.element = ye.jQuery(e).handler(r), r.angular("init", t), j.fn.init.call(r), n = t ? t.dataSource : null, 
                    n && (t = ve({}, t, {
                        dataSource: {}
                    })), t = r.options = ve(!0, {}, r.options, t), n && (t.dataSource = n), r.element.attr(ye.attr("role")) || r.element.attr(ye.attr("role"), (t.name || "").toLowerCase()), 
                    r.element.data("kendo" + t.prefix + t.name, r), r.bind(r.events, t);
                },
                events: [],
                options: {
                    prefix: ""
                },
                _hasBindingTarget: function() {
                    return !!this.element[0].kendoBindingTarget;
                },
                _tabindex: function(e) {
                    e = e || this.wrapper;
                    var t = this.element, n = "tabindex", r = e.attr(n) || t.attr(n);
                    t.removeAttr(n), e.attr(n, isNaN(r) ? 0 : r);
                },
                setOptions: function(t) {
                    this._setEvents(t), e.extend(this.options, t);
                },
                _setEvents: function(e) {
                    for (var t, n = this, r = 0, i = n.events.length; i > r; r++) t = n.events[r], n.options[t] && e[t] && n.unbind(t, n.options[t]);
                    n.bind(n.events, e);
                },
                resize: function(e) {
                    var t = this.getSize(), n = this._size;
                    (e || (t.width > 0 || t.height > 0) && (!n || t.width !== n.width || t.height !== n.height)) && (this._size = t, 
                    this._resize(t, e), this.trigger("resize", t));
                },
                getSize: function() {
                    return ye.dimensions(this.element);
                },
                size: function(e) {
                    return e ? (this.setSize(e), n) : this.getSize();
                },
                setSize: e.noop,
                _resize: e.noop,
                destroy: function() {
                    var e = this;
                    e.element.removeData("kendo" + e.options.prefix + e.options.name), e.element.removeData("handler"), 
                    e.unbind();
                },
                _destroy: function() {
                    this.destroy();
                },
                angular: function() {},
                _muteAngularRebind: function(e) {
                    this._muteRebind = !0, e.call(this), this._muteRebind = !1;
                }
            }), ee = Z.extend({
                dataItems: function() {
                    return this.dataSource.flatView();
                },
                _angularItems: function(t) {
                    var n = this;
                    n.angular(t, function() {
                        return {
                            elements: n.items(),
                            data: e.map(n.dataItems(), function(e) {
                                return {
                                    dataItem: e
                                };
                            })
                        };
                    });
                }
            }), ye.dimensions = function(e, t) {
                var n = e[0];
                return t && e.css(t), {
                    width: n.offsetWidth,
                    height: n.offsetHeight
                };
            }, ye.notify = Te, te = /template$/i, ne = /^\s*(?:\{(?:.|\r\n|\n)*\}|\[(?:.|\r\n|\n)*\])\s*$/, 
            re = /^\{(\d+)(:[^\}]+)?\}|^\[[A-Za-z_]*\]$/, ie = /([A-Z])/g, ye.initWidget = function(r, i, o) {
                var a, s, u, l, c, d, f, p, h, m, g, y, v;
                if (o ? o.roles && (o = o.roles) : o = ye.ui.roles, r = r.nodeType ? r : r[0], d = r.getAttribute("data-" + ye.ns + "role")) {
                    h = -1 === d.indexOf("."), u = h ? o[d] : ye.getter(d)(t), g = e(r).data(), y = u ? "kendo" + u.fn.options.prefix + u.fn.options.name : "", 
                    m = h ? RegExp("^kendo.*" + d + "$", "i") : RegExp("^" + y + "$", "i");
                    for (v in g) if (v.match(m)) {
                        if (v !== y) return g[v];
                        a = g[v];
                    }
                    if (u) {
                        for (p = C(r, "dataSource"), i = e.extend({}, k(r, u.fn.options), i), p && (i.dataSource = typeof p === He ? ye.getter(p)(t) : p), 
                        l = 0, c = u.fn.events.length; c > l; l++) s = u.fn.events[l], f = C(r, s), f !== n && (i[s] = ye.getter(f)(t));
                        return a ? e.isEmptyObject(i) || a.setOptions(i) : a = new u(r, i), a;
                    }
                }
            }, ye.rolesFromNamespaces = function(e) {
                var t, n, r = [];
                for (e[0] || (e = [ ye.ui, ye.dataviz.ui ]), t = 0, n = e.length; n > t; t++) r[t] = e[t].roles;
                return ve.apply(null, [ {} ].concat(r.reverse()));
            }, ye.init = function(t) {
                var n = ye.rolesFromNamespaces(Re.call(arguments, 1));
                e(t).find("[data-" + ye.ns + "role]").addBack().each(function() {
                    ye.initWidget(this, {}, n);
                });
            }, ye.destroy = function(t) {
                e(t).find("[data-" + ye.ns + "role]").addBack().each(function() {
                    var t, n = e(this).data();
                    for (t in n) 0 === t.indexOf("kendo") && typeof n[t].destroy === Ae && n[t].destroy();
                });
            }, ye.resize = function(t, n) {
                var r, i = e(t).find("[data-" + ye.ns + "role]").addBack().filter(M);
                i.length && (r = e.makeArray(i), r.sort(E), e.each(r, function() {
                    var t = ye.widgetInstance(e(this));
                    t && t.resize(n);
                }));
            }, ye.parseOptions = k, ve(ye.ui, {
                Widget: Z,
                DataBoundWidget: ee,
                roles: {},
                progress: function(t, n) {
                    var r, i, o, a, s = t.find(".k-loading-mask"), u = ye.support, l = u.browser;
                    n ? s.length || (r = u.isRtl(t), i = r ? "right" : "left", a = t.scrollLeft(), o = l.webkit && r ? t[0].scrollWidth - t.width() - 2 * a : 0, 
                    s = e("<div class='k-loading-mask'><span class='k-loading-text'>" + ye.ui.progress.messages.loading + "</span><div class='k-loading-image'/><div class='k-loading-color'/></div>").width("100%").height("100%").css("top", t.scrollTop()).css(i, Math.abs(a) + o).prependTo(t)) : s && s.remove();
                },
                plugin: function(t, r, i) {
                    var o, a, s, u, l = t.fn.options.name;
                    for (r = r || ye.ui, i = i || "", r[l] = t, r.roles[l.toLowerCase()] = t, o = "getKendo" + i + l, 
                    l = "kendo" + i + l, a = {
                        name: l,
                        widget: t,
                        prefix: i || ""
                    }, ye.widgets.push(a), s = 0, u = ye._widgetRegisteredCallbacks.length; u > s; s++) ye._widgetRegisteredCallbacks[s](a);
                    e.fn[l] = function(r) {
                        var i, o = this;
                        return typeof r === He ? (i = Re.call(arguments, 1), this.each(function() {
                            var t, a, s = e.data(this, l);
                            if (!s) throw Error(ye.format("Cannot call method '{0}' of {1} before it is initialized", r, l));
                            if (t = s[r], typeof t !== Ae) throw Error(ye.format("Cannot find method '{0}' of {1}", r, l));
                            return a = t.apply(s, i), a !== n ? (o = a, !1) : n;
                        })) : this.each(function() {
                            return new t(this, r);
                        }), o;
                    }, e.fn[l].widget = t, e.fn[o] = function() {
                        return this.data(l);
                    };
                }
            }), ye.ui.progress.messages = {
                loading: "Loading..."
            }, oe = {
                bind: function() {
                    return this;
                },
                nullObject: !0,
                options: {}
            }, ae = Z.extend({
                init: function(e, t) {
                    Z.fn.init.call(this, e, t), this.element.autoApplyNS(), this.wrapper = this.element, 
                    this.element.addClass("km-widget");
                },
                destroy: function() {
                    Z.fn.destroy.call(this), this.element.kendoDestroy();
                },
                options: {
                    prefix: "Mobile"
                },
                events: [],
                view: function() {
                    var e = this.element.closest(ye.roleSelector("view splitview modalview drawer"));
                    return ye.widgetInstance(e, ye.mobile.ui) || oe;
                },
                viewHasNativeScrolling: function() {
                    var e = this.view();
                    return e && e.options.useNativeScrolling;
                },
                container: function() {
                    var e = this.element.closest(ye.roleSelector("view layout modalview drawer splitview"));
                    return ye.widgetInstance(e.eq(0), ye.mobile.ui) || oe;
                }
            }), ve(ye.mobile, {
                init: function(e) {
                    ye.init(e, ye.mobile.ui, ye.ui, ye.dataviz.ui);
                },
                appLevelNativeScrolling: function() {
                    return ye.mobile.application && ye.mobile.application.options && ye.mobile.application.options.useNativeScrolling;
                },
                roles: {},
                ui: {
                    Widget: ae,
                    DataBoundWidget: ee.extend(ae.prototype),
                    roles: {},
                    plugin: function(e) {
                        ye.ui.plugin(e, ye.mobile.ui, "Mobile");
                    }
                }
            }), u(ye.dataviz, {
                init: function(e) {
                    ye.init(e, ye.dataviz.ui);
                },
                ui: {
                    roles: {},
                    themes: {},
                    views: [],
                    plugin: function(e) {
                        ye.ui.plugin(e, ye.dataviz.ui);
                    }
                },
                roles: {}
            }), ye.touchScroller = function(t, n) {
                return n || (n = {}), n.useNative = !0, e(t).map(function(t, r) {
                    return r = e(r), !(!ke.kineticScrollNeeded || !ye.mobile.ui.Scroller || r.data("kendoMobileScroller")) && (r.kendoMobileScroller(n), 
                    r.data("kendoMobileScroller"));
                })[0];
            }, ye.preventDefault = function(e) {
                e.preventDefault();
            }, ye.widgetInstance = function(e, n) {
                var r, i, o, a, s = e.data(ye.ns + "role"), u = [];
                if (s) {
                    if ("content" === s && (s = "scroller"), n) if (n[0]) for (r = 0, i = n.length; i > r; r++) u.push(n[r].roles[s]); else u.push(n.roles[s]); else u = [ ye.ui.roles[s], ye.dataviz.ui.roles[s], ye.mobile.ui.roles[s] ];
                    for (s.indexOf(".") >= 0 && (u = [ ye.getter(s)(t) ]), r = 0, i = u.length; i > r; r++) if (o = u[r], 
                    o && (a = e.data("kendo" + o.fn.options.prefix + o.fn.options.name))) return a;
                }
            }, ye.onResize = function(n) {
                var r = n;
                return ke.mobileOS.android && (r = function() {
                    setTimeout(n, 600);
                }), e(t).on(ke.resize, r), r;
            }, ye.unbindResize = function(n) {
                e(t).off(ke.resize, n);
            }, ye.attrValue = function(e, t) {
                return e.data(ye.ns + t);
            }, ye.days = {
                Sunday: 0,
                Monday: 1,
                Tuesday: 2,
                Wednesday: 3,
                Thursday: 4,
                Friday: 5,
                Saturday: 6
            }, e.extend(e.expr[":"], {
                kendoFocusable: function(t) {
                    var n = e.attr(t, "tabindex");
                    return N(t, !isNaN(n) && n > -1);
                }
            }), se = [ "mousedown", "mousemove", "mouseenter", "mouseleave", "mouseover", "mouseout", "mouseup", "click" ], 
            ue = "label, input, [data-rel=external]", le = {
                setupMouseMute: function() {
                    var t, n = 0, r = se.length, i = document.documentElement;
                    if (!le.mouseTrap && ke.eventCapture) for (le.mouseTrap = !0, le.bustClick = !1, 
                    le.captureMouse = !1, t = function(t) {
                        le.captureMouse && ("click" === t.type ? le.bustClick && !e(t.target).is(ue) && (t.preventDefault(), 
                        t.stopPropagation()) : t.stopPropagation());
                    }; r > n; n++) i.addEventListener(se[n], t, !0);
                },
                muteMouse: function(e) {
                    le.captureMouse = !0, e.data.bustClick && (le.bustClick = !0), clearTimeout(le.mouseTrapTimeoutID);
                },
                unMuteMouse: function() {
                    clearTimeout(le.mouseTrapTimeoutID), le.mouseTrapTimeoutID = setTimeout(function() {
                        le.captureMouse = !1, le.bustClick = !1;
                    }, 400);
                }
            }, ce = {
                down: "touchstart mousedown",
                move: "mousemove touchmove",
                up: "mouseup touchend touchcancel",
                cancel: "mouseleave touchcancel"
            }, ke.touch && (ke.mobileOS.ios || ke.mobileOS.android) ? ce = {
                down: "touchstart",
                move: "touchmove",
                up: "touchend touchcancel",
                cancel: "touchcancel"
            } : ke.pointers ? ce = {
                down: "pointerdown",
                move: "pointermove",
                up: "pointerup",
                cancel: "pointercancel pointerleave"
            } : ke.msPointers && (ce = {
                down: "MSPointerDown",
                move: "MSPointerMove",
                up: "MSPointerUp",
                cancel: "MSPointerCancel MSPointerLeave"
            }), !ke.msPointers || "onmspointerenter" in t || e.each({
                MSPointerEnter: "MSPointerOver",
                MSPointerLeave: "MSPointerOut"
            }, function(t, n) {
                e.event.special[t] = {
                    delegateType: n,
                    bindType: n,
                    handle: function(t) {
                        var r, i = this, o = t.relatedTarget, a = t.handleObj;
                        return (!o || o !== i && !e.contains(i, o)) && (t.type = a.origType, r = a.handler.apply(this, arguments), 
                        t.type = n), r;
                    }
                };
            }), de = function(e) {
                return ce[e] || e;
            }, fe = /([^ ]+)/g, ye.applyEventMap = function(e, t) {
                return e = e.replace(fe, de), t && (e = e.replace(fe, "$1." + t)), e;
            }, pe = e.fn.on, ve(!0, A, e), A.fn = A.prototype = new e(), A.fn.constructor = A, 
            A.fn.init = function(t, n) {
                return n && n instanceof e && !(n instanceof A) && (n = A(n)), e.fn.init.call(this, t, n, he);
            }, A.fn.init.prototype = A.fn, he = A(document), ve(A.fn, {
                handler: function(e) {
                    return this.data("handler", e), this;
                },
                autoApplyNS: function(e) {
                    return this.data("kendoNS", e || ye.guid()), this;
                },
                on: function() {
                    var e, t, n, r, i, o, a = this, s = a.data("kendoNS");
                    return 1 === arguments.length ? pe.call(a, arguments[0]) : (e = a, t = Re.call(arguments), 
                    typeof t[t.length - 1] === ze && t.pop(), n = t[t.length - 1], r = ye.applyEventMap(t[0], s), 
                    ke.mouseAndTouchPresent && r.search(/mouse|click/) > -1 && this[0] !== document.documentElement && (le.setupMouseMute(), 
                    i = 2 === t.length ? null : t[1], o = r.indexOf("click") > -1 && r.indexOf("touchend") > -1, 
                    pe.call(this, {
                        touchstart: le.muteMouse,
                        touchend: le.unMuteMouse
                    }, i, {
                        bustClick: o
                    })), typeof n === He && (e = a.data("handler"), n = e[n], t[t.length - 1] = function(t) {
                        n.call(e, t);
                    }), t[0] = r, pe.apply(a, t), a);
                },
                kendoDestroy: function(e) {
                    return e = e || this.data("kendoNS"), e && this.off("." + e), this;
                }
            }), ye.jQuery = A, ye.eventMap = ce, ye.timezone = function() {
                function e(e, t) {
                    var n, r, i, o = t[3], a = t[4], s = t[5], u = t[8];
                    return u || (t[8] = u = {}), u[e] ? u[e] : (isNaN(a) ? 0 === a.indexOf("last") ? (n = new Date(Date.UTC(e, c[o] + 1, 1, s[0] - 24, s[1], s[2], 0)), 
                    r = d[a.substr(4, 3)], i = n.getUTCDay(), n.setUTCDate(n.getUTCDate() + r - i - (r > i ? 7 : 0))) : a.indexOf(">=") >= 0 && (n = new Date(Date.UTC(e, c[o], a.substr(5), s[0], s[1], s[2], 0)), 
                    r = d[a.substr(0, 3)], i = n.getUTCDay(), n.setUTCDate(n.getUTCDate() + r - i + (i > r ? 7 : 0))) : n = new Date(Date.UTC(e, c[o], a, s[0], s[1], s[2], 0)), 
                    u[e] = n);
                }
                function t(t, n, r) {
                    var i, o, a, s;
                    return (n = n[r]) ? (a = new Date(t).getUTCFullYear(), n = jQuery.grep(n, function(e) {
                        var t = e[0], n = e[1];
                        return a >= t && (n >= a || t == a && "only" == n || "max" == n);
                    }), n.push(t), n.sort(function(t, n) {
                        return "number" != typeof t && (t = +e(a, t)), "number" != typeof n && (n = +e(a, n)), 
                        t - n;
                    }), s = n[jQuery.inArray(t, n) - 1] || n[n.length - 1], isNaN(s) ? s : null) : (i = r.split(":"), 
                    o = 0, i.length > 1 && (o = 60 * i[0] + +i[1]), [ -1e6, "max", "-", "Jan", 1, [ 0, 0, 0 ], o, "-" ]);
                }
                function n(e, t, n) {
                    var r, i, o, a = t[n];
                    if ("string" == typeof a && (a = t[a]), !a) throw Error('Timezone "' + n + '" is either incorrect, or kendo.timezones.min.js is not included.');
                    for (r = a.length - 1; r >= 0 && (i = a[r][3], !(i && e > i)); r--) ;
                    if (o = a[r + 1], !o) throw Error('Timezone "' + n + '" not found on ' + e + ".");
                    return o;
                }
                function r(e, r, i, o) {
                    typeof e != Oe && (e = Date.UTC(e.getFullYear(), e.getMonth(), e.getDate(), e.getHours(), e.getMinutes(), e.getSeconds(), e.getMilliseconds()));
                    var a = n(e, r, o);
                    return {
                        zone: a,
                        rule: t(e, i, a[1])
                    };
                }
                function i(e, t) {
                    var n, i, o;
                    return "Etc/UTC" == t || "Etc/GMT" == t ? 0 : (n = r(e, this.zones, this.rules, t), 
                    i = n.zone, o = n.rule, ye.parseFloat(o ? i[0] - o[6] : i[0]));
                }
                function o(e, t) {
                    var n = r(e, this.zones, this.rules, t), i = n.zone, o = n.rule, a = i[2];
                    return a.indexOf("/") >= 0 ? a.split("/")[o && +o[6] ? 1 : 0] : a.indexOf("%s") >= 0 ? a.replace("%s", o && "-" != o[7] ? o[7] : "") : a;
                }
                function a(e, t, n) {
                    var r, i;
                    return typeof t == He && (t = this.offset(e, t)), typeof n == He && (n = this.offset(e, n)), 
                    r = e.getTimezoneOffset(), e = new Date(e.getTime() + 6e4 * (t - n)), i = e.getTimezoneOffset(), 
                    new Date(e.getTime() + 6e4 * (i - r));
                }
                function s(e, t) {
                    return this.convert(e, e.getTimezoneOffset(), t);
                }
                function u(e, t) {
                    return this.convert(e, t, e.getTimezoneOffset());
                }
                function l(e) {
                    return this.apply(new Date(e), "Etc/UTC");
                }
                var c = {
                    Jan: 0,
                    Feb: 1,
                    Mar: 2,
                    Apr: 3,
                    May: 4,
                    Jun: 5,
                    Jul: 6,
                    Aug: 7,
                    Sep: 8,
                    Oct: 9,
                    Nov: 10,
                    Dec: 11
                }, d = {
                    Sun: 0,
                    Mon: 1,
                    Tue: 2,
                    Wed: 3,
                    Thu: 4,
                    Fri: 5,
                    Sat: 6
                };
                return {
                    zones: {},
                    rules: {},
                    offset: i,
                    convert: a,
                    apply: s,
                    remove: u,
                    abbr: o,
                    toLocalDate: l
                };
            }(), ye.date = function() {
                function e(e, t) {
                    return 0 === t && 23 === e.getHours() && (e.setHours(e.getHours() + 2), !0);
                }
                function t(t, n, r) {
                    var i = t.getHours();
                    r = r || 1, n = (n - t.getDay() + 7 * r) % 7, t.setDate(t.getDate() + n), e(t, i);
                }
                function n(e, n, r) {
                    return e = new Date(e), t(e, n, r), e;
                }
                function r(e) {
                    return new Date(e.getFullYear(), e.getMonth(), 1);
                }
                function i(e) {
                    var t = new Date(e.getFullYear(), e.getMonth() + 1, 0), n = r(e), i = Math.abs(t.getTimezoneOffset() - n.getTimezoneOffset());
                    return i && t.setHours(n.getHours() + i / 60), t;
                }
                function o(t) {
                    return t = new Date(t.getFullYear(), t.getMonth(), t.getDate(), 0, 0, 0), e(t, 0), 
                    t;
                }
                function a(e) {
                    return Date.UTC(e.getFullYear(), e.getMonth(), e.getDate(), e.getHours(), e.getMinutes(), e.getSeconds(), e.getMilliseconds());
                }
                function s(e) {
                    return e.getTime() - o(e);
                }
                function u(e, t, n) {
                    var r, i = s(t), o = s(n);
                    return !e || i == o || (t >= n && (n += y), r = s(e), i > r && (r += y), i > o && (o += y), 
                    r >= i && o >= r);
                }
                function l(e, t, n) {
                    var r, i = t.getTime(), o = n.getTime();
                    return i >= o && (o += y), r = e.getTime(), r >= i && o >= r;
                }
                function c(t, n) {
                    var r = t.getHours();
                    return t = new Date(t), d(t, n * y), e(t, r), t;
                }
                function d(e, t, n) {
                    var r, i = e.getTimezoneOffset();
                    e.setTime(e.getTime() + t), n || (r = e.getTimezoneOffset() - i, e.setTime(e.getTime() + r * g));
                }
                function f(t, n) {
                    return t = new Date(ye.date.getDate(t).getTime() + ye.date.getMilliseconds(n)), 
                    e(t, n.getHours()), t;
                }
                function p() {
                    return o(new Date());
                }
                function h(e) {
                    return o(e).getTime() == p().getTime();
                }
                function m(e) {
                    var t = new Date(1980, 1, 1, 0, 0, 0);
                    return e && t.setHours(e.getHours(), e.getMinutes(), e.getSeconds(), e.getMilliseconds()), 
                    t;
                }
                var g = 6e4, y = 864e5;
                return {
                    adjustDST: e,
                    dayOfWeek: n,
                    setDayOfWeek: t,
                    getDate: o,
                    isInDateRange: l,
                    isInTimeRange: u,
                    isToday: h,
                    nextDay: function(e) {
                        return c(e, 1);
                    },
                    previousDay: function(e) {
                        return c(e, -1);
                    },
                    toUtcTime: a,
                    MS_PER_DAY: y,
                    MS_PER_HOUR: 60 * g,
                    MS_PER_MINUTE: g,
                    setTime: d,
                    setHours: f,
                    addDays: c,
                    today: p,
                    toInvariantTime: m,
                    firstDayOfMonth: r,
                    lastDayOfMonth: i,
                    getMilliseconds: s
                };
            }(), ye.stripWhitespace = function(e) {
                var t, n, r;
                if (document.createNodeIterator) for (t = document.createNodeIterator(e, NodeFilter.SHOW_TEXT, function(t) {
                    return t.parentNode == e ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_REJECT;
                }, !1); t.nextNode(); ) t.referenceNode && !t.referenceNode.textContent.trim() && t.referenceNode.parentNode.removeChild(t.referenceNode); else for (n = 0; e.childNodes.length > n; n++) r = e.childNodes[n], 
                3 != r.nodeType || /\S/.test(r.nodeValue) || (e.removeChild(r), n--), 1 == r.nodeType && ye.stripWhitespace(r);
            }, me = t.requestAnimationFrame || t.webkitRequestAnimationFrame || t.mozRequestAnimationFrame || t.oRequestAnimationFrame || t.msRequestAnimationFrame || function(e) {
                setTimeout(e, 1e3 / 60);
            }, ye.animationFrame = function(e) {
                me.call(t, e);
            }, ge = [], ye.queueAnimation = function(e) {
                ge[ge.length] = e, 1 === ge.length && ye.runNextAnimation();
            }, ye.runNextAnimation = function() {
                ye.animationFrame(function() {
                    ge[0] && (ge.shift()(), ge[0] && ye.runNextAnimation());
                });
            }, ye.parseQueryStringParams = function(e) {
                for (var t = e.split("?")[1] || "", n = {}, r = t.split(/&|=/), i = r.length, o = 0; i > o; o += 2) "" !== r[o] && (n[decodeURIComponent(r[o])] = decodeURIComponent(r[o + 1]));
                return n;
            }, ye.elementUnderCursor = function(e) {
                return n !== e.x.client ? document.elementFromPoint(e.x.client, e.y.client) : n;
            }, ye.wheelDeltaY = function(e) {
                var t, r = e.originalEvent, i = r.wheelDeltaY;
                return r.wheelDelta ? (i === n || i) && (t = r.wheelDelta) : r.detail && r.axis === r.VERTICAL_AXIS && (t = 10 * -r.detail), 
                t;
            }, ye.throttle = function(e, t) {
                var r, i, o = 0;
                return !t || 0 >= t ? e : (i = function() {
                    function i() {
                        e.apply(a, u), o = +new Date();
                    }
                    var a = this, s = +new Date() - o, u = arguments;
                    return o ? (r && clearTimeout(r), s > t ? i() : r = setTimeout(i, t - s), n) : i();
                }, i.cancel = function() {
                    clearTimeout(r);
                }, i);
            }, ye.caret = function(t, r, i) {
                var o, a, s, u, l = r !== n;
                if (i === n && (i = r), t[0] && (t = t[0]), !l || !t.disabled) {
                    try {
                        t.selectionStart !== n ? l ? (t.focus(), t.setSelectionRange(r, i)) : r = [ t.selectionStart, t.selectionEnd ] : document.selection && (e(t).is(":visible") && t.focus(), 
                        o = t.createTextRange(), l ? (o.collapse(!0), o.moveStart("character", r), o.moveEnd("character", i - r), 
                        o.select()) : (a = o.duplicate(), o.moveToBookmark(document.selection.createRange().getBookmark()), 
                        a.setEndPoint("EndToStart", o), s = a.text.length, u = s + o.text.length, r = [ s, u ]));
                    } catch (c) {
                        r = [];
                    }
                    return r;
                }
            }, ye.compileMobileDirective = function(e, n) {
                var r = t.angular;
                return e.attr("data-" + ye.ns + "role", e[0].tagName.toLowerCase().replace("kendo-mobile-", "").replace("-", "")), 
                r.element(e).injector().invoke([ "$compile", function(t) {
                    t(e)(n), /^\$(digest|apply)$/.test(n.$$phase) || n.$digest();
                } ]), ye.widgetInstance(e, ye.mobile.ui);
            }, ye.antiForgeryTokens = function() {
                var t = {}, r = e("meta[name=csrf-token],meta[name=_csrf]").attr("content"), i = e("meta[name=csrf-param],meta[name=_csrf_header]").attr("content");
                return e("input[name^='__RequestVerificationToken']").each(function() {
                    t[this.name] = this.value;
                }), i !== n && r !== n && (t[i] = r), t;
            }, ye.cycleForm = function(e) {
                function t(e) {
                    var t = ye.widgetInstance(e);
                    t && t.focus ? t.focus() : e.focus();
                }
                var n = e.find("input, .k-widget").first(), r = e.find("button, .k-button").last();
                r.on("keydown", function(e) {
                    e.keyCode != ye.keys.TAB || e.shiftKey || (e.preventDefault(), t(n));
                }), n.on("keydown", function(e) {
                    e.keyCode == ye.keys.TAB && e.shiftKey && (e.preventDefault(), t(r));
                });
            }, function() {
                function n(t, n, r, i) {
                    var o, a, s = e("<form>").attr({
                        action: r,
                        method: "POST",
                        target: i
                    }), u = ye.antiForgeryTokens();
                    u.fileName = n, o = t.split(";base64,"), u.contentType = o[0].replace("data:", ""), 
                    u.base64 = o[1];
                    for (a in u) u.hasOwnProperty(a) && e("<input>").attr({
                        value: u[a],
                        name: a,
                        type: "hidden"
                    }).appendTo(s);
                    s.appendTo("body").submit().remove();
                }
                function r(e, t) {
                    var n, r, i, o, a, s = e;
                    if ("string" == typeof e) {
                        for (n = e.split(";base64,"), r = n[0], i = atob(n[1]), o = new Uint8Array(i.length), 
                        a = 0; i.length > a; a++) o[a] = i.charCodeAt(a);
                        s = new Blob([ o.buffer ], {
                            type: r
                        });
                    }
                    navigator.msSaveBlob(s, t);
                }
                function i(e, n) {
                    t.Blob && e instanceof Blob && (e = URL.createObjectURL(e)), o.download = n, o.href = e;
                    var r = document.createEvent("MouseEvents");
                    r.initMouseEvent("click", !0, !1, t, 0, 0, 0, 0, 0, !1, !1, !1, !1, 0, null), o.dispatchEvent(r), 
                    setTimeout(function() {
                        URL.revokeObjectURL(e);
                    });
                }
                var o = document.createElement("a"), a = "download" in o && !ye.support.browser.edge;
                ye.saveAs = function(e) {
                    var t = n;
                    e.forceProxy || (a ? t = i : navigator.msSaveBlob && (t = r)), t(e.dataURI, e.fileName, e.proxyURL, e.proxyTarget);
                };
            }(), ye.proxyModelSetters = function(e) {
                var t = {};
                return Object.keys(e || {}).forEach(function(n) {
                    Object.defineProperty(t, n, {
                        get: function() {
                            return e[n];
                        },
                        set: function(t) {
                            e[n] = t, e.dirty = !0;
                        }
                    });
                }), t;
            };
        }(jQuery, window), window.kendo;
    }, t(2));
}, function(e, exports) {
    e.exports = function() {
        throw new Error("define cannot be used indirect");
    };
}, function(e, exports, t) {
    var n, r;
    /*! jQuery v1.12.3 | (c) jQuery Foundation | jquery.org/license */
    !function(t, n) {
        "object" == typeof e && "object" == typeof e.exports ? e.exports = t.document ? n(t, !0) : function(e) {
            if (!e.document) throw new Error("jQuery requires a window with a document");
            return n(e);
        } : n(t);
    }("undefined" != typeof window ? window : this, function(i, o) {
        function a(e) {
            var t = !!e && "length" in e && e.length, n = ve.type(e);
            return "function" !== n && !ve.isWindow(e) && ("array" === n || 0 === t || "number" == typeof t && t > 0 && t - 1 in e);
        }
        function s(e, t, n) {
            if (ve.isFunction(t)) return ve.grep(e, function(e, r) {
                return !!t.call(e, r, e) !== n;
            });
            if (t.nodeType) return ve.grep(e, function(e) {
                return e === t !== n;
            });
            if ("string" == typeof t) {
                if (Ne.test(t)) return ve.filter(t, e, n);
                t = ve.filter(t, e);
            }
            return ve.grep(e, function(e) {
                return ve.inArray(e, t) > -1 !== n;
            });
        }
        function u(e, t) {
            do e = e[t]; while (e && 1 !== e.nodeType);
            return e;
        }
        function l(e) {
            var t = {};
            return ve.each(e.match(_e) || [], function(e, n) {
                t[n] = !0;
            }), t;
        }
        function c() {
            ue.addEventListener ? (ue.removeEventListener("DOMContentLoaded", d), i.removeEventListener("load", d)) : (ue.detachEvent("onreadystatechange", d), 
            i.detachEvent("onload", d));
        }
        function d() {
            (ue.addEventListener || "load" === i.event.type || "complete" === ue.readyState) && (c(), 
            ve.ready());
        }
        function f(e, t, n) {
            if (void 0 === n && 1 === e.nodeType) {
                var r = "data-" + t.replace(Re, "-$1").toLowerCase();
                if (n = e.getAttribute(r), "string" == typeof n) {
                    try {
                        n = "true" === n || "false" !== n && ("null" === n ? null : +n + "" === n ? +n : Pe.test(n) ? ve.parseJSON(n) : n);
                    } catch (i) {}
                    ve.data(e, t, n);
                } else n = void 0;
            }
            return n;
        }
        function p(e) {
            var t;
            for (t in e) if (("data" !== t || !ve.isEmptyObject(e[t])) && "toJSON" !== t) return !1;
            return !0;
        }
        function h(e, t, n, r) {
            if (Fe(e)) {
                var i, o, a = ve.expando, s = e.nodeType, u = s ? ve.cache : e, l = s ? e[a] : e[a] && a;
                if (l && u[l] && (r || u[l].data) || void 0 !== n || "string" != typeof t) return l || (l = s ? e[a] = se.pop() || ve.guid++ : a), 
                u[l] || (u[l] = s ? {} : {
                    toJSON: ve.noop
                }), "object" != typeof t && "function" != typeof t || (r ? u[l] = ve.extend(u[l], t) : u[l].data = ve.extend(u[l].data, t)), 
                o = u[l], r || (o.data || (o.data = {}), o = o.data), void 0 !== n && (o[ve.camelCase(t)] = n), 
                "string" == typeof t ? (i = o[t], null == i && (i = o[ve.camelCase(t)])) : i = o, 
                i;
            }
        }
        function m(e, t, n) {
            if (Fe(e)) {
                var r, i, o = e.nodeType, a = o ? ve.cache : e, s = o ? e[ve.expando] : ve.expando;
                if (a[s]) {
                    if (t && (r = n ? a[s] : a[s].data)) {
                        ve.isArray(t) ? t = t.concat(ve.map(t, ve.camelCase)) : t in r ? t = [ t ] : (t = ve.camelCase(t), 
                        t = t in r ? [ t ] : t.split(" ")), i = t.length;
                        for (;i--; ) delete r[t[i]];
                        if (n ? !p(r) : !ve.isEmptyObject(r)) return;
                    }
                    (n || (delete a[s].data, p(a[s]))) && (o ? ve.cleanData([ e ], !0) : ge.deleteExpando || a != a.window ? delete a[s] : a[s] = void 0);
                }
            }
        }
        function g(e, t, n, r) {
            var i, o = 1, a = 20, s = r ? function() {
                return r.cur();
            } : function() {
                return ve.css(e, t, "");
            }, u = s(), l = n && n[3] || (ve.cssNumber[t] ? "" : "px"), c = (ve.cssNumber[t] || "px" !== l && +u) && We.exec(ve.css(e, t));
            if (c && c[3] !== l) {
                l = l || c[3], n = n || [], c = +u || 1;
                do o = o || ".5", c /= o, ve.style(e, t, c + l); while (o !== (o = s() / u) && 1 !== o && --a);
            }
            return n && (c = +c || +u || 0, i = n[1] ? c + (n[1] + 1) * n[2] : +n[2], r && (r.unit = l, 
            r.start = c, r.end = i)), i;
        }
        function y(e) {
            var t = Ve.split("|"), n = e.createDocumentFragment();
            if (n.createElement) for (;t.length; ) n.createElement(t.pop());
            return n;
        }
        function v(e, t) {
            var n, r, i = 0, o = "undefined" != typeof e.getElementsByTagName ? e.getElementsByTagName(t || "*") : "undefined" != typeof e.querySelectorAll ? e.querySelectorAll(t || "*") : void 0;
            if (!o) for (o = [], n = e.childNodes || e; null != (r = n[i]); i++) !t || ve.nodeName(r, t) ? o.push(r) : ve.merge(o, v(r, t));
            return void 0 === t || t && ve.nodeName(e, t) ? ve.merge([ e ], o) : o;
        }
        function b(e, t) {
            for (var n, r = 0; null != (n = e[r]); r++) ve._data(n, "globalEval", !t || ve._data(t[r], "globalEval"));
        }
        function x(e) {
            Ue.test(e.type) && (e.defaultChecked = e.checked);
        }
        function w(e, t, n, r, i) {
            for (var o, a, s, u, l, c, d, f = e.length, p = y(t), h = [], m = 0; f > m; m++) if (a = e[m], 
            a || 0 === a) if ("object" === ve.type(a)) ve.merge(h, a.nodeType ? [ a ] : a); else if (Ge.test(a)) {
                for (u = u || p.appendChild(t.createElement("div")), l = ($.exec(a) || [ "", "" ])[1].toLowerCase(), 
                d = Ye[l] || Ye._default, u.innerHTML = d[1] + ve.htmlPrefilter(a) + d[2], o = d[0]; o--; ) u = u.lastChild;
                if (!ge.leadingWhitespace && Je.test(a) && h.push(t.createTextNode(Je.exec(a)[0])), 
                !ge.tbody) for (a = "table" !== l || Qe.test(a) ? "<table>" !== d[1] || Qe.test(a) ? 0 : u : u.firstChild, 
                o = a && a.childNodes.length; o--; ) ve.nodeName(c = a.childNodes[o], "tbody") && !c.childNodes.length && a.removeChild(c);
                for (ve.merge(h, u.childNodes), u.textContent = ""; u.firstChild; ) u.removeChild(u.firstChild);
                u = p.lastChild;
            } else h.push(t.createTextNode(a));
            for (u && p.removeChild(u), ge.appendChecked || ve.grep(v(h, "input"), x), m = 0; a = h[m++]; ) if (r && ve.inArray(a, r) > -1) i && i.push(a); else if (s = ve.contains(a.ownerDocument, a), 
            u = v(p.appendChild(a), "script"), s && b(u), n) for (o = 0; a = u[o++]; ) Xe.test(a.type || "") && n.push(a);
            return u = null, p;
        }
        function T() {
            return !0;
        }
        function S() {
            return !1;
        }
        function C() {
            try {
                return ue.activeElement;
            } catch (e) {}
        }
        function k(e, t, n, r, i, o) {
            var a, s;
            if ("object" == typeof t) {
                "string" != typeof n && (r = r || n, n = void 0);
                for (s in t) k(e, s, n, r, t[s], o);
                return e;
            }
            if (null == r && null == i ? (i = n, r = n = void 0) : null == i && ("string" == typeof n ? (i = r, 
            r = void 0) : (i = r, r = n, n = void 0)), i === !1) i = S; else if (!i) return e;
            return 1 === o && (a = i, i = function(e) {
                return ve().off(e), a.apply(this, arguments);
            }, i.guid = a.guid || (a.guid = ve.guid++)), e.each(function() {
                ve.event.add(this, t, i, r, n);
            });
        }
        function E(e, t) {
            return ve.nodeName(e, "table") && ve.nodeName(11 !== t.nodeType ? t : t.firstChild, "tr") ? e.getElementsByTagName("tbody")[0] || e.appendChild(e.ownerDocument.createElement("tbody")) : e;
        }
        function M(e) {
            return e.type = (null !== ve.find.attr(e, "type")) + "/" + e.type, e;
        }
        function N(e) {
            var t = ut.exec(e.type);
            return t ? e.type = t[1] : e.removeAttribute("type"), e;
        }
        function D(e, t) {
            if (1 === t.nodeType && ve.hasData(e)) {
                var n, r, i, o = ve._data(e), a = ve._data(t, o), s = o.events;
                if (s) {
                    delete a.handle, a.events = {};
                    for (n in s) for (r = 0, i = s[n].length; i > r; r++) ve.event.add(t, n, s[n][r]);
                }
                a.data && (a.data = ve.extend({}, a.data));
            }
        }
        function A(e, t) {
            var n, r, i;
            if (1 === t.nodeType) {
                if (n = t.nodeName.toLowerCase(), !ge.noCloneEvent && t[ve.expando]) {
                    i = ve._data(t);
                    for (r in i.events) ve.removeEvent(t, r, i.handle);
                    t.removeAttribute(ve.expando);
                }
                "script" === n && t.text !== e.text ? (M(t).text = e.text, N(t)) : "object" === n ? (t.parentNode && (t.outerHTML = e.outerHTML), 
                ge.html5Clone && e.innerHTML && !ve.trim(t.innerHTML) && (t.innerHTML = e.innerHTML)) : "input" === n && Ue.test(e.type) ? (t.defaultChecked = t.checked = e.checked, 
                t.value !== e.value && (t.value = e.value)) : "option" === n ? t.defaultSelected = t.selected = e.defaultSelected : "input" !== n && "textarea" !== n || (t.defaultValue = e.defaultValue);
            }
        }
        function H(e, t, n, r) {
            t = ce.apply([], t);
            var i, o, a, s, u, l, c = 0, d = e.length, f = d - 1, p = t[0], h = ve.isFunction(p);
            if (h || d > 1 && "string" == typeof p && !ge.checkClone && st.test(p)) return e.each(function(i) {
                var o = e.eq(i);
                h && (t[0] = p.call(this, i, o.html())), H(o, t, n, r);
            });
            if (d && (l = w(t, e[0].ownerDocument, !1, e, r), i = l.firstChild, 1 === l.childNodes.length && (l = i), 
            i || r)) {
                for (s = ve.map(v(l, "script"), M), a = s.length; d > c; c++) o = l, c !== f && (o = ve.clone(o, !0, !0), 
                a && ve.merge(s, v(o, "script"))), n.call(e[c], o, c);
                if (a) for (u = s[s.length - 1].ownerDocument, ve.map(s, N), c = 0; a > c; c++) o = s[c], 
                Xe.test(o.type || "") && !ve._data(o, "globalEval") && ve.contains(u, o) && (o.src ? ve._evalUrl && ve._evalUrl(o.src) : ve.globalEval((o.text || o.textContent || o.innerHTML || "").replace(lt, "")));
                l = i = null;
            }
            return e;
        }
        function O(e, t, n) {
            for (var r, i = t ? ve.filter(t, e) : e, o = 0; null != (r = i[o]); o++) n || 1 !== r.nodeType || ve.cleanData(v(r)), 
            r.parentNode && (n && ve.contains(r.ownerDocument, r) && b(v(r, "script")), r.parentNode.removeChild(r));
            return e;
        }
        function L(e, t) {
            var n = ve(t.createElement(e)).appendTo(t.body), r = ve.css(n[0], "display");
            return n.detach(), r;
        }
        function _(e) {
            var t = ue, n = pt[e];
            return n || (n = L(e, t), "none" !== n && n || (ft = (ft || ve("<iframe frameborder='0' width='0' height='0'/>")).appendTo(t.documentElement), 
            t = (ft[0].contentWindow || ft[0].contentDocument).document, t.write(), t.close(), 
            n = L(e, t), ft.detach()), pt[e] = n), n;
        }
        function j(e, t) {
            return {
                get: function() {
                    return e() ? void delete this.get : (this.get = t).apply(this, arguments);
                }
            };
        }
        function z(e) {
            if (e in Nt) return e;
            for (var t = e.charAt(0).toUpperCase() + e.slice(1), n = Mt.length; n--; ) if (e = Mt[n] + t, 
            e in Nt) return e;
        }
        function F(e, t) {
            for (var n, r, i, o = [], a = 0, s = e.length; s > a; a++) r = e[a], r.style && (o[a] = ve._data(r, "olddisplay"), 
            n = r.style.display, t ? (o[a] || "none" !== n || (r.style.display = ""), "" === r.style.display && Be(r) && (o[a] = ve._data(r, "olddisplay", _(r.nodeName)))) : (i = Be(r), 
            (n && "none" !== n || !i) && ve._data(r, "olddisplay", i ? n : ve.css(r, "display"))));
            for (a = 0; s > a; a++) r = e[a], r.style && (t && "none" !== r.style.display && "" !== r.style.display || (r.style.display = t ? o[a] || "" : "none"));
            return e;
        }
        function P(e, t, n) {
            var r = Ct.exec(t);
            return r ? Math.max(0, r[1] - (n || 0)) + (r[2] || "px") : t;
        }
        function R(e, t, n, r, i) {
            for (var o = n === (r ? "border" : "content") ? 4 : "width" === t ? 1 : 0, a = 0; 4 > o; o += 2) "margin" === n && (a += ve.css(e, n + Ie[o], !0, i)), 
            r ? ("content" === n && (a -= ve.css(e, "padding" + Ie[o], !0, i)), "margin" !== n && (a -= ve.css(e, "border" + Ie[o] + "Width", !0, i))) : (a += ve.css(e, "padding" + Ie[o], !0, i), 
            "padding" !== n && (a += ve.css(e, "border" + Ie[o] + "Width", !0, i)));
            return a;
        }
        function q(e, t, n) {
            var r = !0, o = "width" === t ? e.offsetWidth : e.offsetHeight, a = vt(e), s = ge.boxSizing && "border-box" === ve.css(e, "boxSizing", !1, a);
            if (ue.msFullscreenElement && i.top !== i && e.getClientRects().length && (o = Math.round(100 * e.getBoundingClientRect()[t])), 
            0 >= o || null == o) {
                if (o = bt(e, t, a), (0 > o || null == o) && (o = e.style[t]), mt.test(o)) return o;
                r = s && (ge.boxSizingReliable() || o === e.style[t]), o = parseFloat(o) || 0;
            }
            return o + R(e, t, n || (s ? "border" : "content"), r, a) + "px";
        }
        function W(e, t, n, r, i) {
            return new W.prototype.init(e, t, n, r, i);
        }
        function I() {
            return i.setTimeout(function() {
                Dt = void 0;
            }), Dt = ve.now();
        }
        function B(e, t) {
            var n, r = {
                height: e
            }, i = 0;
            for (t = t ? 1 : 0; 4 > i; i += 2 - t) n = Ie[i], r["margin" + n] = r["padding" + n] = e;
            return t && (r.opacity = r.width = e), r;
        }
        function U(e, t, n) {
            for (var r, i = (V.tweeners[t] || []).concat(V.tweeners["*"]), o = 0, a = i.length; a > o; o++) if (r = i[o].call(n, t, e)) return r;
        }
        function X(e, t, n) {
            var r, i, o, a, s, u, l, c, d = this, f = {}, p = e.style, h = e.nodeType && Be(e), m = ve._data(e, "fxshow");
            n.queue || (s = ve._queueHooks(e, "fx"), null == s.unqueued && (s.unqueued = 0, 
            u = s.empty.fire, s.empty.fire = function() {
                s.unqueued || u();
            }), s.unqueued++, d.always(function() {
                d.always(function() {
                    s.unqueued--, ve.queue(e, "fx").length || s.empty.fire();
                });
            })), 1 === e.nodeType && ("height" in t || "width" in t) && (n.overflow = [ p.overflow, p.overflowX, p.overflowY ], 
            l = ve.css(e, "display"), c = "none" === l ? ve._data(e, "olddisplay") || _(e.nodeName) : l, 
            "inline" === c && "none" === ve.css(e, "float") && (ge.inlineBlockNeedsLayout && "inline" !== _(e.nodeName) ? p.zoom = 1 : p.display = "inline-block")), 
            n.overflow && (p.overflow = "hidden", ge.shrinkWrapBlocks() || d.always(function() {
                p.overflow = n.overflow[0], p.overflowX = n.overflow[1], p.overflowY = n.overflow[2];
            }));
            for (r in t) if (i = t[r], Ht.exec(i)) {
                if (delete t[r], o = o || "toggle" === i, i === (h ? "hide" : "show")) {
                    if ("show" !== i || !m || void 0 === m[r]) continue;
                    h = !0;
                }
                f[r] = m && m[r] || ve.style(e, r);
            } else l = void 0;
            if (ve.isEmptyObject(f)) "inline" === ("none" === l ? _(e.nodeName) : l) && (p.display = l); else {
                m ? "hidden" in m && (h = m.hidden) : m = ve._data(e, "fxshow", {}), o && (m.hidden = !h), 
                h ? ve(e).show() : d.done(function() {
                    ve(e).hide();
                }), d.done(function() {
                    var t;
                    ve._removeData(e, "fxshow");
                    for (t in f) ve.style(e, t, f[t]);
                });
                for (r in f) a = U(h ? m[r] : 0, r, d), r in m || (m[r] = a.start, h && (a.end = a.start, 
                a.start = "width" === r || "height" === r ? 1 : 0));
            }
        }
        function J(e, t) {
            var n, r, i, o, a;
            for (n in e) if (r = ve.camelCase(n), i = t[r], o = e[n], ve.isArray(o) && (i = o[1], 
            o = e[n] = o[0]), n !== r && (e[r] = o, delete e[n]), a = ve.cssHooks[r], a && "expand" in a) {
                o = a.expand(o), delete e[r];
                for (n in o) n in e || (e[n] = o[n], t[n] = i);
            } else t[r] = i;
        }
        function V(e, t, n) {
            var r, i, o = 0, a = V.prefilters.length, s = ve.Deferred().always(function() {
                delete u.elem;
            }), u = function() {
                if (i) return !1;
                for (var t = Dt || I(), n = Math.max(0, l.startTime + l.duration - t), r = n / l.duration || 0, o = 1 - r, a = 0, u = l.tweens.length; u > a; a++) l.tweens[a].run(o);
                return s.notifyWith(e, [ l, o, n ]), 1 > o && u ? n : (s.resolveWith(e, [ l ]), 
                !1);
            }, l = s.promise({
                elem: e,
                props: ve.extend({}, t),
                opts: ve.extend(!0, {
                    specialEasing: {},
                    easing: ve.easing._default
                }, n),
                originalProperties: t,
                originalOptions: n,
                startTime: Dt || I(),
                duration: n.duration,
                tweens: [],
                createTween: function(t, n) {
                    var r = ve.Tween(e, l.opts, t, n, l.opts.specialEasing[t] || l.opts.easing);
                    return l.tweens.push(r), r;
                },
                stop: function(t) {
                    var n = 0, r = t ? l.tweens.length : 0;
                    if (i) return this;
                    for (i = !0; r > n; n++) l.tweens[n].run(1);
                    return t ? (s.notifyWith(e, [ l, 1, 0 ]), s.resolveWith(e, [ l, t ])) : s.rejectWith(e, [ l, t ]), 
                    this;
                }
            }), c = l.props;
            for (J(c, l.opts.specialEasing); a > o; o++) if (r = V.prefilters[o].call(l, e, c, l.opts)) return ve.isFunction(r.stop) && (ve._queueHooks(l.elem, l.opts.queue).stop = ve.proxy(r.stop, r)), 
            r;
            return ve.map(c, U, l), ve.isFunction(l.opts.start) && l.opts.start.call(e, l), 
            ve.fx.timer(ve.extend(u, {
                elem: e,
                anim: l,
                queue: l.opts.queue
            })), l.progress(l.opts.progress).done(l.opts.done, l.opts.complete).fail(l.opts.fail).always(l.opts.always);
        }
        function Y(e) {
            return ve.attr(e, "class") || "";
        }
        function G(e) {
            return function(t, n) {
                "string" != typeof t && (n = t, t = "*");
                var r, i = 0, o = t.toLowerCase().match(_e) || [];
                if (ve.isFunction(n)) for (;r = o[i++]; ) "+" === r.charAt(0) ? (r = r.slice(1) || "*", 
                (e[r] = e[r] || []).unshift(n)) : (e[r] = e[r] || []).push(n);
            };
        }
        function Q(e, t, n, r) {
            function i(s) {
                var u;
                return o[s] = !0, ve.each(e[s] || [], function(e, s) {
                    var l = s(t, n, r);
                    return "string" != typeof l || a || o[l] ? a ? !(u = l) : void 0 : (t.dataTypes.unshift(l), 
                    i(l), !1);
                }), u;
            }
            var o = {}, a = e === nn;
            return i(t.dataTypes[0]) || !o["*"] && i("*");
        }
        function K(e, t) {
            var n, r, i = ve.ajaxSettings.flatOptions || {};
            for (r in t) void 0 !== t[r] && ((i[r] ? e : n || (n = {}))[r] = t[r]);
            return n && ve.extend(!0, e, n), e;
        }
        function Z(e, t, n) {
            for (var r, i, o, a, s = e.contents, u = e.dataTypes; "*" === u[0]; ) u.shift(), 
            void 0 === i && (i = e.mimeType || t.getResponseHeader("Content-Type"));
            if (i) for (a in s) if (s[a] && s[a].test(i)) {
                u.unshift(a);
                break;
            }
            if (u[0] in n) o = u[0]; else {
                for (a in n) {
                    if (!u[0] || e.converters[a + " " + u[0]]) {
                        o = a;
                        break;
                    }
                    r || (r = a);
                }
                o = o || r;
            }
            return o ? (o !== u[0] && u.unshift(o), n[o]) : void 0;
        }
        function ee(e, t, n, r) {
            var i, o, a, s, u, l = {}, c = e.dataTypes.slice();
            if (c[1]) for (a in e.converters) l[a.toLowerCase()] = e.converters[a];
            for (o = c.shift(); o; ) if (e.responseFields[o] && (n[e.responseFields[o]] = t), 
            !u && r && e.dataFilter && (t = e.dataFilter(t, e.dataType)), u = o, o = c.shift()) if ("*" === o) o = u; else if ("*" !== u && u !== o) {
                if (a = l[u + " " + o] || l["* " + o], !a) for (i in l) if (s = i.split(" "), s[1] === o && (a = l[u + " " + s[0]] || l["* " + s[0]])) {
                    a === !0 ? a = l[i] : l[i] !== !0 && (o = s[0], c.unshift(s[1]));
                    break;
                }
                if (a !== !0) if (a && e["throws"]) t = a(t); else try {
                    t = a(t);
                } catch (d) {
                    return {
                        state: "parsererror",
                        error: a ? d : "No conversion from " + u + " to " + o
                    };
                }
            }
            return {
                state: "success",
                data: t
            };
        }
        function te(e) {
            return e.style && e.style.display || ve.css(e, "display");
        }
        function ne(e) {
            for (;e && 1 === e.nodeType; ) {
                if ("none" === te(e) || "hidden" === e.type) return !0;
                e = e.parentNode;
            }
            return !1;
        }
        function re(e, t, n, r) {
            var i;
            if (ve.isArray(t)) ve.each(t, function(t, i) {
                n || un.test(e) ? r(e, i) : re(e + "[" + ("object" == typeof i && null != i ? t : "") + "]", i, n, r);
            }); else if (n || "object" !== ve.type(t)) r(e, t); else for (i in t) re(e + "[" + i + "]", t[i], n, r);
        }
        function ie() {
            try {
                return new i.XMLHttpRequest();
            } catch (e) {}
        }
        function oe() {
            try {
                return new i.ActiveXObject("Microsoft.XMLHTTP");
            } catch (e) {}
        }
        function ae(e) {
            return ve.isWindow(e) ? e : 9 === e.nodeType && (e.defaultView || e.parentWindow);
        }
        var se = [], ue = i.document, le = se.slice, ce = se.concat, de = se.push, fe = se.indexOf, pe = {}, he = pe.toString, me = pe.hasOwnProperty, ge = {}, ye = "1.12.3", ve = function(e, t) {
            return new ve.fn.init(e, t);
        }, be = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, xe = /^-ms-/, we = /-([\da-z])/gi, Te = function(e, t) {
            return t.toUpperCase();
        };
        ve.fn = ve.prototype = {
            jquery: ye,
            constructor: ve,
            selector: "",
            length: 0,
            toArray: function() {
                return le.call(this);
            },
            get: function(e) {
                return null != e ? 0 > e ? this[e + this.length] : this[e] : le.call(this);
            },
            pushStack: function(e) {
                var t = ve.merge(this.constructor(), e);
                return t.prevObject = this, t.context = this.context, t;
            },
            each: function(e) {
                return ve.each(this, e);
            },
            map: function(e) {
                return this.pushStack(ve.map(this, function(t, n) {
                    return e.call(t, n, t);
                }));
            },
            slice: function() {
                return this.pushStack(le.apply(this, arguments));
            },
            first: function() {
                return this.eq(0);
            },
            last: function() {
                return this.eq(-1);
            },
            eq: function(e) {
                var t = this.length, n = +e + (0 > e ? t : 0);
                return this.pushStack(n >= 0 && t > n ? [ this[n] ] : []);
            },
            end: function() {
                return this.prevObject || this.constructor();
            },
            push: de,
            sort: se.sort,
            splice: se.splice
        }, ve.extend = ve.fn.extend = function() {
            var e, t, n, r, i, o, a = arguments[0] || {}, s = 1, u = arguments.length, l = !1;
            for ("boolean" == typeof a && (l = a, a = arguments[s] || {}, s++), "object" == typeof a || ve.isFunction(a) || (a = {}), 
            s === u && (a = this, s--); u > s; s++) if (null != (i = arguments[s])) for (r in i) e = a[r], 
            n = i[r], a !== n && (l && n && (ve.isPlainObject(n) || (t = ve.isArray(n))) ? (t ? (t = !1, 
            o = e && ve.isArray(e) ? e : []) : o = e && ve.isPlainObject(e) ? e : {}, a[r] = ve.extend(l, o, n)) : void 0 !== n && (a[r] = n));
            return a;
        }, ve.extend({
            expando: "jQuery" + (ye + Math.random()).replace(/\D/g, ""),
            isReady: !0,
            error: function(e) {
                throw new Error(e);
            },
            noop: function() {},
            isFunction: function(e) {
                return "function" === ve.type(e);
            },
            isArray: Array.isArray || function(e) {
                return "array" === ve.type(e);
            },
            isWindow: function(e) {
                return null != e && e == e.window;
            },
            isNumeric: function(e) {
                var t = e && e.toString();
                return !ve.isArray(e) && t - parseFloat(t) + 1 >= 0;
            },
            isEmptyObject: function(e) {
                var t;
                for (t in e) return !1;
                return !0;
            },
            isPlainObject: function(e) {
                var t;
                if (!e || "object" !== ve.type(e) || e.nodeType || ve.isWindow(e)) return !1;
                try {
                    if (e.constructor && !me.call(e, "constructor") && !me.call(e.constructor.prototype, "isPrototypeOf")) return !1;
                } catch (n) {
                    return !1;
                }
                if (!ge.ownFirst) for (t in e) return me.call(e, t);
                for (t in e) ;
                return void 0 === t || me.call(e, t);
            },
            type: function(e) {
                return null == e ? e + "" : "object" == typeof e || "function" == typeof e ? pe[he.call(e)] || "object" : typeof e;
            },
            globalEval: function(e) {
                e && ve.trim(e) && (i.execScript || function(e) {
                    i.eval.call(i, e);
                })(e);
            },
            camelCase: function(e) {
                return e.replace(xe, "ms-").replace(we, Te);
            },
            nodeName: function(e, t) {
                return e.nodeName && e.nodeName.toLowerCase() === t.toLowerCase();
            },
            each: function(e, t) {
                var n, r = 0;
                if (a(e)) for (n = e.length; n > r && t.call(e[r], r, e[r]) !== !1; r++) ; else for (r in e) if (t.call(e[r], r, e[r]) === !1) break;
                return e;
            },
            trim: function(e) {
                return null == e ? "" : (e + "").replace(be, "");
            },
            makeArray: function(e, t) {
                var n = t || [];
                return null != e && (a(Object(e)) ? ve.merge(n, "string" == typeof e ? [ e ] : e) : de.call(n, e)), 
                n;
            },
            inArray: function(e, t, n) {
                var r;
                if (t) {
                    if (fe) return fe.call(t, e, n);
                    for (r = t.length, n = n ? 0 > n ? Math.max(0, r + n) : n : 0; r > n; n++) if (n in t && t[n] === e) return n;
                }
                return -1;
            },
            merge: function(e, t) {
                for (var n = +t.length, r = 0, i = e.length; n > r; ) e[i++] = t[r++];
                if (n !== n) for (;void 0 !== t[r]; ) e[i++] = t[r++];
                return e.length = i, e;
            },
            grep: function(e, t, n) {
                for (var r, i = [], o = 0, a = e.length, s = !n; a > o; o++) r = !t(e[o], o), r !== s && i.push(e[o]);
                return i;
            },
            map: function(e, t, n) {
                var r, i, o = 0, s = [];
                if (a(e)) for (r = e.length; r > o; o++) i = t(e[o], o, n), null != i && s.push(i); else for (o in e) i = t(e[o], o, n), 
                null != i && s.push(i);
                return ce.apply([], s);
            },
            guid: 1,
            proxy: function(e, t) {
                var n, r, i;
                return "string" == typeof t && (i = e[t], t = e, e = i), ve.isFunction(e) ? (n = le.call(arguments, 2), 
                r = function() {
                    return e.apply(t || this, n.concat(le.call(arguments)));
                }, r.guid = e.guid = e.guid || ve.guid++, r) : void 0;
            },
            now: function() {
                return +new Date();
            },
            support: ge
        }), "function" == typeof Symbol && (ve.fn[Symbol.iterator] = se[Symbol.iterator]), 
        ve.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function(e, t) {
            pe["[object " + t + "]"] = t.toLowerCase();
        });
        var Se = function(e) {
            function t(e, t, n, r) {
                var i, o, a, s, u, l, d, p, h = t && t.ownerDocument, m = t ? t.nodeType : 9;
                if (n = n || [], "string" != typeof e || !e || 1 !== m && 9 !== m && 11 !== m) return n;
                if (!r && ((t ? t.ownerDocument || t : q) !== O && H(t), t = t || O, _)) {
                    if (11 !== m && (l = $.exec(e))) if (i = l[1]) {
                        if (9 === m) {
                            if (!(a = t.getElementById(i))) return n;
                            if (a.id === i) return n.push(a), n;
                        } else if (h && (a = h.getElementById(i)) && P(t, a) && a.id === i) return n.push(a), 
                        n;
                    } else {
                        if (l[2]) return Z.apply(n, t.getElementsByTagName(e)), n;
                        if ((i = l[3]) && w.getElementsByClassName && t.getElementsByClassName) return Z.apply(n, t.getElementsByClassName(i)), 
                        n;
                    }
                    if (w.qsa && !X[e + " "] && (!j || !j.test(e))) {
                        if (1 !== m) h = t, p = e; else if ("object" !== t.nodeName.toLowerCase()) {
                            for ((s = t.getAttribute("id")) ? s = s.replace(be, "\\$&") : t.setAttribute("id", s = R), 
                            d = k(e), o = d.length, u = pe.test(s) ? "#" + s : "[id='" + s + "']"; o--; ) d[o] = u + " " + f(d[o]);
                            p = d.join(","), h = ve.test(e) && c(t.parentNode) || t;
                        }
                        if (p) try {
                            return Z.apply(n, h.querySelectorAll(p)), n;
                        } catch (g) {} finally {
                            s === R && t.removeAttribute("id");
                        }
                    }
                }
                return M(e.replace(ue, "$1"), t, n, r);
            }
            function n() {
                function e(n, r) {
                    return t.push(n + " ") > T.cacheLength && delete e[t.shift()], e[n + " "] = r;
                }
                var t = [];
                return e;
            }
            function r(e) {
                return e[R] = !0, e;
            }
            function i(e) {
                var t = O.createElement("div");
                try {
                    return !!e(t);
                } catch (n) {
                    return !1;
                } finally {
                    t.parentNode && t.parentNode.removeChild(t), t = null;
                }
            }
            function o(e, t) {
                for (var n = e.split("|"), r = n.length; r--; ) T.attrHandle[n[r]] = t;
            }
            function a(e, t) {
                var n = t && e, r = n && 1 === e.nodeType && 1 === t.nodeType && (~t.sourceIndex || V) - (~e.sourceIndex || V);
                if (r) return r;
                if (n) for (;n = n.nextSibling; ) if (n === t) return -1;
                return e ? 1 : -1;
            }
            function s(e) {
                return function(t) {
                    var n = t.nodeName.toLowerCase();
                    return "input" === n && t.type === e;
                };
            }
            function u(e) {
                return function(t) {
                    var n = t.nodeName.toLowerCase();
                    return ("input" === n || "button" === n) && t.type === e;
                };
            }
            function l(e) {
                return r(function(t) {
                    return t = +t, r(function(n, r) {
                        for (var i, o = e([], n.length, t), a = o.length; a--; ) n[i = o[a]] && (n[i] = !(r[i] = n[i]));
                    });
                });
            }
            function c(e) {
                return e && "undefined" != typeof e.getElementsByTagName && e;
            }
            function d() {}
            function f(e) {
                for (var t = 0, n = e.length, r = ""; n > t; t++) r += e[t].value;
                return r;
            }
            function p(e, t, n) {
                var r = t.dir, i = n && "parentNode" === r, o = I++;
                return t.first ? function(t, n, o) {
                    for (;t = t[r]; ) if (1 === t.nodeType || i) return e(t, n, o);
                } : function(t, n, a) {
                    var s, u, l, c = [ W, o ];
                    if (a) {
                        for (;t = t[r]; ) if ((1 === t.nodeType || i) && e(t, n, a)) return !0;
                    } else for (;t = t[r]; ) if (1 === t.nodeType || i) {
                        if (l = t[R] || (t[R] = {}), u = l[t.uniqueID] || (l[t.uniqueID] = {}), (s = u[r]) && s[0] === W && s[1] === o) return c[2] = s[2];
                        if (u[r] = c, c[2] = e(t, n, a)) return !0;
                    }
                };
            }
            function h(e) {
                return e.length > 1 ? function(t, n, r) {
                    for (var i = e.length; i--; ) if (!e[i](t, n, r)) return !1;
                    return !0;
                } : e[0];
            }
            function m(e, n, r) {
                for (var i = 0, o = n.length; o > i; i++) t(e, n[i], r);
                return r;
            }
            function g(e, t, n, r, i) {
                for (var o, a = [], s = 0, u = e.length, l = null != t; u > s; s++) (o = e[s]) && (n && !n(o, r, i) || (a.push(o), 
                l && t.push(s)));
                return a;
            }
            function y(e, t, n, i, o, a) {
                return i && !i[R] && (i = y(i)), o && !o[R] && (o = y(o, a)), r(function(r, a, s, u) {
                    var l, c, d, f = [], p = [], h = a.length, y = r || m(t || "*", s.nodeType ? [ s ] : s, []), v = !e || !r && t ? y : g(y, f, e, s, u), b = n ? o || (r ? e : h || i) ? [] : a : v;
                    if (n && n(v, b, s, u), i) for (l = g(b, p), i(l, [], s, u), c = l.length; c--; ) (d = l[c]) && (b[p[c]] = !(v[p[c]] = d));
                    if (r) {
                        if (o || e) {
                            if (o) {
                                for (l = [], c = b.length; c--; ) (d = b[c]) && l.push(v[c] = d);
                                o(null, b = [], l, u);
                            }
                            for (c = b.length; c--; ) (d = b[c]) && (l = o ? te(r, d) : f[c]) > -1 && (r[l] = !(a[l] = d));
                        }
                    } else b = g(b === a ? b.splice(h, b.length) : b), o ? o(null, a, b, u) : Z.apply(a, b);
                });
            }
            function v(e) {
                for (var t, n, r, i = e.length, o = T.relative[e[0].type], a = o || T.relative[" "], s = o ? 1 : 0, u = p(function(e) {
                    return e === t;
                }, a, !0), l = p(function(e) {
                    return te(t, e) > -1;
                }, a, !0), c = [ function(e, n, r) {
                    var i = !o && (r || n !== N) || ((t = n).nodeType ? u(e, n, r) : l(e, n, r));
                    return t = null, i;
                } ]; i > s; s++) if (n = T.relative[e[s].type]) c = [ p(h(c), n) ]; else {
                    if (n = T.filter[e[s].type].apply(null, e[s].matches), n[R]) {
                        for (r = ++s; i > r && !T.relative[e[r].type]; r++) ;
                        return y(s > 1 && h(c), s > 1 && f(e.slice(0, s - 1).concat({
                            value: " " === e[s - 2].type ? "*" : ""
                        })).replace(ue, "$1"), n, r > s && v(e.slice(s, r)), i > r && v(e = e.slice(r)), i > r && f(e));
                    }
                    c.push(n);
                }
                return h(c);
            }
            function b(e, n) {
                var i = n.length > 0, o = e.length > 0, a = function(r, a, s, u, l) {
                    var c, d, f, p = 0, h = "0", m = r && [], y = [], v = N, b = r || o && T.find.TAG("*", l), x = W += null == v ? 1 : Math.random() || .1, w = b.length;
                    for (l && (N = a === O || a || l); h !== w && null != (c = b[h]); h++) {
                        if (o && c) {
                            for (d = 0, a || c.ownerDocument === O || (H(c), s = !_); f = e[d++]; ) if (f(c, a || O, s)) {
                                u.push(c);
                                break;
                            }
                            l && (W = x);
                        }
                        i && ((c = !f && c) && p--, r && m.push(c));
                    }
                    if (p += h, i && h !== p) {
                        for (d = 0; f = n[d++]; ) f(m, y, a, s);
                        if (r) {
                            if (p > 0) for (;h--; ) m[h] || y[h] || (y[h] = Q.call(u));
                            y = g(y);
                        }
                        Z.apply(u, y), l && !r && y.length > 0 && p + n.length > 1 && t.uniqueSort(u);
                    }
                    return l && (W = x, N = v), m;
                };
                return i ? r(a) : a;
            }
            var x, w, T, S, C, k, E, M, N, D, A, H, O, L, _, j, z, F, P, R = "sizzle" + 1 * new Date(), q = e.document, W = 0, I = 0, B = n(), U = n(), X = n(), J = function(e, t) {
                return e === t && (A = !0), 0;
            }, V = 1 << 31, Y = {}.hasOwnProperty, G = [], Q = G.pop, K = G.push, Z = G.push, ee = G.slice, te = function(e, t) {
                for (var n = 0, r = e.length; r > n; n++) if (e[n] === t) return n;
                return -1;
            }, ne = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped", re = "[\\x20\\t\\r\\n\\f]", ie = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+", oe = "\\[" + re + "*(" + ie + ")(?:" + re + "*([*^$|!~]?=)" + re + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + ie + "))|)" + re + "*\\]", ae = ":(" + ie + ")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|" + oe + ")*)|.*)\\)|)", se = new RegExp(re + "+", "g"), ue = new RegExp("^" + re + "+|((?:^|[^\\\\])(?:\\\\.)*)" + re + "+$", "g"), le = new RegExp("^" + re + "*," + re + "*"), ce = new RegExp("^" + re + "*([>+~]|" + re + ")" + re + "*"), de = new RegExp("=" + re + "*([^\\]'\"]*?)" + re + "*\\]", "g"), fe = new RegExp(ae), pe = new RegExp("^" + ie + "$"), he = {
                ID: new RegExp("^#(" + ie + ")"),
                CLASS: new RegExp("^\\.(" + ie + ")"),
                TAG: new RegExp("^(" + ie + "|[*])"),
                ATTR: new RegExp("^" + oe),
                PSEUDO: new RegExp("^" + ae),
                CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + re + "*(even|odd|(([+-]|)(\\d*)n|)" + re + "*(?:([+-]|)" + re + "*(\\d+)|))" + re + "*\\)|)", "i"),
                bool: new RegExp("^(?:" + ne + ")$", "i"),
                needsContext: new RegExp("^" + re + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + re + "*((?:-\\d)?\\d*)" + re + "*\\)|)(?=[^-]|$)", "i")
            }, me = /^(?:input|select|textarea|button)$/i, ge = /^h\d$/i, ye = /^[^{]+\{\s*\[native \w/, $ = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, ve = /[+~]/, be = /'|\\/g, xe = new RegExp("\\\\([\\da-f]{1,6}" + re + "?|(" + re + ")|.)", "ig"), we = function(e, t, n) {
                var r = "0x" + t - 65536;
                return r !== r || n ? t : 0 > r ? String.fromCharCode(r + 65536) : String.fromCharCode(r >> 10 | 55296, 1023 & r | 56320);
            }, Te = function() {
                H();
            };
            try {
                Z.apply(G = ee.call(q.childNodes), q.childNodes), G[q.childNodes.length].nodeType;
            } catch (Se) {
                Z = {
                    apply: G.length ? function(e, t) {
                        K.apply(e, ee.call(t));
                    } : function(e, t) {
                        for (var n = e.length, r = 0; e[n++] = t[r++]; ) ;
                        e.length = n - 1;
                    }
                };
            }
            w = t.support = {}, C = t.isXML = function(e) {
                var t = e && (e.ownerDocument || e).documentElement;
                return !!t && "HTML" !== t.nodeName;
            }, H = t.setDocument = function(e) {
                var t, n, r = e ? e.ownerDocument || e : q;
                return r !== O && 9 === r.nodeType && r.documentElement ? (O = r, L = O.documentElement, 
                _ = !C(O), (n = O.defaultView) && n.top !== n && (n.addEventListener ? n.addEventListener("unload", Te, !1) : n.attachEvent && n.attachEvent("onunload", Te)), 
                w.attributes = i(function(e) {
                    return e.className = "i", !e.getAttribute("className");
                }), w.getElementsByTagName = i(function(e) {
                    return e.appendChild(O.createComment("")), !e.getElementsByTagName("*").length;
                }), w.getElementsByClassName = ye.test(O.getElementsByClassName), w.getById = i(function(e) {
                    return L.appendChild(e).id = R, !O.getElementsByName || !O.getElementsByName(R).length;
                }), w.getById ? (T.find.ID = function(e, t) {
                    if ("undefined" != typeof t.getElementById && _) {
                        var n = t.getElementById(e);
                        return n ? [ n ] : [];
                    }
                }, T.filter.ID = function(e) {
                    var t = e.replace(xe, we);
                    return function(e) {
                        return e.getAttribute("id") === t;
                    };
                }) : (delete T.find.ID, T.filter.ID = function(e) {
                    var t = e.replace(xe, we);
                    return function(e) {
                        var n = "undefined" != typeof e.getAttributeNode && e.getAttributeNode("id");
                        return n && n.value === t;
                    };
                }), T.find.TAG = w.getElementsByTagName ? function(e, t) {
                    return "undefined" != typeof t.getElementsByTagName ? t.getElementsByTagName(e) : w.qsa ? t.querySelectorAll(e) : void 0;
                } : function(e, t) {
                    var n, r = [], i = 0, o = t.getElementsByTagName(e);
                    if ("*" === e) {
                        for (;n = o[i++]; ) 1 === n.nodeType && r.push(n);
                        return r;
                    }
                    return o;
                }, T.find.CLASS = w.getElementsByClassName && function(e, t) {
                    return "undefined" != typeof t.getElementsByClassName && _ ? t.getElementsByClassName(e) : void 0;
                }, z = [], j = [], (w.qsa = ye.test(O.querySelectorAll)) && (i(function(e) {
                    L.appendChild(e).innerHTML = "<a id='" + R + "'></a><select id='" + R + "-\r\\' msallowcapture=''><option selected=''></option></select>", 
                    e.querySelectorAll("[msallowcapture^='']").length && j.push("[*^$]=" + re + "*(?:''|\"\")"), 
                    e.querySelectorAll("[selected]").length || j.push("\\[" + re + "*(?:value|" + ne + ")"), 
                    e.querySelectorAll("[id~=" + R + "-]").length || j.push("~="), e.querySelectorAll(":checked").length || j.push(":checked"), 
                    e.querySelectorAll("a#" + R + "+*").length || j.push(".#.+[+~]");
                }), i(function(e) {
                    var t = O.createElement("input");
                    t.setAttribute("type", "hidden"), e.appendChild(t).setAttribute("name", "D"), e.querySelectorAll("[name=d]").length && j.push("name" + re + "*[*^$|!~]?="), 
                    e.querySelectorAll(":enabled").length || j.push(":enabled", ":disabled"), e.querySelectorAll("*,:x"), 
                    j.push(",.*:");
                })), (w.matchesSelector = ye.test(F = L.matches || L.webkitMatchesSelector || L.mozMatchesSelector || L.oMatchesSelector || L.msMatchesSelector)) && i(function(e) {
                    w.disconnectedMatch = F.call(e, "div"), F.call(e, "[s!='']:x"), z.push("!=", ae);
                }), j = j.length && new RegExp(j.join("|")), z = z.length && new RegExp(z.join("|")), 
                t = ye.test(L.compareDocumentPosition), P = t || ye.test(L.contains) ? function(e, t) {
                    var n = 9 === e.nodeType ? e.documentElement : e, r = t && t.parentNode;
                    return e === r || !(!r || 1 !== r.nodeType || !(n.contains ? n.contains(r) : e.compareDocumentPosition && 16 & e.compareDocumentPosition(r)));
                } : function(e, t) {
                    if (t) for (;t = t.parentNode; ) if (t === e) return !0;
                    return !1;
                }, J = t ? function(e, t) {
                    if (e === t) return A = !0, 0;
                    var n = !e.compareDocumentPosition - !t.compareDocumentPosition;
                    return n ? n : (n = (e.ownerDocument || e) === (t.ownerDocument || t) ? e.compareDocumentPosition(t) : 1, 
                    1 & n || !w.sortDetached && t.compareDocumentPosition(e) === n ? e === O || e.ownerDocument === q && P(q, e) ? -1 : t === O || t.ownerDocument === q && P(q, t) ? 1 : D ? te(D, e) - te(D, t) : 0 : 4 & n ? -1 : 1);
                } : function(e, t) {
                    if (e === t) return A = !0, 0;
                    var n, r = 0, i = e.parentNode, o = t.parentNode, s = [ e ], u = [ t ];
                    if (!i || !o) return e === O ? -1 : t === O ? 1 : i ? -1 : o ? 1 : D ? te(D, e) - te(D, t) : 0;
                    if (i === o) return a(e, t);
                    for (n = e; n = n.parentNode; ) s.unshift(n);
                    for (n = t; n = n.parentNode; ) u.unshift(n);
                    for (;s[r] === u[r]; ) r++;
                    return r ? a(s[r], u[r]) : s[r] === q ? -1 : u[r] === q ? 1 : 0;
                }, O) : O;
            }, t.matches = function(e, n) {
                return t(e, null, null, n);
            }, t.matchesSelector = function(e, n) {
                if ((e.ownerDocument || e) !== O && H(e), n = n.replace(de, "='$1']"), w.matchesSelector && _ && !X[n + " "] && (!z || !z.test(n)) && (!j || !j.test(n))) try {
                    var r = F.call(e, n);
                    if (r || w.disconnectedMatch || e.document && 11 !== e.document.nodeType) return r;
                } catch (i) {}
                return t(n, O, null, [ e ]).length > 0;
            }, t.contains = function(e, t) {
                return (e.ownerDocument || e) !== O && H(e), P(e, t);
            }, t.attr = function(e, t) {
                (e.ownerDocument || e) !== O && H(e);
                var n = T.attrHandle[t.toLowerCase()], r = n && Y.call(T.attrHandle, t.toLowerCase()) ? n(e, t, !_) : void 0;
                return void 0 !== r ? r : w.attributes || !_ ? e.getAttribute(t) : (r = e.getAttributeNode(t)) && r.specified ? r.value : null;
            }, t.error = function(e) {
                throw new Error("Syntax error, unrecognized expression: " + e);
            }, t.uniqueSort = function(e) {
                var t, n = [], r = 0, i = 0;
                if (A = !w.detectDuplicates, D = !w.sortStable && e.slice(0), e.sort(J), A) {
                    for (;t = e[i++]; ) t === e[i] && (r = n.push(i));
                    for (;r--; ) e.splice(n[r], 1);
                }
                return D = null, e;
            }, S = t.getText = function(e) {
                var t, n = "", r = 0, i = e.nodeType;
                if (i) {
                    if (1 === i || 9 === i || 11 === i) {
                        if ("string" == typeof e.textContent) return e.textContent;
                        for (e = e.firstChild; e; e = e.nextSibling) n += S(e);
                    } else if (3 === i || 4 === i) return e.nodeValue;
                } else for (;t = e[r++]; ) n += S(t);
                return n;
            }, T = t.selectors = {
                cacheLength: 50,
                createPseudo: r,
                match: he,
                attrHandle: {},
                find: {},
                relative: {
                    ">": {
                        dir: "parentNode",
                        first: !0
                    },
                    " ": {
                        dir: "parentNode"
                    },
                    "+": {
                        dir: "previousSibling",
                        first: !0
                    },
                    "~": {
                        dir: "previousSibling"
                    }
                },
                preFilter: {
                    ATTR: function(e) {
                        return e[1] = e[1].replace(xe, we), e[3] = (e[3] || e[4] || e[5] || "").replace(xe, we), 
                        "~=" === e[2] && (e[3] = " " + e[3] + " "), e.slice(0, 4);
                    },
                    CHILD: function(e) {
                        return e[1] = e[1].toLowerCase(), "nth" === e[1].slice(0, 3) ? (e[3] || t.error(e[0]), 
                        e[4] = +(e[4] ? e[5] + (e[6] || 1) : 2 * ("even" === e[3] || "odd" === e[3])), e[5] = +(e[7] + e[8] || "odd" === e[3])) : e[3] && t.error(e[0]), 
                        e;
                    },
                    PSEUDO: function(e) {
                        var t, n = !e[6] && e[2];
                        return he.CHILD.test(e[0]) ? null : (e[3] ? e[2] = e[4] || e[5] || "" : n && fe.test(n) && (t = k(n, !0)) && (t = n.indexOf(")", n.length - t) - n.length) && (e[0] = e[0].slice(0, t), 
                        e[2] = n.slice(0, t)), e.slice(0, 3));
                    }
                },
                filter: {
                    TAG: function(e) {
                        var t = e.replace(xe, we).toLowerCase();
                        return "*" === e ? function() {
                            return !0;
                        } : function(e) {
                            return e.nodeName && e.nodeName.toLowerCase() === t;
                        };
                    },
                    CLASS: function(e) {
                        var t = B[e + " "];
                        return t || (t = new RegExp("(^|" + re + ")" + e + "(" + re + "|$)")) && B(e, function(e) {
                            return t.test("string" == typeof e.className && e.className || "undefined" != typeof e.getAttribute && e.getAttribute("class") || "");
                        });
                    },
                    ATTR: function(e, n, r) {
                        return function(i) {
                            var o = t.attr(i, e);
                            return null == o ? "!=" === n : !n || (o += "", "=" === n ? o === r : "!=" === n ? o !== r : "^=" === n ? r && 0 === o.indexOf(r) : "*=" === n ? r && o.indexOf(r) > -1 : "$=" === n ? r && o.slice(-r.length) === r : "~=" === n ? (" " + o.replace(se, " ") + " ").indexOf(r) > -1 : "|=" === n && (o === r || o.slice(0, r.length + 1) === r + "-"));
                        };
                    },
                    CHILD: function(e, t, n, r, i) {
                        var o = "nth" !== e.slice(0, 3), a = "last" !== e.slice(-4), s = "of-type" === t;
                        return 1 === r && 0 === i ? function(e) {
                            return !!e.parentNode;
                        } : function(t, n, u) {
                            var l, c, d, f, p, h, m = o !== a ? "nextSibling" : "previousSibling", g = t.parentNode, y = s && t.nodeName.toLowerCase(), v = !u && !s, b = !1;
                            if (g) {
                                if (o) {
                                    for (;m; ) {
                                        for (f = t; f = f[m]; ) if (s ? f.nodeName.toLowerCase() === y : 1 === f.nodeType) return !1;
                                        h = m = "only" === e && !h && "nextSibling";
                                    }
                                    return !0;
                                }
                                if (h = [ a ? g.firstChild : g.lastChild ], a && v) {
                                    for (f = g, d = f[R] || (f[R] = {}), c = d[f.uniqueID] || (d[f.uniqueID] = {}), 
                                    l = c[e] || [], p = l[0] === W && l[1], b = p && l[2], f = p && g.childNodes[p]; f = ++p && f && f[m] || (b = p = 0) || h.pop(); ) if (1 === f.nodeType && ++b && f === t) {
                                        c[e] = [ W, p, b ];
                                        break;
                                    }
                                } else if (v && (f = t, d = f[R] || (f[R] = {}), c = d[f.uniqueID] || (d[f.uniqueID] = {}), 
                                l = c[e] || [], p = l[0] === W && l[1], b = p), b === !1) for (;(f = ++p && f && f[m] || (b = p = 0) || h.pop()) && ((s ? f.nodeName.toLowerCase() !== y : 1 !== f.nodeType) || !++b || (v && (d = f[R] || (f[R] = {}), 
                                c = d[f.uniqueID] || (d[f.uniqueID] = {}), c[e] = [ W, b ]), f !== t)); ) ;
                                return b -= i, b === r || b % r === 0 && b / r >= 0;
                            }
                        };
                    },
                    PSEUDO: function(e, n) {
                        var i, o = T.pseudos[e] || T.setFilters[e.toLowerCase()] || t.error("unsupported pseudo: " + e);
                        return o[R] ? o(n) : o.length > 1 ? (i = [ e, e, "", n ], T.setFilters.hasOwnProperty(e.toLowerCase()) ? r(function(e, t) {
                            for (var r, i = o(e, n), a = i.length; a--; ) r = te(e, i[a]), e[r] = !(t[r] = i[a]);
                        }) : function(e) {
                            return o(e, 0, i);
                        }) : o;
                    }
                },
                pseudos: {
                    not: r(function(e) {
                        var t = [], n = [], i = E(e.replace(ue, "$1"));
                        return i[R] ? r(function(e, t, n, r) {
                            for (var o, a = i(e, null, r, []), s = e.length; s--; ) (o = a[s]) && (e[s] = !(t[s] = o));
                        }) : function(e, r, o) {
                            return t[0] = e, i(t, null, o, n), t[0] = null, !n.pop();
                        };
                    }),
                    has: r(function(e) {
                        return function(n) {
                            return t(e, n).length > 0;
                        };
                    }),
                    contains: r(function(e) {
                        return e = e.replace(xe, we), function(t) {
                            return (t.textContent || t.innerText || S(t)).indexOf(e) > -1;
                        };
                    }),
                    lang: r(function(e) {
                        return pe.test(e || "") || t.error("unsupported lang: " + e), e = e.replace(xe, we).toLowerCase(), 
                        function(t) {
                            var n;
                            do if (n = _ ? t.lang : t.getAttribute("xml:lang") || t.getAttribute("lang")) return n = n.toLowerCase(), 
                            n === e || 0 === n.indexOf(e + "-"); while ((t = t.parentNode) && 1 === t.nodeType);
                            return !1;
                        };
                    }),
                    target: function(t) {
                        var n = e.location && e.location.hash;
                        return n && n.slice(1) === t.id;
                    },
                    root: function(e) {
                        return e === L;
                    },
                    focus: function(e) {
                        return e === O.activeElement && (!O.hasFocus || O.hasFocus()) && !!(e.type || e.href || ~e.tabIndex);
                    },
                    enabled: function(e) {
                        return e.disabled === !1;
                    },
                    disabled: function(e) {
                        return e.disabled === !0;
                    },
                    checked: function(e) {
                        var t = e.nodeName.toLowerCase();
                        return "input" === t && !!e.checked || "option" === t && !!e.selected;
                    },
                    selected: function(e) {
                        return e.parentNode && e.parentNode.selectedIndex, e.selected === !0;
                    },
                    empty: function(e) {
                        for (e = e.firstChild; e; e = e.nextSibling) if (e.nodeType < 6) return !1;
                        return !0;
                    },
                    parent: function(e) {
                        return !T.pseudos.empty(e);
                    },
                    header: function(e) {
                        return ge.test(e.nodeName);
                    },
                    input: function(e) {
                        return me.test(e.nodeName);
                    },
                    button: function(e) {
                        var t = e.nodeName.toLowerCase();
                        return "input" === t && "button" === e.type || "button" === t;
                    },
                    text: function(e) {
                        var t;
                        return "input" === e.nodeName.toLowerCase() && "text" === e.type && (null == (t = e.getAttribute("type")) || "text" === t.toLowerCase());
                    },
                    first: l(function() {
                        return [ 0 ];
                    }),
                    last: l(function(e, t) {
                        return [ t - 1 ];
                    }),
                    eq: l(function(e, t, n) {
                        return [ 0 > n ? n + t : n ];
                    }),
                    even: l(function(e, t) {
                        for (var n = 0; t > n; n += 2) e.push(n);
                        return e;
                    }),
                    odd: l(function(e, t) {
                        for (var n = 1; t > n; n += 2) e.push(n);
                        return e;
                    }),
                    lt: l(function(e, t, n) {
                        for (var r = 0 > n ? n + t : n; --r >= 0; ) e.push(r);
                        return e;
                    }),
                    gt: l(function(e, t, n) {
                        for (var r = 0 > n ? n + t : n; ++r < t; ) e.push(r);
                        return e;
                    })
                }
            }, T.pseudos.nth = T.pseudos.eq;
            for (x in {
                radio: !0,
                checkbox: !0,
                file: !0,
                password: !0,
                image: !0
            }) T.pseudos[x] = s(x);
            for (x in {
                submit: !0,
                reset: !0
            }) T.pseudos[x] = u(x);
            return d.prototype = T.filters = T.pseudos, T.setFilters = new d(), k = t.tokenize = function(e, n) {
                var r, i, o, a, s, u, l, c = U[e + " "];
                if (c) return n ? 0 : c.slice(0);
                for (s = e, u = [], l = T.preFilter; s; ) {
                    r && !(i = le.exec(s)) || (i && (s = s.slice(i[0].length) || s), u.push(o = [])), 
                    r = !1, (i = ce.exec(s)) && (r = i.shift(), o.push({
                        value: r,
                        type: i[0].replace(ue, " ")
                    }), s = s.slice(r.length));
                    for (a in T.filter) !(i = he[a].exec(s)) || l[a] && !(i = l[a](i)) || (r = i.shift(), 
                    o.push({
                        value: r,
                        type: a,
                        matches: i
                    }), s = s.slice(r.length));
                    if (!r) break;
                }
                return n ? s.length : s ? t.error(e) : U(e, u).slice(0);
            }, E = t.compile = function(e, t) {
                var n, r = [], i = [], o = X[e + " "];
                if (!o) {
                    for (t || (t = k(e)), n = t.length; n--; ) o = v(t[n]), o[R] ? r.push(o) : i.push(o);
                    o = X(e, b(i, r)), o.selector = e;
                }
                return o;
            }, M = t.select = function(e, t, n, r) {
                var i, o, a, s, u, l = "function" == typeof e && e, d = !r && k(e = l.selector || e);
                if (n = n || [], 1 === d.length) {
                    if (o = d[0] = d[0].slice(0), o.length > 2 && "ID" === (a = o[0]).type && w.getById && 9 === t.nodeType && _ && T.relative[o[1].type]) {
                        if (t = (T.find.ID(a.matches[0].replace(xe, we), t) || [])[0], !t) return n;
                        l && (t = t.parentNode), e = e.slice(o.shift().value.length);
                    }
                    for (i = he.needsContext.test(e) ? 0 : o.length; i-- && (a = o[i], !T.relative[s = a.type]); ) if ((u = T.find[s]) && (r = u(a.matches[0].replace(xe, we), ve.test(o[0].type) && c(t.parentNode) || t))) {
                        if (o.splice(i, 1), e = r.length && f(o), !e) return Z.apply(n, r), n;
                        break;
                    }
                }
                return (l || E(e, d))(r, t, !_, n, !t || ve.test(e) && c(t.parentNode) || t), n;
            }, w.sortStable = R.split("").sort(J).join("") === R, w.detectDuplicates = !!A, 
            H(), w.sortDetached = i(function(e) {
                return 1 & e.compareDocumentPosition(O.createElement("div"));
            }), i(function(e) {
                return e.innerHTML = "<a href='#'></a>", "#" === e.firstChild.getAttribute("href");
            }) || o("type|href|height|width", function(e, t, n) {
                return n ? void 0 : e.getAttribute(t, "type" === t.toLowerCase() ? 1 : 2);
            }), w.attributes && i(function(e) {
                return e.innerHTML = "<input/>", e.firstChild.setAttribute("value", ""), "" === e.firstChild.getAttribute("value");
            }) || o("value", function(e, t, n) {
                return n || "input" !== e.nodeName.toLowerCase() ? void 0 : e.defaultValue;
            }), i(function(e) {
                return null == e.getAttribute("disabled");
            }) || o(ne, function(e, t, n) {
                var r;
                return n ? void 0 : e[t] === !0 ? t.toLowerCase() : (r = e.getAttributeNode(t)) && r.specified ? r.value : null;
            }), t;
        }(i);
        ve.find = Se, ve.expr = Se.selectors, ve.expr[":"] = ve.expr.pseudos, ve.uniqueSort = ve.unique = Se.uniqueSort, 
        ve.text = Se.getText, ve.isXMLDoc = Se.isXML, ve.contains = Se.contains;
        var Ce = function(e, t, n) {
            for (var r = [], i = void 0 !== n; (e = e[t]) && 9 !== e.nodeType; ) if (1 === e.nodeType) {
                if (i && ve(e).is(n)) break;
                r.push(e);
            }
            return r;
        }, ke = function(e, t) {
            for (var n = []; e; e = e.nextSibling) 1 === e.nodeType && e !== t && n.push(e);
            return n;
        }, Ee = ve.expr.match.needsContext, Me = /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/, Ne = /^.[^:#\[\.,]*$/;
        ve.filter = function(e, t, n) {
            var r = t[0];
            return n && (e = ":not(" + e + ")"), 1 === t.length && 1 === r.nodeType ? ve.find.matchesSelector(r, e) ? [ r ] : [] : ve.find.matches(e, ve.grep(t, function(e) {
                return 1 === e.nodeType;
            }));
        }, ve.fn.extend({
            find: function(e) {
                var t, n = [], r = this, i = r.length;
                if ("string" != typeof e) return this.pushStack(ve(e).filter(function() {
                    for (t = 0; i > t; t++) if (ve.contains(r[t], this)) return !0;
                }));
                for (t = 0; i > t; t++) ve.find(e, r[t], n);
                return n = this.pushStack(i > 1 ? ve.unique(n) : n), n.selector = this.selector ? this.selector + " " + e : e, 
                n;
            },
            filter: function(e) {
                return this.pushStack(s(this, e || [], !1));
            },
            not: function(e) {
                return this.pushStack(s(this, e || [], !0));
            },
            is: function(e) {
                return !!s(this, "string" == typeof e && Ee.test(e) ? ve(e) : e || [], !1).length;
            }
        });
        var De, Ae = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/, He = ve.fn.init = function(e, t, n) {
            var r, i;
            if (!e) return this;
            if (n = n || De, "string" == typeof e) {
                if (r = "<" === e.charAt(0) && ">" === e.charAt(e.length - 1) && e.length >= 3 ? [ null, e, null ] : Ae.exec(e), 
                !r || !r[1] && t) return !t || t.jquery ? (t || n).find(e) : this.constructor(t).find(e);
                if (r[1]) {
                    if (t = t instanceof ve ? t[0] : t, ve.merge(this, ve.parseHTML(r[1], t && t.nodeType ? t.ownerDocument || t : ue, !0)), 
                    Me.test(r[1]) && ve.isPlainObject(t)) for (r in t) ve.isFunction(this[r]) ? this[r](t[r]) : this.attr(r, t[r]);
                    return this;
                }
                if (i = ue.getElementById(r[2]), i && i.parentNode) {
                    if (i.id !== r[2]) return De.find(e);
                    this.length = 1, this[0] = i;
                }
                return this.context = ue, this.selector = e, this;
            }
            return e.nodeType ? (this.context = this[0] = e, this.length = 1, this) : ve.isFunction(e) ? "undefined" != typeof n.ready ? n.ready(e) : e(ve) : (void 0 !== e.selector && (this.selector = e.selector, 
            this.context = e.context), ve.makeArray(e, this));
        };
        He.prototype = ve.fn, De = ve(ue);
        var Oe = /^(?:parents|prev(?:Until|All))/, Le = {
            children: !0,
            contents: !0,
            next: !0,
            prev: !0
        };
        ve.fn.extend({
            has: function(e) {
                var t, n = ve(e, this), r = n.length;
                return this.filter(function() {
                    for (t = 0; r > t; t++) if (ve.contains(this, n[t])) return !0;
                });
            },
            closest: function(e, t) {
                for (var n, r = 0, i = this.length, o = [], a = Ee.test(e) || "string" != typeof e ? ve(e, t || this.context) : 0; i > r; r++) for (n = this[r]; n && n !== t; n = n.parentNode) if (n.nodeType < 11 && (a ? a.index(n) > -1 : 1 === n.nodeType && ve.find.matchesSelector(n, e))) {
                    o.push(n);
                    break;
                }
                return this.pushStack(o.length > 1 ? ve.uniqueSort(o) : o);
            },
            index: function(e) {
                return e ? "string" == typeof e ? ve.inArray(this[0], ve(e)) : ve.inArray(e.jquery ? e[0] : e, this) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
            },
            add: function(e, t) {
                return this.pushStack(ve.uniqueSort(ve.merge(this.get(), ve(e, t))));
            },
            addBack: function(e) {
                return this.add(null == e ? this.prevObject : this.prevObject.filter(e));
            }
        }), ve.each({
            parent: function(e) {
                var t = e.parentNode;
                return t && 11 !== t.nodeType ? t : null;
            },
            parents: function(e) {
                return Ce(e, "parentNode");
            },
            parentsUntil: function(e, t, n) {
                return Ce(e, "parentNode", n);
            },
            next: function(e) {
                return u(e, "nextSibling");
            },
            prev: function(e) {
                return u(e, "previousSibling");
            },
            nextAll: function(e) {
                return Ce(e, "nextSibling");
            },
            prevAll: function(e) {
                return Ce(e, "previousSibling");
            },
            nextUntil: function(e, t, n) {
                return Ce(e, "nextSibling", n);
            },
            prevUntil: function(e, t, n) {
                return Ce(e, "previousSibling", n);
            },
            siblings: function(e) {
                return ke((e.parentNode || {}).firstChild, e);
            },
            children: function(e) {
                return ke(e.firstChild);
            },
            contents: function(e) {
                return ve.nodeName(e, "iframe") ? e.contentDocument || e.contentWindow.document : ve.merge([], e.childNodes);
            }
        }, function(e, t) {
            ve.fn[e] = function(n, r) {
                var i = ve.map(this, t, n);
                return "Until" !== e.slice(-5) && (r = n), r && "string" == typeof r && (i = ve.filter(r, i)), 
                this.length > 1 && (Le[e] || (i = ve.uniqueSort(i)), Oe.test(e) && (i = i.reverse())), 
                this.pushStack(i);
            };
        });
        var _e = /\S+/g;
        ve.Callbacks = function(e) {
            e = "string" == typeof e ? l(e) : ve.extend({}, e);
            var t, n, r, i, o = [], a = [], s = -1, u = function() {
                for (i = e.once, r = t = !0; a.length; s = -1) for (n = a.shift(); ++s < o.length; ) o[s].apply(n[0], n[1]) === !1 && e.stopOnFalse && (s = o.length, 
                n = !1);
                e.memory || (n = !1), t = !1, i && (o = n ? [] : "");
            }, c = {
                add: function() {
                    return o && (n && !t && (s = o.length - 1, a.push(n)), function r(t) {
                        ve.each(t, function(t, n) {
                            ve.isFunction(n) ? e.unique && c.has(n) || o.push(n) : n && n.length && "string" !== ve.type(n) && r(n);
                        });
                    }(arguments), n && !t && u()), this;
                },
                remove: function() {
                    return ve.each(arguments, function(e, t) {
                        for (var n; (n = ve.inArray(t, o, n)) > -1; ) o.splice(n, 1), s >= n && s--;
                    }), this;
                },
                has: function(e) {
                    return e ? ve.inArray(e, o) > -1 : o.length > 0;
                },
                empty: function() {
                    return o && (o = []), this;
                },
                disable: function() {
                    return i = a = [], o = n = "", this;
                },
                disabled: function() {
                    return !o;
                },
                lock: function() {
                    return i = !0, n || c.disable(), this;
                },
                locked: function() {
                    return !!i;
                },
                fireWith: function(e, n) {
                    return i || (n = n || [], n = [ e, n.slice ? n.slice() : n ], a.push(n), t || u()), 
                    this;
                },
                fire: function() {
                    return c.fireWith(this, arguments), this;
                },
                fired: function() {
                    return !!r;
                }
            };
            return c;
        }, ve.extend({
            Deferred: function(e) {
                var t = [ [ "resolve", "done", ve.Callbacks("once memory"), "resolved" ], [ "reject", "fail", ve.Callbacks("once memory"), "rejected" ], [ "notify", "progress", ve.Callbacks("memory") ] ], n = "pending", r = {
                    state: function() {
                        return n;
                    },
                    always: function() {
                        return i.done(arguments).fail(arguments), this;
                    },
                    then: function() {
                        var e = arguments;
                        return ve.Deferred(function(n) {
                            ve.each(t, function(t, o) {
                                var a = ve.isFunction(e[t]) && e[t];
                                i[o[1]](function() {
                                    var e = a && a.apply(this, arguments);
                                    e && ve.isFunction(e.promise) ? e.promise().progress(n.notify).done(n.resolve).fail(n.reject) : n[o[0] + "With"](this === r ? n.promise() : this, a ? [ e ] : arguments);
                                });
                            }), e = null;
                        }).promise();
                    },
                    promise: function(e) {
                        return null != e ? ve.extend(e, r) : r;
                    }
                }, i = {};
                return r.pipe = r.then, ve.each(t, function(e, o) {
                    var a = o[2], s = o[3];
                    r[o[1]] = a.add, s && a.add(function() {
                        n = s;
                    }, t[1 ^ e][2].disable, t[2][2].lock), i[o[0]] = function() {
                        return i[o[0] + "With"](this === i ? r : this, arguments), this;
                    }, i[o[0] + "With"] = a.fireWith;
                }), r.promise(i), e && e.call(i, i), i;
            },
            when: function(e) {
                var t, n, r, i = 0, o = le.call(arguments), a = o.length, s = 1 !== a || e && ve.isFunction(e.promise) ? a : 0, u = 1 === s ? e : ve.Deferred(), l = function(e, n, r) {
                    return function(i) {
                        n[e] = this, r[e] = arguments.length > 1 ? le.call(arguments) : i, r === t ? u.notifyWith(n, r) : --s || u.resolveWith(n, r);
                    };
                };
                if (a > 1) for (t = new Array(a), n = new Array(a), r = new Array(a); a > i; i++) o[i] && ve.isFunction(o[i].promise) ? o[i].promise().progress(l(i, n, t)).done(l(i, r, o)).fail(u.reject) : --s;
                return s || u.resolveWith(r, o), u.promise();
            }
        });
        var je;
        ve.fn.ready = function(e) {
            return ve.ready.promise().done(e), this;
        }, ve.extend({
            isReady: !1,
            readyWait: 1,
            holdReady: function(e) {
                e ? ve.readyWait++ : ve.ready(!0);
            },
            ready: function(e) {
                (e === !0 ? --ve.readyWait : ve.isReady) || (ve.isReady = !0, e !== !0 && --ve.readyWait > 0 || (je.resolveWith(ue, [ ve ]), 
                ve.fn.triggerHandler && (ve(ue).triggerHandler("ready"), ve(ue).off("ready"))));
            }
        }), ve.ready.promise = function(e) {
            if (!je) if (je = ve.Deferred(), "complete" === ue.readyState || "loading" !== ue.readyState && !ue.documentElement.doScroll) i.setTimeout(ve.ready); else if (ue.addEventListener) ue.addEventListener("DOMContentLoaded", d), 
            i.addEventListener("load", d); else {
                ue.attachEvent("onreadystatechange", d), i.attachEvent("onload", d);
                var t = !1;
                try {
                    t = null == i.frameElement && ue.documentElement;
                } catch (n) {}
                t && t.doScroll && !function r() {
                    if (!ve.isReady) {
                        try {
                            t.doScroll("left");
                        } catch (e) {
                            return i.setTimeout(r, 50);
                        }
                        c(), ve.ready();
                    }
                }();
            }
            return je.promise(e);
        }, ve.ready.promise();
        var ze;
        for (ze in ve(ge)) break;
        ge.ownFirst = "0" === ze, ge.inlineBlockNeedsLayout = !1, ve(function() {
            var e, t, n, r;
            n = ue.getElementsByTagName("body")[0], n && n.style && (t = ue.createElement("div"), 
            r = ue.createElement("div"), r.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px", 
            n.appendChild(r).appendChild(t), "undefined" != typeof t.style.zoom && (t.style.cssText = "display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1", 
            ge.inlineBlockNeedsLayout = e = 3 === t.offsetWidth, e && (n.style.zoom = 1)), n.removeChild(r));
        }), function() {
            var e = ue.createElement("div");
            ge.deleteExpando = !0;
            try {
                delete e.test;
            } catch (t) {
                ge.deleteExpando = !1;
            }
            e = null;
        }();
        var Fe = function(e) {
            var t = ve.noData[(e.nodeName + " ").toLowerCase()], n = +e.nodeType || 1;
            return (1 === n || 9 === n) && (!t || t !== !0 && e.getAttribute("classid") === t);
        }, Pe = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, Re = /([A-Z])/g;
        ve.extend({
            cache: {},
            noData: {
                "applet ": !0,
                "embed ": !0,
                "object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
            },
            hasData: function(e) {
                return e = e.nodeType ? ve.cache[e[ve.expando]] : e[ve.expando], !!e && !p(e);
            },
            data: function(e, t, n) {
                return h(e, t, n);
            },
            removeData: function(e, t) {
                return m(e, t);
            },
            _data: function(e, t, n) {
                return h(e, t, n, !0);
            },
            _removeData: function(e, t) {
                return m(e, t, !0);
            }
        }), ve.fn.extend({
            data: function(e, t) {
                var n, r, i, o = this[0], a = o && o.attributes;
                if (void 0 === e) {
                    if (this.length && (i = ve.data(o), 1 === o.nodeType && !ve._data(o, "parsedAttrs"))) {
                        for (n = a.length; n--; ) a[n] && (r = a[n].name, 0 === r.indexOf("data-") && (r = ve.camelCase(r.slice(5)), 
                        f(o, r, i[r])));
                        ve._data(o, "parsedAttrs", !0);
                    }
                    return i;
                }
                return "object" == typeof e ? this.each(function() {
                    ve.data(this, e);
                }) : arguments.length > 1 ? this.each(function() {
                    ve.data(this, e, t);
                }) : o ? f(o, e, ve.data(o, e)) : void 0;
            },
            removeData: function(e) {
                return this.each(function() {
                    ve.removeData(this, e);
                });
            }
        }), ve.extend({
            queue: function(e, t, n) {
                var r;
                return e ? (t = (t || "fx") + "queue", r = ve._data(e, t), n && (!r || ve.isArray(n) ? r = ve._data(e, t, ve.makeArray(n)) : r.push(n)), 
                r || []) : void 0;
            },
            dequeue: function(e, t) {
                t = t || "fx";
                var n = ve.queue(e, t), r = n.length, i = n.shift(), o = ve._queueHooks(e, t), a = function() {
                    ve.dequeue(e, t);
                };
                "inprogress" === i && (i = n.shift(), r--), i && ("fx" === t && n.unshift("inprogress"), 
                delete o.stop, i.call(e, a, o)), !r && o && o.empty.fire();
            },
            _queueHooks: function(e, t) {
                var n = t + "queueHooks";
                return ve._data(e, n) || ve._data(e, n, {
                    empty: ve.Callbacks("once memory").add(function() {
                        ve._removeData(e, t + "queue"), ve._removeData(e, n);
                    })
                });
            }
        }), ve.fn.extend({
            queue: function(e, t) {
                var n = 2;
                return "string" != typeof e && (t = e, e = "fx", n--), arguments.length < n ? ve.queue(this[0], e) : void 0 === t ? this : this.each(function() {
                    var n = ve.queue(this, e, t);
                    ve._queueHooks(this, e), "fx" === e && "inprogress" !== n[0] && ve.dequeue(this, e);
                });
            },
            dequeue: function(e) {
                return this.each(function() {
                    ve.dequeue(this, e);
                });
            },
            clearQueue: function(e) {
                return this.queue(e || "fx", []);
            },
            promise: function(e, t) {
                var n, r = 1, i = ve.Deferred(), o = this, a = this.length, s = function() {
                    --r || i.resolveWith(o, [ o ]);
                };
                for ("string" != typeof e && (t = e, e = void 0), e = e || "fx"; a--; ) n = ve._data(o[a], e + "queueHooks"), 
                n && n.empty && (r++, n.empty.add(s));
                return s(), i.promise(t);
            }
        }), function() {
            var e;
            ge.shrinkWrapBlocks = function() {
                if (null != e) return e;
                e = !1;
                var t, n, r;
                return n = ue.getElementsByTagName("body")[0], n && n.style ? (t = ue.createElement("div"), 
                r = ue.createElement("div"), r.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px", 
                n.appendChild(r).appendChild(t), "undefined" != typeof t.style.zoom && (t.style.cssText = "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1", 
                t.appendChild(ue.createElement("div")).style.width = "5px", e = 3 !== t.offsetWidth), 
                n.removeChild(r), e) : void 0;
            };
        }();
        var qe = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source, We = new RegExp("^(?:([+-])=|)(" + qe + ")([a-z%]*)$", "i"), Ie = [ "Top", "Right", "Bottom", "Left" ], Be = function(e, t) {
            return e = t || e, "none" === ve.css(e, "display") || !ve.contains(e.ownerDocument, e);
        }, $e = function(e, t, n, r, i, o, a) {
            var s = 0, u = e.length, l = null == n;
            if ("object" === ve.type(n)) {
                i = !0;
                for (s in n) $e(e, t, s, n[s], !0, o, a);
            } else if (void 0 !== r && (i = !0, ve.isFunction(r) || (a = !0), l && (a ? (t.call(e, r), 
            t = null) : (l = t, t = function(e, t, n) {
                return l.call(ve(e), n);
            })), t)) for (;u > s; s++) t(e[s], n, a ? r : r.call(e[s], s, t(e[s], n)));
            return i ? e : l ? t.call(e) : u ? t(e[0], n) : o;
        }, Ue = /^(?:checkbox|radio)$/i, $ = /<([\w:-]+)/, Xe = /^$|\/(?:java|ecma)script/i, Je = /^\s+/, Ve = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|dialog|figcaption|figure|footer|header|hgroup|main|mark|meter|nav|output|picture|progress|section|summary|template|time|video";
        !function() {
            var e = ue.createElement("div"), t = ue.createDocumentFragment(), n = ue.createElement("input");
            e.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>", 
            ge.leadingWhitespace = 3 === e.firstChild.nodeType, ge.tbody = !e.getElementsByTagName("tbody").length, 
            ge.htmlSerialize = !!e.getElementsByTagName("link").length, ge.html5Clone = "<:nav></:nav>" !== ue.createElement("nav").cloneNode(!0).outerHTML, 
            n.type = "checkbox", n.checked = !0, t.appendChild(n), ge.appendChecked = n.checked, 
            e.innerHTML = "<textarea>x</textarea>", ge.noCloneChecked = !!e.cloneNode(!0).lastChild.defaultValue, 
            t.appendChild(e), n = ue.createElement("input"), n.setAttribute("type", "radio"), 
            n.setAttribute("checked", "checked"), n.setAttribute("name", "t"), e.appendChild(n), 
            ge.checkClone = e.cloneNode(!0).cloneNode(!0).lastChild.checked, ge.noCloneEvent = !!e.addEventListener, 
            e[ve.expando] = 1, ge.attributes = !e.getAttribute(ve.expando);
        }();
        var Ye = {
            option: [ 1, "<select multiple='multiple'>", "</select>" ],
            legend: [ 1, "<fieldset>", "</fieldset>" ],
            area: [ 1, "<map>", "</map>" ],
            param: [ 1, "<object>", "</object>" ],
            thead: [ 1, "<table>", "</table>" ],
            tr: [ 2, "<table><tbody>", "</tbody></table>" ],
            col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
            td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
            _default: ge.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>" ]
        };
        Ye.optgroup = Ye.option, Ye.tbody = Ye.tfoot = Ye.colgroup = Ye.caption = Ye.thead, 
        Ye.th = Ye.td;
        var Ge = /<|&#?\w+;/, Qe = /<tbody/i;
        !function() {
            var e, t, n = ue.createElement("div");
            for (e in {
                submit: !0,
                change: !0,
                focusin: !0
            }) t = "on" + e, (ge[e] = t in i) || (n.setAttribute(t, "t"), ge[e] = n.attributes[t].expando === !1);
            n = null;
        }();
        var Ke = /^(?:input|select|textarea)$/i, Ze = /^key/, et = /^(?:mouse|pointer|contextmenu|drag|drop)|click/, tt = /^(?:focusinfocus|focusoutblur)$/, nt = /^([^.]*)(?:\.(.+)|)/;
        ve.event = {
            global: {},
            add: function(e, t, n, r, i) {
                var o, a, s, u, l, c, d, f, p, h, m, g = ve._data(e);
                if (g) {
                    for (n.handler && (u = n, n = u.handler, i = u.selector), n.guid || (n.guid = ve.guid++), 
                    (a = g.events) || (a = g.events = {}), (c = g.handle) || (c = g.handle = function(e) {
                        return "undefined" == typeof ve || e && ve.event.triggered === e.type ? void 0 : ve.event.dispatch.apply(c.elem, arguments);
                    }, c.elem = e), t = (t || "").match(_e) || [ "" ], s = t.length; s--; ) o = nt.exec(t[s]) || [], 
                    p = m = o[1], h = (o[2] || "").split(".").sort(), p && (l = ve.event.special[p] || {}, 
                    p = (i ? l.delegateType : l.bindType) || p, l = ve.event.special[p] || {}, d = ve.extend({
                        type: p,
                        origType: m,
                        data: r,
                        handler: n,
                        guid: n.guid,
                        selector: i,
                        needsContext: i && ve.expr.match.needsContext.test(i),
                        namespace: h.join(".")
                    }, u), (f = a[p]) || (f = a[p] = [], f.delegateCount = 0, l.setup && l.setup.call(e, r, h, c) !== !1 || (e.addEventListener ? e.addEventListener(p, c, !1) : e.attachEvent && e.attachEvent("on" + p, c))), 
                    l.add && (l.add.call(e, d), d.handler.guid || (d.handler.guid = n.guid)), i ? f.splice(f.delegateCount++, 0, d) : f.push(d), 
                    ve.event.global[p] = !0);
                    e = null;
                }
            },
            remove: function(e, t, n, r, i) {
                var o, a, s, u, l, c, d, f, p, h, m, g = ve.hasData(e) && ve._data(e);
                if (g && (c = g.events)) {
                    for (t = (t || "").match(_e) || [ "" ], l = t.length; l--; ) if (s = nt.exec(t[l]) || [], 
                    p = m = s[1], h = (s[2] || "").split(".").sort(), p) {
                        for (d = ve.event.special[p] || {}, p = (r ? d.delegateType : d.bindType) || p, 
                        f = c[p] || [], s = s[2] && new RegExp("(^|\\.)" + h.join("\\.(?:.*\\.|)") + "(\\.|$)"), 
                        u = o = f.length; o--; ) a = f[o], !i && m !== a.origType || n && n.guid !== a.guid || s && !s.test(a.namespace) || r && r !== a.selector && ("**" !== r || !a.selector) || (f.splice(o, 1), 
                        a.selector && f.delegateCount--, d.remove && d.remove.call(e, a));
                        u && !f.length && (d.teardown && d.teardown.call(e, h, g.handle) !== !1 || ve.removeEvent(e, p, g.handle), 
                        delete c[p]);
                    } else for (p in c) ve.event.remove(e, p + t[l], n, r, !0);
                    ve.isEmptyObject(c) && (delete g.handle, ve._removeData(e, "events"));
                }
            },
            trigger: function(e, t, n, r) {
                var o, a, s, u, l, c, d, f = [ n || ue ], p = me.call(e, "type") ? e.type : e, h = me.call(e, "namespace") ? e.namespace.split(".") : [];
                if (s = c = n = n || ue, 3 !== n.nodeType && 8 !== n.nodeType && !tt.test(p + ve.event.triggered) && (p.indexOf(".") > -1 && (h = p.split("."), 
                p = h.shift(), h.sort()), a = p.indexOf(":") < 0 && "on" + p, e = e[ve.expando] ? e : new ve.Event(p, "object" == typeof e && e), 
                e.isTrigger = r ? 2 : 3, e.namespace = h.join("."), e.rnamespace = e.namespace ? new RegExp("(^|\\.)" + h.join("\\.(?:.*\\.|)") + "(\\.|$)") : null, 
                e.result = void 0, e.target || (e.target = n), t = null == t ? [ e ] : ve.makeArray(t, [ e ]), 
                l = ve.event.special[p] || {}, r || !l.trigger || l.trigger.apply(n, t) !== !1)) {
                    if (!r && !l.noBubble && !ve.isWindow(n)) {
                        for (u = l.delegateType || p, tt.test(u + p) || (s = s.parentNode); s; s = s.parentNode) f.push(s), 
                        c = s;
                        c === (n.ownerDocument || ue) && f.push(c.defaultView || c.parentWindow || i);
                    }
                    for (d = 0; (s = f[d++]) && !e.isPropagationStopped(); ) e.type = d > 1 ? u : l.bindType || p, 
                    o = (ve._data(s, "events") || {})[e.type] && ve._data(s, "handle"), o && o.apply(s, t), 
                    o = a && s[a], o && o.apply && Fe(s) && (e.result = o.apply(s, t), e.result === !1 && e.preventDefault());
                    if (e.type = p, !r && !e.isDefaultPrevented() && (!l._default || l._default.apply(f.pop(), t) === !1) && Fe(n) && a && n[p] && !ve.isWindow(n)) {
                        c = n[a], c && (n[a] = null), ve.event.triggered = p;
                        try {
                            n[p]();
                        } catch (m) {}
                        ve.event.triggered = void 0, c && (n[a] = c);
                    }
                    return e.result;
                }
            },
            dispatch: function(e) {
                e = ve.event.fix(e);
                var t, n, r, i, o, a = [], s = le.call(arguments), u = (ve._data(this, "events") || {})[e.type] || [], l = ve.event.special[e.type] || {};
                if (s[0] = e, e.delegateTarget = this, !l.preDispatch || l.preDispatch.call(this, e) !== !1) {
                    for (a = ve.event.handlers.call(this, e, u), t = 0; (i = a[t++]) && !e.isPropagationStopped(); ) for (e.currentTarget = i.elem, 
                    n = 0; (o = i.handlers[n++]) && !e.isImmediatePropagationStopped(); ) e.rnamespace && !e.rnamespace.test(o.namespace) || (e.handleObj = o, 
                    e.data = o.data, r = ((ve.event.special[o.origType] || {}).handle || o.handler).apply(i.elem, s), 
                    void 0 !== r && (e.result = r) === !1 && (e.preventDefault(), e.stopPropagation()));
                    return l.postDispatch && l.postDispatch.call(this, e), e.result;
                }
            },
            handlers: function(e, t) {
                var n, r, i, o, a = [], s = t.delegateCount, u = e.target;
                if (s && u.nodeType && ("click" !== e.type || isNaN(e.button) || e.button < 1)) for (;u != this; u = u.parentNode || this) if (1 === u.nodeType && (u.disabled !== !0 || "click" !== e.type)) {
                    for (r = [], n = 0; s > n; n++) o = t[n], i = o.selector + " ", void 0 === r[i] && (r[i] = o.needsContext ? ve(i, this).index(u) > -1 : ve.find(i, this, null, [ u ]).length), 
                    r[i] && r.push(o);
                    r.length && a.push({
                        elem: u,
                        handlers: r
                    });
                }
                return s < t.length && a.push({
                    elem: this,
                    handlers: t.slice(s)
                }), a;
            },
            fix: function(e) {
                if (e[ve.expando]) return e;
                var t, n, r, i = e.type, o = e, a = this.fixHooks[i];
                for (a || (this.fixHooks[i] = a = et.test(i) ? this.mouseHooks : Ze.test(i) ? this.keyHooks : {}), 
                r = a.props ? this.props.concat(a.props) : this.props, e = new ve.Event(o), t = r.length; t--; ) n = r[t], 
                e[n] = o[n];
                return e.target || (e.target = o.srcElement || ue), 3 === e.target.nodeType && (e.target = e.target.parentNode), 
                e.metaKey = !!e.metaKey, a.filter ? a.filter(e, o) : e;
            },
            props: "altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
            fixHooks: {},
            keyHooks: {
                props: "char charCode key keyCode".split(" "),
                filter: function(e, t) {
                    return null == e.which && (e.which = null != t.charCode ? t.charCode : t.keyCode), 
                    e;
                }
            },
            mouseHooks: {
                props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
                filter: function(e, t) {
                    var n, r, i, o = t.button, a = t.fromElement;
                    return null == e.pageX && null != t.clientX && (r = e.target.ownerDocument || ue, 
                    i = r.documentElement, n = r.body, e.pageX = t.clientX + (i && i.scrollLeft || n && n.scrollLeft || 0) - (i && i.clientLeft || n && n.clientLeft || 0), 
                    e.pageY = t.clientY + (i && i.scrollTop || n && n.scrollTop || 0) - (i && i.clientTop || n && n.clientTop || 0)), 
                    !e.relatedTarget && a && (e.relatedTarget = a === e.target ? t.toElement : a), e.which || void 0 === o || (e.which = 1 & o ? 1 : 2 & o ? 3 : 4 & o ? 2 : 0), 
                    e;
                }
            },
            special: {
                load: {
                    noBubble: !0
                },
                focus: {
                    trigger: function() {
                        if (this !== C() && this.focus) try {
                            return this.focus(), !1;
                        } catch (e) {}
                    },
                    delegateType: "focusin"
                },
                blur: {
                    trigger: function() {
                        return this === C() && this.blur ? (this.blur(), !1) : void 0;
                    },
                    delegateType: "focusout"
                },
                click: {
                    trigger: function() {
                        return ve.nodeName(this, "input") && "checkbox" === this.type && this.click ? (this.click(), 
                        !1) : void 0;
                    },
                    _default: function(e) {
                        return ve.nodeName(e.target, "a");
                    }
                },
                beforeunload: {
                    postDispatch: function(e) {
                        void 0 !== e.result && e.originalEvent && (e.originalEvent.returnValue = e.result);
                    }
                }
            },
            simulate: function(e, t, n) {
                var r = ve.extend(new ve.Event(), n, {
                    type: e,
                    isSimulated: !0
                });
                ve.event.trigger(r, null, t), r.isDefaultPrevented() && n.preventDefault();
            }
        }, ve.removeEvent = ue.removeEventListener ? function(e, t, n) {
            e.removeEventListener && e.removeEventListener(t, n);
        } : function(e, t, n) {
            var r = "on" + t;
            e.detachEvent && ("undefined" == typeof e[r] && (e[r] = null), e.detachEvent(r, n));
        }, ve.Event = function(e, t) {
            return this instanceof ve.Event ? (e && e.type ? (this.originalEvent = e, this.type = e.type, 
            this.isDefaultPrevented = e.defaultPrevented || void 0 === e.defaultPrevented && e.returnValue === !1 ? T : S) : this.type = e, 
            t && ve.extend(this, t), this.timeStamp = e && e.timeStamp || ve.now(), void (this[ve.expando] = !0)) : new ve.Event(e, t);
        }, ve.Event.prototype = {
            constructor: ve.Event,
            isDefaultPrevented: S,
            isPropagationStopped: S,
            isImmediatePropagationStopped: S,
            preventDefault: function() {
                var e = this.originalEvent;
                this.isDefaultPrevented = T, e && (e.preventDefault ? e.preventDefault() : e.returnValue = !1);
            },
            stopPropagation: function() {
                var e = this.originalEvent;
                this.isPropagationStopped = T, e && !this.isSimulated && (e.stopPropagation && e.stopPropagation(), 
                e.cancelBubble = !0);
            },
            stopImmediatePropagation: function() {
                var e = this.originalEvent;
                this.isImmediatePropagationStopped = T, e && e.stopImmediatePropagation && e.stopImmediatePropagation(), 
                this.stopPropagation();
            }
        }, ve.each({
            mouseenter: "mouseover",
            mouseleave: "mouseout",
            pointerenter: "pointerover",
            pointerleave: "pointerout"
        }, function(e, t) {
            ve.event.special[e] = {
                delegateType: t,
                bindType: t,
                handle: function(e) {
                    var n, r = this, i = e.relatedTarget, o = e.handleObj;
                    return i && (i === r || ve.contains(r, i)) || (e.type = o.origType, n = o.handler.apply(this, arguments), 
                    e.type = t), n;
                }
            };
        }), ge.submit || (ve.event.special.submit = {
            setup: function() {
                return !ve.nodeName(this, "form") && void ve.event.add(this, "click._submit keypress._submit", function(e) {
                    var t = e.target, n = ve.nodeName(t, "input") || ve.nodeName(t, "button") ? ve.prop(t, "form") : void 0;
                    n && !ve._data(n, "submit") && (ve.event.add(n, "submit._submit", function(e) {
                        e._submitBubble = !0;
                    }), ve._data(n, "submit", !0));
                });
            },
            postDispatch: function(e) {
                e._submitBubble && (delete e._submitBubble, this.parentNode && !e.isTrigger && ve.event.simulate("submit", this.parentNode, e));
            },
            teardown: function() {
                return !ve.nodeName(this, "form") && void ve.event.remove(this, "._submit");
            }
        }), ge.change || (ve.event.special.change = {
            setup: function() {
                return Ke.test(this.nodeName) ? ("checkbox" !== this.type && "radio" !== this.type || (ve.event.add(this, "propertychange._change", function(e) {
                    "checked" === e.originalEvent.propertyName && (this._justChanged = !0);
                }), ve.event.add(this, "click._change", function(e) {
                    this._justChanged && !e.isTrigger && (this._justChanged = !1), ve.event.simulate("change", this, e);
                })), !1) : void ve.event.add(this, "beforeactivate._change", function(e) {
                    var t = e.target;
                    Ke.test(t.nodeName) && !ve._data(t, "change") && (ve.event.add(t, "change._change", function(e) {
                        !this.parentNode || e.isSimulated || e.isTrigger || ve.event.simulate("change", this.parentNode, e);
                    }), ve._data(t, "change", !0));
                });
            },
            handle: function(e) {
                var t = e.target;
                return this !== t || e.isSimulated || e.isTrigger || "radio" !== t.type && "checkbox" !== t.type ? e.handleObj.handler.apply(this, arguments) : void 0;
            },
            teardown: function() {
                return ve.event.remove(this, "._change"), !Ke.test(this.nodeName);
            }
        }), ge.focusin || ve.each({
            focus: "focusin",
            blur: "focusout"
        }, function(e, t) {
            var n = function(e) {
                ve.event.simulate(t, e.target, ve.event.fix(e));
            };
            ve.event.special[t] = {
                setup: function() {
                    var r = this.ownerDocument || this, i = ve._data(r, t);
                    i || r.addEventListener(e, n, !0), ve._data(r, t, (i || 0) + 1);
                },
                teardown: function() {
                    var r = this.ownerDocument || this, i = ve._data(r, t) - 1;
                    i ? ve._data(r, t, i) : (r.removeEventListener(e, n, !0), ve._removeData(r, t));
                }
            };
        }), ve.fn.extend({
            on: function(e, t, n, r) {
                return k(this, e, t, n, r);
            },
            one: function(e, t, n, r) {
                return k(this, e, t, n, r, 1);
            },
            off: function(e, t, n) {
                var r, i;
                if (e && e.preventDefault && e.handleObj) return r = e.handleObj, ve(e.delegateTarget).off(r.namespace ? r.origType + "." + r.namespace : r.origType, r.selector, r.handler), 
                this;
                if ("object" == typeof e) {
                    for (i in e) this.off(i, t, e[i]);
                    return this;
                }
                return t !== !1 && "function" != typeof t || (n = t, t = void 0), n === !1 && (n = S), 
                this.each(function() {
                    ve.event.remove(this, e, n, t);
                });
            },
            trigger: function(e, t) {
                return this.each(function() {
                    ve.event.trigger(e, t, this);
                });
            },
            triggerHandler: function(e, t) {
                var n = this[0];
                return n ? ve.event.trigger(e, t, n, !0) : void 0;
            }
        });
        var rt = / jQuery\d+="(?:null|\d+)"/g, it = new RegExp("<(?:" + Ve + ")[\\s/>]", "i"), ot = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi, at = /<script|<style|<link/i, st = /checked\s*(?:[^=]|=\s*.checked.)/i, ut = /^true\/(.*)/, lt = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g, ct = y(ue), dt = ct.appendChild(ue.createElement("div"));
        ve.extend({
            htmlPrefilter: function(e) {
                return e.replace(ot, "<$1></$2>");
            },
            clone: function(e, t, n) {
                var r, i, o, a, s, u = ve.contains(e.ownerDocument, e);
                if (ge.html5Clone || ve.isXMLDoc(e) || !it.test("<" + e.nodeName + ">") ? o = e.cloneNode(!0) : (dt.innerHTML = e.outerHTML, 
                dt.removeChild(o = dt.firstChild)), !(ge.noCloneEvent && ge.noCloneChecked || 1 !== e.nodeType && 11 !== e.nodeType || ve.isXMLDoc(e))) for (r = v(o), 
                s = v(e), a = 0; null != (i = s[a]); ++a) r[a] && A(i, r[a]);
                if (t) if (n) for (s = s || v(e), r = r || v(o), a = 0; null != (i = s[a]); a++) D(i, r[a]); else D(e, o);
                return r = v(o, "script"), r.length > 0 && b(r, !u && v(e, "script")), r = s = i = null, 
                o;
            },
            cleanData: function(e, t) {
                for (var n, r, i, o, a = 0, s = ve.expando, u = ve.cache, l = ge.attributes, c = ve.event.special; null != (n = e[a]); a++) if ((t || Fe(n)) && (i = n[s], 
                o = i && u[i])) {
                    if (o.events) for (r in o.events) c[r] ? ve.event.remove(n, r) : ve.removeEvent(n, r, o.handle);
                    u[i] && (delete u[i], l || "undefined" == typeof n.removeAttribute ? n[s] = void 0 : n.removeAttribute(s), 
                    se.push(i));
                }
            }
        }), ve.fn.extend({
            domManip: H,
            detach: function(e) {
                return O(this, e, !0);
            },
            remove: function(e) {
                return O(this, e);
            },
            text: function(e) {
                return $e(this, function(e) {
                    return void 0 === e ? ve.text(this) : this.empty().append((this[0] && this[0].ownerDocument || ue).createTextNode(e));
                }, null, e, arguments.length);
            },
            append: function() {
                return H(this, arguments, function(e) {
                    if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
                        var t = E(this, e);
                        t.appendChild(e);
                    }
                });
            },
            prepend: function() {
                return H(this, arguments, function(e) {
                    if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
                        var t = E(this, e);
                        t.insertBefore(e, t.firstChild);
                    }
                });
            },
            before: function() {
                return H(this, arguments, function(e) {
                    this.parentNode && this.parentNode.insertBefore(e, this);
                });
            },
            after: function() {
                return H(this, arguments, function(e) {
                    this.parentNode && this.parentNode.insertBefore(e, this.nextSibling);
                });
            },
            empty: function() {
                for (var e, t = 0; null != (e = this[t]); t++) {
                    for (1 === e.nodeType && ve.cleanData(v(e, !1)); e.firstChild; ) e.removeChild(e.firstChild);
                    e.options && ve.nodeName(e, "select") && (e.options.length = 0);
                }
                return this;
            },
            clone: function(e, t) {
                return e = null != e && e, t = null == t ? e : t, this.map(function() {
                    return ve.clone(this, e, t);
                });
            },
            html: function(e) {
                return $e(this, function(e) {
                    var t = this[0] || {}, n = 0, r = this.length;
                    if (void 0 === e) return 1 === t.nodeType ? t.innerHTML.replace(rt, "") : void 0;
                    if ("string" == typeof e && !at.test(e) && (ge.htmlSerialize || !it.test(e)) && (ge.leadingWhitespace || !Je.test(e)) && !Ye[($.exec(e) || [ "", "" ])[1].toLowerCase()]) {
                        e = ve.htmlPrefilter(e);
                        try {
                            for (;r > n; n++) t = this[n] || {}, 1 === t.nodeType && (ve.cleanData(v(t, !1)), 
                            t.innerHTML = e);
                            t = 0;
                        } catch (i) {}
                    }
                    t && this.empty().append(e);
                }, null, e, arguments.length);
            },
            replaceWith: function() {
                var e = [];
                return H(this, arguments, function(t) {
                    var n = this.parentNode;
                    ve.inArray(this, e) < 0 && (ve.cleanData(v(this)), n && n.replaceChild(t, this));
                }, e);
            }
        }), ve.each({
            appendTo: "append",
            prependTo: "prepend",
            insertBefore: "before",
            insertAfter: "after",
            replaceAll: "replaceWith"
        }, function(e, t) {
            ve.fn[e] = function(e) {
                for (var n, r = 0, i = [], o = ve(e), a = o.length - 1; a >= r; r++) n = r === a ? this : this.clone(!0), 
                ve(o[r])[t](n), de.apply(i, n.get());
                return this.pushStack(i);
            };
        });
        var ft, pt = {
            HTML: "block",
            BODY: "block"
        }, ht = /^margin/, mt = new RegExp("^(" + qe + ")(?!px)[a-z%]+$", "i"), gt = function(e, t, n, r) {
            var i, o, a = {};
            for (o in t) a[o] = e.style[o], e.style[o] = t[o];
            i = n.apply(e, r || []);
            for (o in t) e.style[o] = a[o];
            return i;
        }, yt = ue.documentElement;
        !function() {
            function e() {
                var e, c, d = ue.documentElement;
                d.appendChild(u), l.style.cssText = "-webkit-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%", 
                t = r = s = !1, n = a = !0, i.getComputedStyle && (c = i.getComputedStyle(l), t = "1%" !== (c || {}).top, 
                s = "2px" === (c || {}).marginLeft, r = "4px" === (c || {
                    width: "4px"
                }).width, l.style.marginRight = "50%", n = "4px" === (c || {
                    marginRight: "4px"
                }).marginRight, e = l.appendChild(ue.createElement("div")), e.style.cssText = l.style.cssText = "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0", 
                e.style.marginRight = e.style.width = "0", l.style.width = "1px", a = !parseFloat((i.getComputedStyle(e) || {}).marginRight), 
                l.removeChild(e)), l.style.display = "none", o = 0 === l.getClientRects().length, 
                o && (l.style.display = "", l.innerHTML = "<table><tr><td></td><td>t</td></tr></table>", 
                e = l.getElementsByTagName("td"), e[0].style.cssText = "margin:0;border:0;padding:0;display:none", 
                o = 0 === e[0].offsetHeight, o && (e[0].style.display = "", e[1].style.display = "none", 
                o = 0 === e[0].offsetHeight)), d.removeChild(u);
            }
            var t, n, r, o, a, s, u = ue.createElement("div"), l = ue.createElement("div");
            l.style && (l.style.cssText = "float:left;opacity:.5", ge.opacity = "0.5" === l.style.opacity, 
            ge.cssFloat = !!l.style.cssFloat, l.style.backgroundClip = "content-box", l.cloneNode(!0).style.backgroundClip = "", 
            ge.clearCloneStyle = "content-box" === l.style.backgroundClip, u = ue.createElement("div"), 
            u.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute", 
            l.innerHTML = "", u.appendChild(l), ge.boxSizing = "" === l.style.boxSizing || "" === l.style.MozBoxSizing || "" === l.style.WebkitBoxSizing, 
            ve.extend(ge, {
                reliableHiddenOffsets: function() {
                    return null == t && e(), o;
                },
                boxSizingReliable: function() {
                    return null == t && e(), r;
                },
                pixelMarginRight: function() {
                    return null == t && e(), n;
                },
                pixelPosition: function() {
                    return null == t && e(), t;
                },
                reliableMarginRight: function() {
                    return null == t && e(), a;
                },
                reliableMarginLeft: function() {
                    return null == t && e(), s;
                }
            }));
        }();
        var vt, bt, xt = /^(top|right|bottom|left)$/;
        i.getComputedStyle ? (vt = function(e) {
            var t = e.ownerDocument.defaultView;
            return t && t.opener || (t = i), t.getComputedStyle(e);
        }, bt = function(e, t, n) {
            var r, i, o, a, s = e.style;
            return n = n || vt(e), a = n ? n.getPropertyValue(t) || n[t] : void 0, "" !== a && void 0 !== a || ve.contains(e.ownerDocument, e) || (a = ve.style(e, t)), 
            n && !ge.pixelMarginRight() && mt.test(a) && ht.test(t) && (r = s.width, i = s.minWidth, 
            o = s.maxWidth, s.minWidth = s.maxWidth = s.width = a, a = n.width, s.width = r, 
            s.minWidth = i, s.maxWidth = o), void 0 === a ? a : a + "";
        }) : yt.currentStyle && (vt = function(e) {
            return e.currentStyle;
        }, bt = function(e, t, n) {
            var r, i, o, a, s = e.style;
            return n = n || vt(e), a = n ? n[t] : void 0, null == a && s && s[t] && (a = s[t]), 
            mt.test(a) && !xt.test(t) && (r = s.left, i = e.runtimeStyle, o = i && i.left, o && (i.left = e.currentStyle.left), 
            s.left = "fontSize" === t ? "1em" : a, a = s.pixelLeft + "px", s.left = r, o && (i.left = o)), 
            void 0 === a ? a : a + "" || "auto";
        });
        var wt = /alpha\([^)]*\)/i, Tt = /opacity\s*=\s*([^)]*)/i, St = /^(none|table(?!-c[ea]).+)/, Ct = new RegExp("^(" + qe + ")(.*)$", "i"), kt = {
            position: "absolute",
            visibility: "hidden",
            display: "block"
        }, Et = {
            letterSpacing: "0",
            fontWeight: "400"
        }, Mt = [ "Webkit", "O", "Moz", "ms" ], Nt = ue.createElement("div").style;
        ve.extend({
            cssHooks: {
                opacity: {
                    get: function(e, t) {
                        if (t) {
                            var n = bt(e, "opacity");
                            return "" === n ? "1" : n;
                        }
                    }
                }
            },
            cssNumber: {
                animationIterationCount: !0,
                columnCount: !0,
                fillOpacity: !0,
                flexGrow: !0,
                flexShrink: !0,
                fontWeight: !0,
                lineHeight: !0,
                opacity: !0,
                order: !0,
                orphans: !0,
                widows: !0,
                zIndex: !0,
                zoom: !0
            },
            cssProps: {
                "float": ge.cssFloat ? "cssFloat" : "styleFloat"
            },
            style: function(e, t, n, r) {
                if (e && 3 !== e.nodeType && 8 !== e.nodeType && e.style) {
                    var i, o, a, s = ve.camelCase(t), u = e.style;
                    if (t = ve.cssProps[s] || (ve.cssProps[s] = z(s) || s), a = ve.cssHooks[t] || ve.cssHooks[s], 
                    void 0 === n) return a && "get" in a && void 0 !== (i = a.get(e, !1, r)) ? i : u[t];
                    if (o = typeof n, "string" === o && (i = We.exec(n)) && i[1] && (n = g(e, t, i), 
                    o = "number"), null != n && n === n && ("number" === o && (n += i && i[3] || (ve.cssNumber[s] ? "" : "px")), 
                    ge.clearCloneStyle || "" !== n || 0 !== t.indexOf("background") || (u[t] = "inherit"), 
                    !(a && "set" in a && void 0 === (n = a.set(e, n, r))))) try {
                        u[t] = n;
                    } catch (l) {}
                }
            },
            css: function(e, t, n, r) {
                var i, o, a, s = ve.camelCase(t);
                return t = ve.cssProps[s] || (ve.cssProps[s] = z(s) || s), a = ve.cssHooks[t] || ve.cssHooks[s], 
                a && "get" in a && (o = a.get(e, !0, n)), void 0 === o && (o = bt(e, t, r)), "normal" === o && t in Et && (o = Et[t]), 
                "" === n || n ? (i = parseFloat(o), n === !0 || isFinite(i) ? i || 0 : o) : o;
            }
        }), ve.each([ "height", "width" ], function(e, t) {
            ve.cssHooks[t] = {
                get: function(e, n, r) {
                    return n ? St.test(ve.css(e, "display")) && 0 === e.offsetWidth ? gt(e, kt, function() {
                        return q(e, t, r);
                    }) : q(e, t, r) : void 0;
                },
                set: function(e, n, r) {
                    var i = r && vt(e);
                    return P(e, n, r ? R(e, t, r, ge.boxSizing && "border-box" === ve.css(e, "boxSizing", !1, i), i) : 0);
                }
            };
        }), ge.opacity || (ve.cssHooks.opacity = {
            get: function(e, t) {
                return Tt.test((t && e.currentStyle ? e.currentStyle.filter : e.style.filter) || "") ? .01 * parseFloat(RegExp.$1) + "" : t ? "1" : "";
            },
            set: function(e, t) {
                var n = e.style, r = e.currentStyle, i = ve.isNumeric(t) ? "alpha(opacity=" + 100 * t + ")" : "", o = r && r.filter || n.filter || "";
                n.zoom = 1, (t >= 1 || "" === t) && "" === ve.trim(o.replace(wt, "")) && n.removeAttribute && (n.removeAttribute("filter"), 
                "" === t || r && !r.filter) || (n.filter = wt.test(o) ? o.replace(wt, i) : o + " " + i);
            }
        }), ve.cssHooks.marginRight = j(ge.reliableMarginRight, function(e, t) {
            return t ? gt(e, {
                display: "inline-block"
            }, bt, [ e, "marginRight" ]) : void 0;
        }), ve.cssHooks.marginLeft = j(ge.reliableMarginLeft, function(e, t) {
            return t ? (parseFloat(bt(e, "marginLeft")) || (ve.contains(e.ownerDocument, e) ? e.getBoundingClientRect().left - gt(e, {
                marginLeft: 0
            }, function() {
                return e.getBoundingClientRect().left;
            }) : 0)) + "px" : void 0;
        }), ve.each({
            margin: "",
            padding: "",
            border: "Width"
        }, function(e, t) {
            ve.cssHooks[e + t] = {
                expand: function(n) {
                    for (var r = 0, i = {}, o = "string" == typeof n ? n.split(" ") : [ n ]; 4 > r; r++) i[e + Ie[r] + t] = o[r] || o[r - 2] || o[0];
                    return i;
                }
            }, ht.test(e) || (ve.cssHooks[e + t].set = P);
        }), ve.fn.extend({
            css: function(e, t) {
                return $e(this, function(e, t, n) {
                    var r, i, o = {}, a = 0;
                    if (ve.isArray(t)) {
                        for (r = vt(e), i = t.length; i > a; a++) o[t[a]] = ve.css(e, t[a], !1, r);
                        return o;
                    }
                    return void 0 !== n ? ve.style(e, t, n) : ve.css(e, t);
                }, e, t, arguments.length > 1);
            },
            show: function() {
                return F(this, !0);
            },
            hide: function() {
                return F(this);
            },
            toggle: function(e) {
                return "boolean" == typeof e ? e ? this.show() : this.hide() : this.each(function() {
                    Be(this) ? ve(this).show() : ve(this).hide();
                });
            }
        }), ve.Tween = W, W.prototype = {
            constructor: W,
            init: function(e, t, n, r, i, o) {
                this.elem = e, this.prop = n, this.easing = i || ve.easing._default, this.options = t, 
                this.start = this.now = this.cur(), this.end = r, this.unit = o || (ve.cssNumber[n] ? "" : "px");
            },
            cur: function() {
                var e = W.propHooks[this.prop];
                return e && e.get ? e.get(this) : W.propHooks._default.get(this);
            },
            run: function(e) {
                var t, n = W.propHooks[this.prop];
                return this.options.duration ? this.pos = t = ve.easing[this.easing](e, this.options.duration * e, 0, 1, this.options.duration) : this.pos = t = e, 
                this.now = (this.end - this.start) * t + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), 
                n && n.set ? n.set(this) : W.propHooks._default.set(this), this;
            }
        }, W.prototype.init.prototype = W.prototype, W.propHooks = {
            _default: {
                get: function(e) {
                    var t;
                    return 1 !== e.elem.nodeType || null != e.elem[e.prop] && null == e.elem.style[e.prop] ? e.elem[e.prop] : (t = ve.css(e.elem, e.prop, ""), 
                    t && "auto" !== t ? t : 0);
                },
                set: function(e) {
                    ve.fx.step[e.prop] ? ve.fx.step[e.prop](e) : 1 !== e.elem.nodeType || null == e.elem.style[ve.cssProps[e.prop]] && !ve.cssHooks[e.prop] ? e.elem[e.prop] = e.now : ve.style(e.elem, e.prop, e.now + e.unit);
                }
            }
        }, W.propHooks.scrollTop = W.propHooks.scrollLeft = {
            set: function(e) {
                e.elem.nodeType && e.elem.parentNode && (e.elem[e.prop] = e.now);
            }
        }, ve.easing = {
            linear: function(e) {
                return e;
            },
            swing: function(e) {
                return .5 - Math.cos(e * Math.PI) / 2;
            },
            _default: "swing"
        }, ve.fx = W.prototype.init, ve.fx.step = {};
        var Dt, At, Ht = /^(?:toggle|show|hide)$/, Ot = /queueHooks$/;
        ve.Animation = ve.extend(V, {
            tweeners: {
                "*": [ function(e, t) {
                    var n = this.createTween(e, t);
                    return g(n.elem, e, We.exec(t), n), n;
                } ]
            },
            tweener: function(e, t) {
                ve.isFunction(e) ? (t = e, e = [ "*" ]) : e = e.match(_e);
                for (var n, r = 0, i = e.length; i > r; r++) n = e[r], V.tweeners[n] = V.tweeners[n] || [], 
                V.tweeners[n].unshift(t);
            },
            prefilters: [ X ],
            prefilter: function(e, t) {
                t ? V.prefilters.unshift(e) : V.prefilters.push(e);
            }
        }), ve.speed = function(e, t, n) {
            var r = e && "object" == typeof e ? ve.extend({}, e) : {
                complete: n || !n && t || ve.isFunction(e) && e,
                duration: e,
                easing: n && t || t && !ve.isFunction(t) && t
            };
            return r.duration = ve.fx.off ? 0 : "number" == typeof r.duration ? r.duration : r.duration in ve.fx.speeds ? ve.fx.speeds[r.duration] : ve.fx.speeds._default, 
            null != r.queue && r.queue !== !0 || (r.queue = "fx"), r.old = r.complete, r.complete = function() {
                ve.isFunction(r.old) && r.old.call(this), r.queue && ve.dequeue(this, r.queue);
            }, r;
        }, ve.fn.extend({
            fadeTo: function(e, t, n, r) {
                return this.filter(Be).css("opacity", 0).show().end().animate({
                    opacity: t
                }, e, n, r);
            },
            animate: function(e, t, n, r) {
                var i = ve.isEmptyObject(e), o = ve.speed(t, n, r), a = function() {
                    var t = V(this, ve.extend({}, e), o);
                    (i || ve._data(this, "finish")) && t.stop(!0);
                };
                return a.finish = a, i || o.queue === !1 ? this.each(a) : this.queue(o.queue, a);
            },
            stop: function(e, t, n) {
                var r = function(e) {
                    var t = e.stop;
                    delete e.stop, t(n);
                };
                return "string" != typeof e && (n = t, t = e, e = void 0), t && e !== !1 && this.queue(e || "fx", []), 
                this.each(function() {
                    var t = !0, i = null != e && e + "queueHooks", o = ve.timers, a = ve._data(this);
                    if (i) a[i] && a[i].stop && r(a[i]); else for (i in a) a[i] && a[i].stop && Ot.test(i) && r(a[i]);
                    for (i = o.length; i--; ) o[i].elem !== this || null != e && o[i].queue !== e || (o[i].anim.stop(n), 
                    t = !1, o.splice(i, 1));
                    !t && n || ve.dequeue(this, e);
                });
            },
            finish: function(e) {
                return e !== !1 && (e = e || "fx"), this.each(function() {
                    var t, n = ve._data(this), r = n[e + "queue"], i = n[e + "queueHooks"], o = ve.timers, a = r ? r.length : 0;
                    for (n.finish = !0, ve.queue(this, e, []), i && i.stop && i.stop.call(this, !0), 
                    t = o.length; t--; ) o[t].elem === this && o[t].queue === e && (o[t].anim.stop(!0), 
                    o.splice(t, 1));
                    for (t = 0; a > t; t++) r[t] && r[t].finish && r[t].finish.call(this);
                    delete n.finish;
                });
            }
        }), ve.each([ "toggle", "show", "hide" ], function(e, t) {
            var n = ve.fn[t];
            ve.fn[t] = function(e, r, i) {
                return null == e || "boolean" == typeof e ? n.apply(this, arguments) : this.animate(B(t, !0), e, r, i);
            };
        }), ve.each({
            slideDown: B("show"),
            slideUp: B("hide"),
            slideToggle: B("toggle"),
            fadeIn: {
                opacity: "show"
            },
            fadeOut: {
                opacity: "hide"
            },
            fadeToggle: {
                opacity: "toggle"
            }
        }, function(e, t) {
            ve.fn[e] = function(e, n, r) {
                return this.animate(t, e, n, r);
            };
        }), ve.timers = [], ve.fx.tick = function() {
            var e, t = ve.timers, n = 0;
            for (Dt = ve.now(); n < t.length; n++) e = t[n], e() || t[n] !== e || t.splice(n--, 1);
            t.length || ve.fx.stop(), Dt = void 0;
        }, ve.fx.timer = function(e) {
            ve.timers.push(e), e() ? ve.fx.start() : ve.timers.pop();
        }, ve.fx.interval = 13, ve.fx.start = function() {
            At || (At = i.setInterval(ve.fx.tick, ve.fx.interval));
        }, ve.fx.stop = function() {
            i.clearInterval(At), At = null;
        }, ve.fx.speeds = {
            slow: 600,
            fast: 200,
            _default: 400
        }, ve.fn.delay = function(e, t) {
            return e = ve.fx ? ve.fx.speeds[e] || e : e, t = t || "fx", this.queue(t, function(t, n) {
                var r = i.setTimeout(t, e);
                n.stop = function() {
                    i.clearTimeout(r);
                };
            });
        }, function() {
            var e, t = ue.createElement("input"), n = ue.createElement("div"), r = ue.createElement("select"), i = r.appendChild(ue.createElement("option"));
            n = ue.createElement("div"), n.setAttribute("className", "t"), n.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>", 
            e = n.getElementsByTagName("a")[0], t.setAttribute("type", "checkbox"), n.appendChild(t), 
            e = n.getElementsByTagName("a")[0], e.style.cssText = "top:1px", ge.getSetAttribute = "t" !== n.className, 
            ge.style = /top/.test(e.getAttribute("style")), ge.hrefNormalized = "/a" === e.getAttribute("href"), 
            ge.checkOn = !!t.value, ge.optSelected = i.selected, ge.enctype = !!ue.createElement("form").enctype, 
            r.disabled = !0, ge.optDisabled = !i.disabled, t = ue.createElement("input"), t.setAttribute("value", ""), 
            ge.input = "" === t.getAttribute("value"), t.value = "t", t.setAttribute("type", "radio"), 
            ge.radioValue = "t" === t.value;
        }();
        var Lt = /\r/g, _t = /[\x20\t\r\n\f]+/g;
        ve.fn.extend({
            val: function(e) {
                var t, n, r, i = this[0];
                return arguments.length ? (r = ve.isFunction(e), this.each(function(n) {
                    var i;
                    1 === this.nodeType && (i = r ? e.call(this, n, ve(this).val()) : e, null == i ? i = "" : "number" == typeof i ? i += "" : ve.isArray(i) && (i = ve.map(i, function(e) {
                        return null == e ? "" : e + "";
                    })), t = ve.valHooks[this.type] || ve.valHooks[this.nodeName.toLowerCase()], t && "set" in t && void 0 !== t.set(this, i, "value") || (this.value = i));
                })) : i ? (t = ve.valHooks[i.type] || ve.valHooks[i.nodeName.toLowerCase()], t && "get" in t && void 0 !== (n = t.get(i, "value")) ? n : (n = i.value, 
                "string" == typeof n ? n.replace(Lt, "") : null == n ? "" : n)) : void 0;
            }
        }), ve.extend({
            valHooks: {
                option: {
                    get: function(e) {
                        var t = ve.find.attr(e, "value");
                        return null != t ? t : ve.trim(ve.text(e)).replace(_t, " ");
                    }
                },
                select: {
                    get: function(e) {
                        for (var t, n, r = e.options, i = e.selectedIndex, o = "select-one" === e.type || 0 > i, a = o ? null : [], s = o ? i + 1 : r.length, u = 0 > i ? s : o ? i : 0; s > u; u++) if (n = r[u], 
                        (n.selected || u === i) && (ge.optDisabled ? !n.disabled : null === n.getAttribute("disabled")) && (!n.parentNode.disabled || !ve.nodeName(n.parentNode, "optgroup"))) {
                            if (t = ve(n).val(), o) return t;
                            a.push(t);
                        }
                        return a;
                    },
                    set: function(e, t) {
                        for (var n, r, i = e.options, o = ve.makeArray(t), a = i.length; a--; ) if (r = i[a], 
                        ve.inArray(ve.valHooks.option.get(r), o) > -1) try {
                            r.selected = n = !0;
                        } catch (s) {
                            r.scrollHeight;
                        } else r.selected = !1;
                        return n || (e.selectedIndex = -1), i;
                    }
                }
            }
        }), ve.each([ "radio", "checkbox" ], function() {
            ve.valHooks[this] = {
                set: function(e, t) {
                    return ve.isArray(t) ? e.checked = ve.inArray(ve(e).val(), t) > -1 : void 0;
                }
            }, ge.checkOn || (ve.valHooks[this].get = function(e) {
                return null === e.getAttribute("value") ? "on" : e.value;
            });
        });
        var jt, zt, Ft = ve.expr.attrHandle, Pt = /^(?:checked|selected)$/i, Rt = ge.getSetAttribute, qt = ge.input;
        ve.fn.extend({
            attr: function(e, t) {
                return $e(this, ve.attr, e, t, arguments.length > 1);
            },
            removeAttr: function(e) {
                return this.each(function() {
                    ve.removeAttr(this, e);
                });
            }
        }), ve.extend({
            attr: function(e, t, n) {
                var r, i, o = e.nodeType;
                if (3 !== o && 8 !== o && 2 !== o) return "undefined" == typeof e.getAttribute ? ve.prop(e, t, n) : (1 === o && ve.isXMLDoc(e) || (t = t.toLowerCase(), 
                i = ve.attrHooks[t] || (ve.expr.match.bool.test(t) ? zt : jt)), void 0 !== n ? null === n ? void ve.removeAttr(e, t) : i && "set" in i && void 0 !== (r = i.set(e, n, t)) ? r : (e.setAttribute(t, n + ""), 
                n) : i && "get" in i && null !== (r = i.get(e, t)) ? r : (r = ve.find.attr(e, t), 
                null == r ? void 0 : r));
            },
            attrHooks: {
                type: {
                    set: function(e, t) {
                        if (!ge.radioValue && "radio" === t && ve.nodeName(e, "input")) {
                            var n = e.value;
                            return e.setAttribute("type", t), n && (e.value = n), t;
                        }
                    }
                }
            },
            removeAttr: function(e, t) {
                var n, r, i = 0, o = t && t.match(_e);
                if (o && 1 === e.nodeType) for (;n = o[i++]; ) r = ve.propFix[n] || n, ve.expr.match.bool.test(n) ? qt && Rt || !Pt.test(n) ? e[r] = !1 : e[ve.camelCase("default-" + n)] = e[r] = !1 : ve.attr(e, n, ""), 
                e.removeAttribute(Rt ? n : r);
            }
        }), zt = {
            set: function(e, t, n) {
                return t === !1 ? ve.removeAttr(e, n) : qt && Rt || !Pt.test(n) ? e.setAttribute(!Rt && ve.propFix[n] || n, n) : e[ve.camelCase("default-" + n)] = e[n] = !0, 
                n;
            }
        }, ve.each(ve.expr.match.bool.source.match(/\w+/g), function(e, t) {
            var n = Ft[t] || ve.find.attr;
            qt && Rt || !Pt.test(t) ? Ft[t] = function(e, t, r) {
                var i, o;
                return r || (o = Ft[t], Ft[t] = i, i = null != n(e, t, r) ? t.toLowerCase() : null, 
                Ft[t] = o), i;
            } : Ft[t] = function(e, t, n) {
                return n ? void 0 : e[ve.camelCase("default-" + t)] ? t.toLowerCase() : null;
            };
        }), qt && Rt || (ve.attrHooks.value = {
            set: function(e, t, n) {
                return ve.nodeName(e, "input") ? void (e.defaultValue = t) : jt && jt.set(e, t, n);
            }
        }), Rt || (jt = {
            set: function(e, t, n) {
                var r = e.getAttributeNode(n);
                return r || e.setAttributeNode(r = e.ownerDocument.createAttribute(n)), r.value = t += "", 
                "value" === n || t === e.getAttribute(n) ? t : void 0;
            }
        }, Ft.id = Ft.name = Ft.coords = function(e, t, n) {
            var r;
            return n ? void 0 : (r = e.getAttributeNode(t)) && "" !== r.value ? r.value : null;
        }, ve.valHooks.button = {
            get: function(e, t) {
                var n = e.getAttributeNode(t);
                return n && n.specified ? n.value : void 0;
            },
            set: jt.set
        }, ve.attrHooks.contenteditable = {
            set: function(e, t, n) {
                jt.set(e, "" !== t && t, n);
            }
        }, ve.each([ "width", "height" ], function(e, t) {
            ve.attrHooks[t] = {
                set: function(e, n) {
                    return "" === n ? (e.setAttribute(t, "auto"), n) : void 0;
                }
            };
        })), ge.style || (ve.attrHooks.style = {
            get: function(e) {
                return e.style.cssText || void 0;
            },
            set: function(e, t) {
                return e.style.cssText = t + "";
            }
        });
        var Wt = /^(?:input|select|textarea|button|object)$/i, It = /^(?:a|area)$/i;
        ve.fn.extend({
            prop: function(e, t) {
                return $e(this, ve.prop, e, t, arguments.length > 1);
            },
            removeProp: function(e) {
                return e = ve.propFix[e] || e, this.each(function() {
                    try {
                        this[e] = void 0, delete this[e];
                    } catch (t) {}
                });
            }
        }), ve.extend({
            prop: function(e, t, n) {
                var r, i, o = e.nodeType;
                if (3 !== o && 8 !== o && 2 !== o) return 1 === o && ve.isXMLDoc(e) || (t = ve.propFix[t] || t, 
                i = ve.propHooks[t]), void 0 !== n ? i && "set" in i && void 0 !== (r = i.set(e, n, t)) ? r : e[t] = n : i && "get" in i && null !== (r = i.get(e, t)) ? r : e[t];
            },
            propHooks: {
                tabIndex: {
                    get: function(e) {
                        var t = ve.find.attr(e, "tabindex");
                        return t ? parseInt(t, 10) : Wt.test(e.nodeName) || It.test(e.nodeName) && e.href ? 0 : -1;
                    }
                }
            },
            propFix: {
                "for": "htmlFor",
                "class": "className"
            }
        }), ge.hrefNormalized || ve.each([ "href", "src" ], function(e, t) {
            ve.propHooks[t] = {
                get: function(e) {
                    return e.getAttribute(t, 4);
                }
            };
        }), ge.optSelected || (ve.propHooks.selected = {
            get: function(e) {
                var t = e.parentNode;
                return t && (t.selectedIndex, t.parentNode && t.parentNode.selectedIndex), null;
            },
            set: function(e) {
                var t = e.parentNode;
                t && (t.selectedIndex, t.parentNode && t.parentNode.selectedIndex);
            }
        }), ve.each([ "tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable" ], function() {
            ve.propFix[this.toLowerCase()] = this;
        }), ge.enctype || (ve.propFix.enctype = "encoding");
        var Bt = /[\t\r\n\f]/g;
        ve.fn.extend({
            addClass: function(e) {
                var t, n, r, i, o, a, s, u = 0;
                if (ve.isFunction(e)) return this.each(function(t) {
                    ve(this).addClass(e.call(this, t, Y(this)));
                });
                if ("string" == typeof e && e) for (t = e.match(_e) || []; n = this[u++]; ) if (i = Y(n), 
                r = 1 === n.nodeType && (" " + i + " ").replace(Bt, " ")) {
                    for (a = 0; o = t[a++]; ) r.indexOf(" " + o + " ") < 0 && (r += o + " ");
                    s = ve.trim(r), i !== s && ve.attr(n, "class", s);
                }
                return this;
            },
            removeClass: function(e) {
                var t, n, r, i, o, a, s, u = 0;
                if (ve.isFunction(e)) return this.each(function(t) {
                    ve(this).removeClass(e.call(this, t, Y(this)));
                });
                if (!arguments.length) return this.attr("class", "");
                if ("string" == typeof e && e) for (t = e.match(_e) || []; n = this[u++]; ) if (i = Y(n), 
                r = 1 === n.nodeType && (" " + i + " ").replace(Bt, " ")) {
                    for (a = 0; o = t[a++]; ) for (;r.indexOf(" " + o + " ") > -1; ) r = r.replace(" " + o + " ", " ");
                    s = ve.trim(r), i !== s && ve.attr(n, "class", s);
                }
                return this;
            },
            toggleClass: function(e, t) {
                var n = typeof e;
                return "boolean" == typeof t && "string" === n ? t ? this.addClass(e) : this.removeClass(e) : ve.isFunction(e) ? this.each(function(n) {
                    ve(this).toggleClass(e.call(this, n, Y(this), t), t);
                }) : this.each(function() {
                    var t, r, i, o;
                    if ("string" === n) for (r = 0, i = ve(this), o = e.match(_e) || []; t = o[r++]; ) i.hasClass(t) ? i.removeClass(t) : i.addClass(t); else void 0 !== e && "boolean" !== n || (t = Y(this), 
                    t && ve._data(this, "__className__", t), ve.attr(this, "class", t || e === !1 ? "" : ve._data(this, "__className__") || ""));
                });
            },
            hasClass: function(e) {
                var t, n, r = 0;
                for (t = " " + e + " "; n = this[r++]; ) if (1 === n.nodeType && (" " + Y(n) + " ").replace(Bt, " ").indexOf(t) > -1) return !0;
                return !1;
            }
        }), ve.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "), function(e, t) {
            ve.fn[t] = function(e, n) {
                return arguments.length > 0 ? this.on(t, null, e, n) : this.trigger(t);
            };
        }), ve.fn.extend({
            hover: function(e, t) {
                return this.mouseenter(e).mouseleave(t || e);
            }
        });
        var $t = i.location, Ut = ve.now(), Xt = /\?/, Jt = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;
        ve.parseJSON = function(e) {
            if (i.JSON && i.JSON.parse) return i.JSON.parse(e + "");
            var t, n = null, r = ve.trim(e + "");
            return r && !ve.trim(r.replace(Jt, function(e, r, i, o) {
                return t && r && (n = 0), 0 === n ? e : (t = i || r, n += !o - !i, "");
            })) ? Function("return " + r)() : ve.error("Invalid JSON: " + e);
        }, ve.parseXML = function(e) {
            var t, n;
            if (!e || "string" != typeof e) return null;
            try {
                i.DOMParser ? (n = new i.DOMParser(), t = n.parseFromString(e, "text/xml")) : (t = new i.ActiveXObject("Microsoft.XMLDOM"), 
                t.async = "false", t.loadXML(e));
            } catch (r) {
                t = void 0;
            }
            return t && t.documentElement && !t.getElementsByTagName("parsererror").length || ve.error("Invalid XML: " + e), 
            t;
        };
        var Vt = /#.*$/, Yt = /([?&])_=[^&]*/, Gt = /^(.*?):[ \t]*([^\r\n]*)\r?$/gm, Qt = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, Kt = /^(?:GET|HEAD)$/, Zt = /^\/\//, en = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/, tn = {}, nn = {}, rn = "*/".concat("*"), on = $t.href, an = en.exec(on.toLowerCase()) || [];
        ve.extend({
            active: 0,
            lastModified: {},
            etag: {},
            ajaxSettings: {
                url: on,
                type: "GET",
                isLocal: Qt.test(an[1]),
                global: !0,
                processData: !0,
                async: !0,
                contentType: "application/x-www-form-urlencoded; charset=UTF-8",
                accepts: {
                    "*": rn,
                    text: "text/plain",
                    html: "text/html",
                    xml: "application/xml, text/xml",
                    json: "application/json, text/javascript"
                },
                contents: {
                    xml: /\bxml\b/,
                    html: /\bhtml/,
                    json: /\bjson\b/
                },
                responseFields: {
                    xml: "responseXML",
                    text: "responseText",
                    json: "responseJSON"
                },
                converters: {
                    "* text": String,
                    "text html": !0,
                    "text json": ve.parseJSON,
                    "text xml": ve.parseXML
                },
                flatOptions: {
                    url: !0,
                    context: !0
                }
            },
            ajaxSetup: function(e, t) {
                return t ? K(K(e, ve.ajaxSettings), t) : K(ve.ajaxSettings, e);
            },
            ajaxPrefilter: G(tn),
            ajaxTransport: G(nn),
            ajax: function(e, t) {
                function n(e, t, n, r) {
                    var o, d, v, b, w, S = t;
                    2 !== x && (x = 2, u && i.clearTimeout(u), c = void 0, s = r || "", T.readyState = e > 0 ? 4 : 0, 
                    o = e >= 200 && 300 > e || 304 === e, n && (b = Z(f, T, n)), b = ee(f, b, T, o), 
                    o ? (f.ifModified && (w = T.getResponseHeader("Last-Modified"), w && (ve.lastModified[a] = w), 
                    w = T.getResponseHeader("etag"), w && (ve.etag[a] = w)), 204 === e || "HEAD" === f.type ? S = "nocontent" : 304 === e ? S = "notmodified" : (S = b.state, 
                    d = b.data, v = b.error, o = !v)) : (v = S, !e && S || (S = "error", 0 > e && (e = 0))), 
                    T.status = e, T.statusText = (t || S) + "", o ? m.resolveWith(p, [ d, S, T ]) : m.rejectWith(p, [ T, S, v ]), 
                    T.statusCode(y), y = void 0, l && h.trigger(o ? "ajaxSuccess" : "ajaxError", [ T, f, o ? d : v ]), 
                    g.fireWith(p, [ T, S ]), l && (h.trigger("ajaxComplete", [ T, f ]), --ve.active || ve.event.trigger("ajaxStop")));
                }
                "object" == typeof e && (t = e, e = void 0), t = t || {};
                var r, o, a, s, u, l, c, d, f = ve.ajaxSetup({}, t), p = f.context || f, h = f.context && (p.nodeType || p.jquery) ? ve(p) : ve.event, m = ve.Deferred(), g = ve.Callbacks("once memory"), y = f.statusCode || {}, v = {}, b = {}, x = 0, w = "canceled", T = {
                    readyState: 0,
                    getResponseHeader: function(e) {
                        var t;
                        if (2 === x) {
                            if (!d) for (d = {}; t = Gt.exec(s); ) d[t[1].toLowerCase()] = t[2];
                            t = d[e.toLowerCase()];
                        }
                        return null == t ? null : t;
                    },
                    getAllResponseHeaders: function() {
                        return 2 === x ? s : null;
                    },
                    setRequestHeader: function(e, t) {
                        var n = e.toLowerCase();
                        return x || (e = b[n] = b[n] || e, v[e] = t), this;
                    },
                    overrideMimeType: function(e) {
                        return x || (f.mimeType = e), this;
                    },
                    statusCode: function(e) {
                        var t;
                        if (e) if (2 > x) for (t in e) y[t] = [ y[t], e[t] ]; else T.always(e[T.status]);
                        return this;
                    },
                    abort: function(e) {
                        var t = e || w;
                        return c && c.abort(t), n(0, t), this;
                    }
                };
                if (m.promise(T).complete = g.add, T.success = T.done, T.error = T.fail, f.url = ((e || f.url || on) + "").replace(Vt, "").replace(Zt, an[1] + "//"), 
                f.type = t.method || t.type || f.method || f.type, f.dataTypes = ve.trim(f.dataType || "*").toLowerCase().match(_e) || [ "" ], 
                null == f.crossDomain && (r = en.exec(f.url.toLowerCase()), f.crossDomain = !(!r || r[1] === an[1] && r[2] === an[2] && (r[3] || ("http:" === r[1] ? "80" : "443")) === (an[3] || ("http:" === an[1] ? "80" : "443")))), 
                f.data && f.processData && "string" != typeof f.data && (f.data = ve.param(f.data, f.traditional)), 
                Q(tn, f, t, T), 2 === x) return T;
                l = ve.event && f.global, l && 0 === ve.active++ && ve.event.trigger("ajaxStart"), 
                f.type = f.type.toUpperCase(), f.hasContent = !Kt.test(f.type), a = f.url, f.hasContent || (f.data && (a = f.url += (Xt.test(a) ? "&" : "?") + f.data, 
                delete f.data), f.cache === !1 && (f.url = Yt.test(a) ? a.replace(Yt, "$1_=" + Ut++) : a + (Xt.test(a) ? "&" : "?") + "_=" + Ut++)), 
                f.ifModified && (ve.lastModified[a] && T.setRequestHeader("If-Modified-Since", ve.lastModified[a]), 
                ve.etag[a] && T.setRequestHeader("If-None-Match", ve.etag[a])), (f.data && f.hasContent && f.contentType !== !1 || t.contentType) && T.setRequestHeader("Content-Type", f.contentType), 
                T.setRequestHeader("Accept", f.dataTypes[0] && f.accepts[f.dataTypes[0]] ? f.accepts[f.dataTypes[0]] + ("*" !== f.dataTypes[0] ? ", " + rn + "; q=0.01" : "") : f.accepts["*"]);
                for (o in f.headers) T.setRequestHeader(o, f.headers[o]);
                if (f.beforeSend && (f.beforeSend.call(p, T, f) === !1 || 2 === x)) return T.abort();
                w = "abort";
                for (o in {
                    success: 1,
                    error: 1,
                    complete: 1
                }) T[o](f[o]);
                if (c = Q(nn, f, t, T)) {
                    if (T.readyState = 1, l && h.trigger("ajaxSend", [ T, f ]), 2 === x) return T;
                    f.async && f.timeout > 0 && (u = i.setTimeout(function() {
                        T.abort("timeout");
                    }, f.timeout));
                    try {
                        x = 1, c.send(v, n);
                    } catch (S) {
                        if (!(2 > x)) throw S;
                        n(-1, S);
                    }
                } else n(-1, "No Transport");
                return T;
            },
            getJSON: function(e, t, n) {
                return ve.get(e, t, n, "json");
            },
            getScript: function(e, t) {
                return ve.get(e, void 0, t, "script");
            }
        }), ve.each([ "get", "post" ], function(e, t) {
            ve[t] = function(e, n, r, i) {
                return ve.isFunction(n) && (i = i || r, r = n, n = void 0), ve.ajax(ve.extend({
                    url: e,
                    type: t,
                    dataType: i,
                    data: n,
                    success: r
                }, ve.isPlainObject(e) && e));
            };
        }), ve._evalUrl = function(e) {
            return ve.ajax({
                url: e,
                type: "GET",
                dataType: "script",
                cache: !0,
                async: !1,
                global: !1,
                "throws": !0
            });
        }, ve.fn.extend({
            wrapAll: function(e) {
                if (ve.isFunction(e)) return this.each(function(t) {
                    ve(this).wrapAll(e.call(this, t));
                });
                if (this[0]) {
                    var t = ve(e, this[0].ownerDocument).eq(0).clone(!0);
                    this[0].parentNode && t.insertBefore(this[0]), t.map(function() {
                        for (var e = this; e.firstChild && 1 === e.firstChild.nodeType; ) e = e.firstChild;
                        return e;
                    }).append(this);
                }
                return this;
            },
            wrapInner: function(e) {
                return ve.isFunction(e) ? this.each(function(t) {
                    ve(this).wrapInner(e.call(this, t));
                }) : this.each(function() {
                    var t = ve(this), n = t.contents();
                    n.length ? n.wrapAll(e) : t.append(e);
                });
            },
            wrap: function(e) {
                var t = ve.isFunction(e);
                return this.each(function(n) {
                    ve(this).wrapAll(t ? e.call(this, n) : e);
                });
            },
            unwrap: function() {
                return this.parent().each(function() {
                    ve.nodeName(this, "body") || ve(this).replaceWith(this.childNodes);
                }).end();
            }
        }), ve.expr.filters.hidden = function(e) {
            return ge.reliableHiddenOffsets() ? e.offsetWidth <= 0 && e.offsetHeight <= 0 && !e.getClientRects().length : ne(e);
        }, ve.expr.filters.visible = function(e) {
            return !ve.expr.filters.hidden(e);
        };
        var sn = /%20/g, un = /\[\]$/, ln = /\r?\n/g, cn = /^(?:submit|button|image|reset|file)$/i, dn = /^(?:input|select|textarea|keygen)/i;
        ve.param = function(e, t) {
            var n, r = [], i = function(e, t) {
                t = ve.isFunction(t) ? t() : null == t ? "" : t, r[r.length] = encodeURIComponent(e) + "=" + encodeURIComponent(t);
            };
            if (void 0 === t && (t = ve.ajaxSettings && ve.ajaxSettings.traditional), ve.isArray(e) || e.jquery && !ve.isPlainObject(e)) ve.each(e, function() {
                i(this.name, this.value);
            }); else for (n in e) re(n, e[n], t, i);
            return r.join("&").replace(sn, "+");
        }, ve.fn.extend({
            serialize: function() {
                return ve.param(this.serializeArray());
            },
            serializeArray: function() {
                return this.map(function() {
                    var e = ve.prop(this, "elements");
                    return e ? ve.makeArray(e) : this;
                }).filter(function() {
                    var e = this.type;
                    return this.name && !ve(this).is(":disabled") && dn.test(this.nodeName) && !cn.test(e) && (this.checked || !Ue.test(e));
                }).map(function(e, t) {
                    var n = ve(this).val();
                    return null == n ? null : ve.isArray(n) ? ve.map(n, function(e) {
                        return {
                            name: t.name,
                            value: e.replace(ln, "\r\n")
                        };
                    }) : {
                        name: t.name,
                        value: n.replace(ln, "\r\n")
                    };
                }).get();
            }
        }), ve.ajaxSettings.xhr = void 0 !== i.ActiveXObject ? function() {
            return this.isLocal ? oe() : ue.documentMode > 8 ? ie() : /^(get|post|head|put|delete|options)$/i.test(this.type) && ie() || oe();
        } : ie;
        var fn = 0, pn = {}, hn = ve.ajaxSettings.xhr();
        i.attachEvent && i.attachEvent("onunload", function() {
            for (var e in pn) pn[e](void 0, !0);
        }), ge.cors = !!hn && "withCredentials" in hn, hn = ge.ajax = !!hn, hn && ve.ajaxTransport(function(e) {
            if (!e.crossDomain || ge.cors) {
                var t;
                return {
                    send: function(n, r) {
                        var o, a = e.xhr(), s = ++fn;
                        if (a.open(e.type, e.url, e.async, e.username, e.password), e.xhrFields) for (o in e.xhrFields) a[o] = e.xhrFields[o];
                        e.mimeType && a.overrideMimeType && a.overrideMimeType(e.mimeType), e.crossDomain || n["X-Requested-With"] || (n["X-Requested-With"] = "XMLHttpRequest");
                        for (o in n) void 0 !== n[o] && a.setRequestHeader(o, n[o] + "");
                        a.send(e.hasContent && e.data || null), t = function(n, i) {
                            var o, u, l;
                            if (t && (i || 4 === a.readyState)) if (delete pn[s], t = void 0, a.onreadystatechange = ve.noop, 
                            i) 4 !== a.readyState && a.abort(); else {
                                l = {}, o = a.status, "string" == typeof a.responseText && (l.text = a.responseText);
                                try {
                                    u = a.statusText;
                                } catch (c) {
                                    u = "";
                                }
                                o || !e.isLocal || e.crossDomain ? 1223 === o && (o = 204) : o = l.text ? 200 : 404;
                            }
                            l && r(o, u, l, a.getAllResponseHeaders());
                        }, e.async ? 4 === a.readyState ? i.setTimeout(t) : a.onreadystatechange = pn[s] = t : t();
                    },
                    abort: function() {
                        t && t(void 0, !0);
                    }
                };
            }
        }), ve.ajaxSetup({
            accepts: {
                script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
            },
            contents: {
                script: /\b(?:java|ecma)script\b/
            },
            converters: {
                "text script": function(e) {
                    return ve.globalEval(e), e;
                }
            }
        }), ve.ajaxPrefilter("script", function(e) {
            void 0 === e.cache && (e.cache = !1), e.crossDomain && (e.type = "GET", e.global = !1);
        }), ve.ajaxTransport("script", function(e) {
            if (e.crossDomain) {
                var t, n = ue.head || ve("head")[0] || ue.documentElement;
                return {
                    send: function(r, i) {
                        t = ue.createElement("script"), t.async = !0, e.scriptCharset && (t.charset = e.scriptCharset), 
                        t.src = e.url, t.onload = t.onreadystatechange = function(e, n) {
                            (n || !t.readyState || /loaded|complete/.test(t.readyState)) && (t.onload = t.onreadystatechange = null, 
                            t.parentNode && t.parentNode.removeChild(t), t = null, n || i(200, "success"));
                        }, n.insertBefore(t, n.firstChild);
                    },
                    abort: function() {
                        t && t.onload(void 0, !0);
                    }
                };
            }
        });
        var mn = [], gn = /(=)\?(?=&|$)|\?\?/;
        ve.ajaxSetup({
            jsonp: "callback",
            jsonpCallback: function() {
                var e = mn.pop() || ve.expando + "_" + Ut++;
                return this[e] = !0, e;
            }
        }), ve.ajaxPrefilter("json jsonp", function(e, t, n) {
            var r, o, a, s = e.jsonp !== !1 && (gn.test(e.url) ? "url" : "string" == typeof e.data && 0 === (e.contentType || "").indexOf("application/x-www-form-urlencoded") && gn.test(e.data) && "data");
            return s || "jsonp" === e.dataTypes[0] ? (r = e.jsonpCallback = ve.isFunction(e.jsonpCallback) ? e.jsonpCallback() : e.jsonpCallback, 
            s ? e[s] = e[s].replace(gn, "$1" + r) : e.jsonp !== !1 && (e.url += (Xt.test(e.url) ? "&" : "?") + e.jsonp + "=" + r), 
            e.converters["script json"] = function() {
                return a || ve.error(r + " was not called"), a[0];
            }, e.dataTypes[0] = "json", o = i[r], i[r] = function() {
                a = arguments;
            }, n.always(function() {
                void 0 === o ? ve(i).removeProp(r) : i[r] = o, e[r] && (e.jsonpCallback = t.jsonpCallback, 
                mn.push(r)), a && ve.isFunction(o) && o(a[0]), a = o = void 0;
            }), "script") : void 0;
        }), ve.parseHTML = function(e, t, n) {
            if (!e || "string" != typeof e) return null;
            "boolean" == typeof t && (n = t, t = !1), t = t || ue;
            var r = Me.exec(e), i = !n && [];
            return r ? [ t.createElement(r[1]) ] : (r = w([ e ], t, i), i && i.length && ve(i).remove(), 
            ve.merge([], r.childNodes));
        };
        var yn = ve.fn.load;
        ve.fn.load = function(e, t, n) {
            if ("string" != typeof e && yn) return yn.apply(this, arguments);
            var r, i, o, a = this, s = e.indexOf(" ");
            return s > -1 && (r = ve.trim(e.slice(s, e.length)), e = e.slice(0, s)), ve.isFunction(t) ? (n = t, 
            t = void 0) : t && "object" == typeof t && (i = "POST"), a.length > 0 && ve.ajax({
                url: e,
                type: i || "GET",
                dataType: "html",
                data: t
            }).done(function(e) {
                o = arguments, a.html(r ? ve("<div>").append(ve.parseHTML(e)).find(r) : e);
            }).always(n && function(e, t) {
                a.each(function() {
                    n.apply(this, o || [ e.responseText, t, e ]);
                });
            }), this;
        }, ve.each([ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function(e, t) {
            ve.fn[t] = function(e) {
                return this.on(t, e);
            };
        }), ve.expr.filters.animated = function(e) {
            return ve.grep(ve.timers, function(t) {
                return e === t.elem;
            }).length;
        }, ve.offset = {
            setOffset: function(e, t, n) {
                var r, i, o, a, s, u, l, c = ve.css(e, "position"), d = ve(e), f = {};
                "static" === c && (e.style.position = "relative"), s = d.offset(), o = ve.css(e, "top"), 
                u = ve.css(e, "left"), l = ("absolute" === c || "fixed" === c) && ve.inArray("auto", [ o, u ]) > -1, 
                l ? (r = d.position(), a = r.top, i = r.left) : (a = parseFloat(o) || 0, i = parseFloat(u) || 0), 
                ve.isFunction(t) && (t = t.call(e, n, ve.extend({}, s))), null != t.top && (f.top = t.top - s.top + a), 
                null != t.left && (f.left = t.left - s.left + i), "using" in t ? t.using.call(e, f) : d.css(f);
            }
        }, ve.fn.extend({
            offset: function(e) {
                if (arguments.length) return void 0 === e ? this : this.each(function(t) {
                    ve.offset.setOffset(this, e, t);
                });
                var t, n, r = {
                    top: 0,
                    left: 0
                }, i = this[0], o = i && i.ownerDocument;
                return o ? (t = o.documentElement, ve.contains(t, i) ? ("undefined" != typeof i.getBoundingClientRect && (r = i.getBoundingClientRect()), 
                n = ae(o), {
                    top: r.top + (n.pageYOffset || t.scrollTop) - (t.clientTop || 0),
                    left: r.left + (n.pageXOffset || t.scrollLeft) - (t.clientLeft || 0)
                }) : r) : void 0;
            },
            position: function() {
                if (this[0]) {
                    var e, t, n = {
                        top: 0,
                        left: 0
                    }, r = this[0];
                    return "fixed" === ve.css(r, "position") ? t = r.getBoundingClientRect() : (e = this.offsetParent(), 
                    t = this.offset(), ve.nodeName(e[0], "html") || (n = e.offset()), n.top += ve.css(e[0], "borderTopWidth", !0), 
                    n.left += ve.css(e[0], "borderLeftWidth", !0)), {
                        top: t.top - n.top - ve.css(r, "marginTop", !0),
                        left: t.left - n.left - ve.css(r, "marginLeft", !0)
                    };
                }
            },
            offsetParent: function() {
                return this.map(function() {
                    for (var e = this.offsetParent; e && !ve.nodeName(e, "html") && "static" === ve.css(e, "position"); ) e = e.offsetParent;
                    return e || yt;
                });
            }
        }), ve.each({
            scrollLeft: "pageXOffset",
            scrollTop: "pageYOffset"
        }, function(e, t) {
            var n = /Y/.test(t);
            ve.fn[e] = function(r) {
                return $e(this, function(e, r, i) {
                    var o = ae(e);
                    return void 0 === i ? o ? t in o ? o[t] : o.document.documentElement[r] : e[r] : void (o ? o.scrollTo(n ? ve(o).scrollLeft() : i, n ? i : ve(o).scrollTop()) : e[r] = i);
                }, e, r, arguments.length, null);
            };
        }), ve.each([ "top", "left" ], function(e, t) {
            ve.cssHooks[t] = j(ge.pixelPosition, function(e, n) {
                return n ? (n = bt(e, t), mt.test(n) ? ve(e).position()[t] + "px" : n) : void 0;
            });
        }), ve.each({
            Height: "height",
            Width: "width"
        }, function(e, t) {
            ve.each({
                padding: "inner" + e,
                content: t,
                "": "outer" + e
            }, function(n, r) {
                ve.fn[r] = function(r, i) {
                    var o = arguments.length && (n || "boolean" != typeof r), a = n || (r === !0 || i === !0 ? "margin" : "border");
                    return $e(this, function(t, n, r) {
                        var i;
                        return ve.isWindow(t) ? t.document.documentElement["client" + e] : 9 === t.nodeType ? (i = t.documentElement, 
                        Math.max(t.body["scroll" + e], i["scroll" + e], t.body["offset" + e], i["offset" + e], i["client" + e])) : void 0 === r ? ve.css(t, n, a) : ve.style(t, n, r, a);
                    }, t, o ? r : void 0, o, null);
                };
            });
        }), ve.fn.extend({
            bind: function(e, t, n) {
                return this.on(e, null, t, n);
            },
            unbind: function(e, t) {
                return this.off(e, null, t);
            },
            delegate: function(e, t, n, r) {
                return this.on(t, e, n, r);
            },
            undelegate: function(e, t, n) {
                return 1 === arguments.length ? this.off(e, "**") : this.off(t, e || "**", n);
            }
        }), ve.fn.size = function() {
            return this.length;
        }, ve.fn.andSelf = ve.fn.addBack, t(12) && (n = [], r = function() {
            return ve;
        }.apply(exports, n), !(void 0 !== r && (e.exports = r)));
        var vn = i.jQuery, bn = i.$;
        return ve.noConflict = function(e) {
            return i.$ === ve && (i.$ = bn), e && i.jQuery === ve && (i.jQuery = vn), ve;
        }, o || (i.jQuery = i.$ = ve), ve;
    });
}, , , , , , , , , function(e, exports) {
    (function(t) {
        e.exports = t;
    }).call(exports, {});
}, function(e, exports) {
    e.exports = function() {
        var e = [];
        return e.toString = function() {
            for (var e = [], t = 0; t < this.length; t++) {
                var n = this[t];
                n[2] ? e.push("@media " + n[2] + "{" + n[1] + "}") : e.push(n[1]);
            }
            return e.join("");
        }, e.i = function(t, n) {
            "string" == typeof t && (t = [ [ null, t, "" ] ]);
            for (var r = {}, i = 0; i < this.length; i++) {
                var o = this[i][0];
                "number" == typeof o && (r[o] = !0);
            }
            for (i = 0; i < t.length; i++) {
                var a = t[i];
                "number" == typeof a[0] && r[a[0]] || (n && !a[2] ? a[2] = n : n && (a[2] = "(" + a[2] + ") and (" + n + ")"), 
                e.push(a));
            }
        }, e;
    };
} ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,